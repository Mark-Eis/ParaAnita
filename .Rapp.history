# _______________________#
# State Pension payable from 66y 2m (Dept Work & Pensions Letter 17 Oct 2017)#
# Also https://www.gov.uk/state-pension-age/y/age/1960-05-10#
state_pen <- 9371.27#
#
# _________________#
# 100% Retirement#
# Residual Santander mortgage after 5yy (bal60) - 100% retire#
(resmort2024 <- bal60 - rib_ls2024_80USS / 0.8 - ib2024USS)#
# [1] 5776.083#
#
# Estimated Take Home Pay (THP) from https://www.tax.service.gov.uk/estimate-paye-take-home-pay#
# Based on Gross (pre-tax) Income of £39,126.15#
# Year £30,629.98 Month £2,552.50#
#
# Repayment remortgage, 5y @ 5.2% - 100% retire#
amort.period(Loan = resmort2024, n = 5 * 12, i = 0.052, ic = 12, pf = 12)#
amort.table(Loan = resmort2024, n = 5 * 12, i = 0.052, ic = 12, pf = 12)$Other#
# Total Interest £795.83#
#
# Repayment remortgage, 1y @ 5.2% - 100% retire#
amort.period(Loan = resmort2024, n = 1 * 12, i = 0.052, ic = 12, pf = 12)#
amort.table(Loan = resmort2024, n = 1 * 12, i = 0.052, ic = 12, pf = 12)$Other#
# Total Interest £163.98
39126.15 + 9371.27
# _________________#
# 80% Retirement#
#
# Work 0.2 FTE#
# Based on Gross (pre-tax) Income of £31,300.92 plus £75K x 20%#
crossprod(c(rib_pen2024_80USS, 75000), c(1, 0.2)) |> as.numeric()
rib_pen2024_80USS + 75000 * 0.2
# Work 0.4 FTE#
# Based on Gross (pre-tax) Income of £31,300.92 plus £75K x 40%#
crossprod(c(rib_pen2024_80USS, 75000), c(1, 0.4)) |> as.numeric()#
rib_pen2024_80USS + 75000 * 0.4#
# [1] 61300.92
# Residual Santander mortgage after 5yy (bal60) - 80% retire, without Investment Builder#
(resmort2024_80pc <- bal60 - rib_ls2024_80USS)
# Repayment remortgage, 10y @ 5.2% - 80% retire#
amort.period(Loan = resmort2024_80pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12, t = 24)#
# Interest paid in first 2 years#
amort.table(Loan = resmort2024_80pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12, plot = FALSE)$Schedule[1:24, 3] |> sum()
get_amortint(amort.table(Loan = resmort2024_80pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12, plot = FALSE), 24)
# Repayment remortgage, 5y @ 5.2% - 80% retire#
# amort.table(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12, plot = FALSE)#
amort.period(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12, t = 24)#
# Interest paid in first 2 years#
amort.table(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12, plot = FALSE)$Schedule[1:24, 3] |> sum()
get_amortint(amort.table(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12, plot = FALSE), 24)
# Residual Santander mortgage after 5yy (bal60) - 80% retire, with Investment Builder#
(resmort2024_80pc <- bal60 - ls_ttl2024_80USS)#
#
# Repayment remortgage, 10y @ 5.2% - 80% retire#
amort.period(Loan = resmort2024_80pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12, t = 24)#
# Interest paid in first 2 years#
amort.table(Loan = resmort2024_80pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12)$Schedule[1:24, 3] |> sum()
get_amortint(amort.table(Loan = resmort2024_80pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12), 24)
# Repayment remortgage, 5y @ 5.2% - 80% retire#
# amort.table(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12)#
amort.period(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12, t = 24)#
# Interest paid in first 2 years#
amort.table(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12)$Schedule[1:24, 3] |> sum()#
get_amortint(amort.table(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12), 24)
# Mortgage Calculations 2023#
#
library(BitsnBobs)#
library(tibble)#
library(FinancialMath)#
help(package = "FinancialMath")#
#
# See also example in /Users/frzmce/Library/CloudStorage/OneDrive-UniversityofBristol/Documents/R/MCE R Functions & Exemplars/amort.period and amort.table examples.R#
#
# _______________________#
# Santander Mortgage: -#
# Five years fixed rate 1.84%#
# Loan advanced 1 Jul 2019; 1st repayment 1 Aug 2019#
(sndr1_t <- amort.table(Loan = 200099, n = 15 * 12, i = 0.0184, ic = 12, pf = 12))#
#
# Total interest paid after 5 years#
get_amortint(sndr1_t, 60)#
# [1] 15707.5#
#
(sndr1_p <- amort.period(Loan = 200099, n = 15 * 12, i = 0.0184, ic = 12, pf = 12, t = 60))#
#
# Balance after 5 years#
(bal60 <- get_amortval(sndr1_p, "Balance"))#
# [1] 139428.6#
#
# _______________________#
# Santander mortgage after fixed rate ends @ BoE base rate + 3.25%: -#
#
# Bank of England base rate#
boe_base <- 0.0525	#
#
(sndr2_p <- amort.period(Loan = bal60, n = 10 * 12, i = boe_base + 0.0325, ic = 12, pf = 12, t = 23)) # t = 23 is Jun 2026#
(sndr2_t <- amort.table(Loan = bal60, n = 10 * 12, i = boe_base + 0.0325, ic = 12, pf = 12))#
#
# Interest paid over years 6 - 15#
get_amortval(sndr2_t, "Total Interest") #
# [1] 68017.23#
#
# Total interest paid after 15 years#
get_amortint(sndr1_t, 60) + get_amortval(sndr2_t, "Total Interest") #
# [1] 83724.73#
#
# Interest paid at higher rate by Jun 2026, i.e. age 66 (payment 1, 13 and 25 are Aug, 23 is Jun)#
get_amortint(sndr2_t, 23)#
# [1] 21318.9#
#
# Balance after Jun 2026 payment#
get_amortval(sndr2_p, "Balance")#
# [1] 120987.1#
sndr2_t$Schedule[23, 5]#
all.equal(get_amortval(sndr2_p, "Balance"), sndr2_t$Schedule[23, 5])#
#
# _______________________#
# Alternative repayment mortgage, 10y @ 5.2%#
(arm_p <- amort.period(Loan = bal60, n = 10 * 12, i = 0.052, ic = 12, pf = 12, t = 23)) # t = 23 is Jun 2026#
(arm_t <- amort.table(Loan = bal60, n = 10 * 12, i = 0.052, ic = 12, pf = 12))#
#
# Interest paid year 6 - 15#
get_amortval(arm_t, "Total Interest")#
# [1] 39674.35#
#
# Total interest paid after 15 years#
get_amortint(sndr1_t, 60) + get_amortval(arm_t, "Total Interest")#
# [1] 55381.85#
#
# Interest paid at this rate by Jun 2026, i.e. age 66 (payment 1, 13 and 25 are Aug, 23 is Jun)#
get_amortint(arm_t, 23)#
# [1] 12892.29#
#
# Balance after Jun 2026 payment#
get_amortval(arm_p, "Balance")#
arm_t$Schedule[23, 5]#
all.equal(arm_p[10], arm_t$Schedule[23, 5])#
#
# ________________________________#
# USS Statement 31 March 2023: - #
	# Retirement Income Builder #
rib_ls2023 <- 116028.12#
rib_pen2023 <- 38676.04#
	# Investment Builder#
ib2023 <- 10023.90#
	# Cash total#
rib_ls2023 + ib2023#
# Benefit Illustrator - retire 10 Jul 2024 - age 64y 2m#
	# Retirement Income Builder #
rib_ls2024e <- 117760#
rib_pen2024e <- 39240#
	# Investment Builder#
ib2024e <- 15450#
	# Estimated cash total: lump sum + investment builder.#
(ls_ttl2024 <- rib_ls2024e + ib2024e)#
# Benefit Illustrator - retire 10 Jul 2026 - age 66y 2m#
	# Retirement Income Builder #
rib_ls2026e <- 127010#
rib_pen2026e <- 42330#
	# Investment Builder#
ib2026e <- 25180#
	# Estimated cash total: lump sum + investment builder.#
(ls_ttl2026 <- rib_ls2026e + ib2026e)#
# _______________________#
# USS Quotation - retire 10 Jul 2024 - age 64y 2m#
	# Retirement Income Builder #
rib_ls2024_80USS <- 93902.76#
rib_pen2024_80USS <- 31300.92#
	# Investment Builder#
ib2024USS <- 16274.10#
	# Quoted cash total: lump sum + investment builder.#
(ls_ttl2024_80USS <- rib_ls2024_80USS + ib2024USS)#
#
# Full value for comparison with estimates#
c(lump_sum = rib_ls2024_80USS, pension = rib_pen2024_80USS) / 0.8#
# [1] 117378.45  39126.15#
#
# _______________________#
# State Pension payable from 66y 2m (Dept Work & Pensions Letter 17 Oct 2017)#
# Also https://www.gov.uk/state-pension-age/y/age/1960-05-10#
state_pen <- 9371.27#
#
# _________________#
# 100% Retirement#
# Residual Santander mortgage after 5yy (bal60) - 100% retire#
(resmort2024 <- bal60 - rib_ls2024_80USS / 0.8 - ib2024USS)#
# [1] 5776.083#
#
# Estimated Take Home Pay (THP) from https://www.tax.service.gov.uk/estimate-paye-take-home-pay#
# Based on Gross (pre-tax) Income of £39,126.15#
# Year £30,629.98 Month £2,552.50#
#
# Estimated Take Home Pay (THP) from https://www.tax.service.gov.uk/estimate-paye-take-home-pay#
# Based on Gross (pre-tax) Income of £39,126.15 and State Pension of £9,371.27#
39126.15 + 9371.27#
# [1] 48497.42#
# Year £41,313.74 Month £3,442.81#
#
# Repayment remortgage, 5y @ 5.2% - 100% retire#
amort.period(Loan = resmort2024, n = 5 * 12, i = 0.052, ic = 12, pf = 12)#
amort.table(Loan = resmort2024, n = 5 * 12, i = 0.052, ic = 12, pf = 12)$Other#
# Total Interest £795.83#
#
# Repayment remortgage, 1y @ 5.2% - 100% retire#
amort.period(Loan = resmort2024, n = 1 * 12, i = 0.052, ic = 12, pf = 12)#
amort.table(Loan = resmort2024, n = 1 * 12, i = 0.052, ic = 12, pf = 12)$Other#
# Total Interest £163.98#
#
# _________________#
# 80% Retirement#
#
# Work 0.2 FTE#
# Based on Gross (pre-tax) Income of £31,300.92 plus £75K x 20%#
rib_pen2024_80USS + 75000 * 0.2#
# [1] 46300.92#
# Estimated Take Home Pay (THP) from https://www.tax.service.gov.uk/estimate-paye-take-home-pay#
# Year £35,508.83 Month £2,959.07#
#
# Work 0.4 FTE#
# Based on Gross (pre-tax) Income of £31,300.92 plus £75K x 40%#
rib_pen2024_80USS + 75000 * 0.4#
# [1] 61300.92#
# Estimated Take Home Pay (THP) from https://www.tax.service.gov.uk/estimate-paye-take-home-pay#
# Year £49,352.15 Month £4,112.68#
#
# Residual Santander mortgage after 5yy (bal60) - 80% retire, without Investment Builder#
(resmort2024_80pc <- bal60 - rib_ls2024_80USS)#
# [1] 45525.87#
#
# Repayment remortgage, 10y @ 5.2% - 80% retire#
amort.period(Loan = resmort2024_80pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12, t = 24)#
# Interest paid in first 2 years#
get_amortint(amort.table(Loan = resmort2024_80pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12), 24)#
# [1] 4376.51#
#
# Repayment remortgage, 5y @ 5.2% - 80% retire#
# amort.table(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12)#
amort.period(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12, t = 24)#
# Interest paid in first 2 years#
get_amortint(amort.table(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12), 24)#
# [1] 3912.23#
#
# Residual Santander mortgage after 5yy (bal60) - 80% retire, with Investment Builder#
(resmort2024_80pc <- bal60 - ls_ttl2024_80USS)#
#
# Repayment remortgage, 10y @ 5.2% - 80% retire#
amort.period(Loan = resmort2024_80pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12, t = 24)#
# Interest paid in first 2 years#
get_amortint(amort.table(Loan = resmort2024_80pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12), 24)#
# [1] 2812.03#
#
# Repayment remortgage, 5y @ 5.2% - 80% retire#
# amort.table(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12)#
amort.period(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12, t = 24)#
# Interest paid in first 2 years#
get_amortint(amort.table(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12), 24)#
# [1] 2513.73
75001*0.83
77207*0.83
# Income calculation—NB will be less than this as will still have some pension contributions & possibly AVCs!#
# Work 0.2 FTE#
# Based on Gross (pre-tax) Income of £31,300.92 plus £75K x 20%#
rib_pen2024_80USS + 77207 * 0.2#
# [1] 46300.92#
# Estimated Take Home Pay (THP) from https://www.tax.service.gov.uk/estimate-paye-take-home-pay#
# Year £35,508.83 Month £2,959.07#
#
# Work 0.4 FTE#
# Based on Gross (pre-tax) Income of £31,300.92 plus £75K x 40%#
rib_pen2024_80USS + 77207 * 0.4#
# [1] 61300.92#
# Estimated Take Home Pay (THP) from https://www.tax.service.gov.uk/estimate-paye-take-home-pay#
# Year £49,352.15 Month £4,112.68
# Mortgage Calculations 2023#
#
library(BitsnBobs)#
library(tibble)#
library(FinancialMath)#
help(package = "FinancialMath")#
#
# See also example in /Users/frzmce/Library/CloudStorage/OneDrive-UniversityofBristol/Documents/R/MCE R Functions & Exemplars/amort.period and amort.table examples.R#
#
# _______________________#
# Santander Mortgage: -#
# Five years fixed rate 1.84%#
# Loan advanced 1 Jul 2019; 1st repayment 1 Aug 2019#
(sndr1_t <- amort.table(Loan = 200099, n = 15 * 12, i = 0.0184, ic = 12, pf = 12))#
#
# Total interest paid after 5 years#
get_amortint(sndr1_t, 60)#
# [1] 15707.5#
#
(sndr1_p <- amort.period(Loan = 200099, n = 15 * 12, i = 0.0184, ic = 12, pf = 12, t = 60))#
#
# Balance after 5 years#
(bal60 <- get_amortval(sndr1_p, "Balance"))#
# [1] 139428.6#
#
# _______________________#
# Santander mortgage after fixed rate ends @ BoE base rate + 3.25%: -#
#
# Bank of England base rate#
boe_base <- 0.0525	#
#
(sndr2_p <- amort.period(Loan = bal60, n = 10 * 12, i = boe_base + 0.0325, ic = 12, pf = 12, t = 23)) # t = 23 is Jun 2026#
(sndr2_t <- amort.table(Loan = bal60, n = 10 * 12, i = boe_base + 0.0325, ic = 12, pf = 12))#
#
# Interest paid over years 6 - 15#
get_amortval(sndr2_t, "Total Interest") #
# [1] 68017.23#
#
# Total interest paid after 15 years#
get_amortint(sndr1_t, 60) + get_amortval(sndr2_t, "Total Interest") #
# [1] 83724.73#
#
# Interest paid at higher rate by Jun 2026, i.e. age 66 (payment 1, 13 and 25 are Aug, 23 is Jun)#
get_amortint(sndr2_t, 23)#
# [1] 21318.9#
#
# Balance after Jun 2026 payment#
get_amortval(sndr2_p, "Balance")#
# [1] 120987.1#
sndr2_t$Schedule[23, 5]#
all.equal(get_amortval(sndr2_p, "Balance"), sndr2_t$Schedule[23, 5])#
#
# _______________________#
# Alternative repayment mortgage, 10y @ 5.2%#
(arm_p <- amort.period(Loan = bal60, n = 10 * 12, i = 0.052, ic = 12, pf = 12, t = 23)) # t = 23 is Jun 2026#
(arm_t <- amort.table(Loan = bal60, n = 10 * 12, i = 0.052, ic = 12, pf = 12))#
#
# Interest paid year 6 - 15#
get_amortval(arm_t, "Total Interest")#
# [1] 39674.35#
#
# Total interest paid after 15 years#
get_amortint(sndr1_t, 60) + get_amortval(arm_t, "Total Interest")#
# [1] 55381.85#
#
# Interest paid at this rate by Jun 2026, i.e. age 66 (payment 1, 13 and 25 are Aug, 23 is Jun)#
get_amortint(arm_t, 23)#
# [1] 12892.29#
#
# Balance after Jun 2026 payment#
get_amortval(arm_p, "Balance")#
arm_t$Schedule[23, 5]#
all.equal(arm_p[10], arm_t$Schedule[23, 5])#
#
# ________________________________#
# USS Statement 31 March 2023: - #
	# Retirement Income Builder #
rib_ls2023 <- 116028.12#
rib_pen2023 <- 38676.04#
	# Investment Builder#
ib2023 <- 10023.90#
	# Cash total#
rib_ls2023 + ib2023#
# Benefit Illustrator - retire 10 Jul 2024 - age 64y 2m#
	# Retirement Income Builder #
rib_ls2024e <- 117760#
rib_pen2024e <- 39240#
	# Investment Builder#
ib2024e <- 15450#
	# Estimated cash total: lump sum + investment builder.#
(ls_ttl2024 <- rib_ls2024e + ib2024e)#
# Benefit Illustrator - retire 10 Jul 2026 - age 66y 2m#
	# Retirement Income Builder #
rib_ls2026e <- 127010#
rib_pen2026e <- 42330#
	# Investment Builder#
ib2026e <- 25180#
	# Estimated cash total: lump sum + investment builder.#
(ls_ttl2026 <- rib_ls2026e + ib2026e)#
# _______________________#
# USS Quotation - retire 10 Jul 2024 - age 64y 2m#
	# Retirement Income Builder #
rib_ls2024_80USS <- 93902.76#
rib_pen2024_80USS <- 31300.92#
	# Investment Builder#
ib2024USS <- 16274.10#
	# Quoted cash total: lump sum + investment builder.#
(ls_ttl2024_80USS <- rib_ls2024_80USS + ib2024USS)#
#
# Full value for comparison with estimates#
c(lump_sum = rib_ls2024_80USS, pension = rib_pen2024_80USS) / 0.8#
# [1] 117378.45  39126.15#
#
# _______________________#
# State Pension payable from 66y 2m (Dept Work & Pensions Letter 17 Oct 2017)#
# Also https://www.gov.uk/state-pension-age/y/age/1960-05-10#
state_pen <- 9371.27#
#
# _________________#
# 100% Retirement#
# Residual Santander mortgage after 5yy (bal60) - 100% retire#
(resmort2024 <- bal60 - rib_ls2024_80USS / 0.8 - ib2024USS)#
# [1] 5776.083#
#
# Estimated Take Home Pay (THP) from https://www.tax.service.gov.uk/estimate-paye-take-home-pay#
# Based on Gross (pre-tax) Income of £39,126.15#
# Year £30,629.98 Month £2,552.50#
#
# Estimated Take Home Pay (THP) from https://www.tax.service.gov.uk/estimate-paye-take-home-pay#
# Based on Gross (pre-tax) Income of £39,126.15 and State Pension of £9,371.27#
39126.15 + 9371.27#
# [1] 48497.42#
# Year £41,313.74 Month £3,442.81#
#
# Repayment remortgage, 5y @ 5.2% - 100% retire#
amort.period(Loan = resmort2024, n = 5 * 12, i = 0.052, ic = 12, pf = 12)#
amort.table(Loan = resmort2024, n = 5 * 12, i = 0.052, ic = 12, pf = 12)$Other#
# Total Interest £795.83#
#
# Repayment remortgage, 1y @ 5.2% - 100% retire#
amort.period(Loan = resmort2024, n = 1 * 12, i = 0.052, ic = 12, pf = 12)#
amort.table(Loan = resmort2024, n = 1 * 12, i = 0.052, ic = 12, pf = 12)$Other#
# Total Interest £163.98#
#
# _________________#
# 80% Retirement#
#
# Income calculation—NB will be less than this as will still have some pension contributions & possibly AVCs!#
# Work 0.2 FTE#
# Based on Gross (pre-tax) Income of £31,300.92 plus £77,207 x 20%#
rib_pen2024_80USS + 77207 * 0.2#
# [1] 46742.32#
# Estimated Take Home Pay (THP) from https://www.tax.service.gov.uk/estimate-paye-take-home-pay#
# Year £35,808.98 Month £2,984.08#
#
# Work 0.4 FTE#
# Based on Gross (pre-tax) Income of £31,300.92 plus £77,207 x 40%#
rib_pen2024_80USS + 77207 * 0.4#
# [1] 62183.72#
# Estimated Take Home Pay (THP) from https://www.tax.service.gov.uk/estimate-paye-take-home-pay#
# Year £45,119.56 Month £3,759.96#
#
# Residual Santander mortgage after 5yy (bal60) - 80% retire, without Investment Builder#
(resmort2024_80pc <- bal60 - rib_ls2024_80USS)#
# [1] 45525.87#
#
# Repayment remortgage, 10y @ 5.2% - 80% retire#
amort.period(Loan = resmort2024_80pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12, t = 24)#
# Interest paid in first 2 years#
get_amortint(amort.table(Loan = resmort2024_80pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12), 24)#
# [1] 4376.51
# Repayment remortgage, 5y @ 5.2% - 80% retire#
# amort.table(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12)#
amort.period(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12, t = 24)#
# Interest paid in first 2 years#
get_amortint(amort.table(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12), 24)#
# [1] 3912.23
(rm10noib <- amort.period(Loan = resmort2024_80pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12, t = 24))
get_amortval(rm10noib, PMT)
get_amortval(rm10noib, "PMT")
3759.96 - get_amortval(rm10noib, "PMT")
# Repayment remortgage, 5y @ 5.2% - 80% retire#
(rm5noib <- amort.period(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12, t = 24))#
# Affordability (0.4FTE) - monthly amount after payment#
3759.96 - get_amortval(rm5noib, "PMT")
# Affordability (0.4FTE) - monthly amount after payment#
3759.96 - get_amortval(rm10noib, "PMT")
# Repayment remortgage, 10y @ 5.2% - 80% retire#
(rm10ib <- amort.period(Loan = resmort2024_80pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12, t = 24))#
3759.96 - get_amortval(rm10ib, "PMT")
# Residual Santander mortgage after 5yy (bal60) - 80% retire, with Investment Builder#
(resmort2024_80pc <- bal60 - ls_ttl2024_80USS)
# Repayment remortgage, 10y @ 5.2% - 80% retire#
(rm10ib <- amort.period(Loan = resmort2024_80pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12, t = 24))#
3759.96 - get_amortval(rm10ib, "PMT")
get_amortval(rm10ib, "PMT")
(rm5ib <- amort.period(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12, t = 24))
(rm5ib <- amort.period(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12, t = 24))#
# Affordability (0.4FTE) - monthly amount after payment#
3759.96 - get_amortval(rm5ib, "PMT")
crossprod(c(rib_pen2024_80USS, rib_pen2026e, state_pen), c(1, 0.2, 1.0)) |> as.numeric()
rib_pen2024_80USS + rib_pen2026 * 0.2 + state_pen
rib_pen2024_80USS + rib_pen2026e * 0.2 + state_pen
# Mortgage Calculations 2023#
#
library(BitsnBobs)#
library(tibble)#
library(FinancialMath)#
help(package = "FinancialMath")#
#
# See also example in /Users/frzmce/Library/CloudStorage/OneDrive-UniversityofBristol/Documents/R/MCE R Functions & Exemplars/amort.period and amort.table examples.R#
#
# _______________________#
# Santander Mortgage: -#
# Five years fixed rate 1.84%#
# Loan advanced 1 Jul 2019; 1st repayment 1 Aug 2019#
(sndr1_t <- amort.table(Loan = 200099, n = 15 * 12, i = 0.0184, ic = 12, pf = 12))#
#
# Total interest paid after 5 years#
get_amortint(sndr1_t, 60)#
# [1] 15707.5#
#
(sndr1_p <- amort.period(Loan = 200099, n = 15 * 12, i = 0.0184, ic = 12, pf = 12, t = 60))#
#
# Balance after 5 years#
(bal60 <- get_amortval(sndr1_p, "Balance"))#
# [1] 139428.6#
#
# _______________________#
# Santander mortgage after fixed rate ends @ BoE base rate + 3.25%: -#
#
# Bank of England base rate#
boe_base <- 0.0525	#
#
(sndr2_p <- amort.period(Loan = bal60, n = 10 * 12, i = boe_base + 0.0325, ic = 12, pf = 12, t = 23)) # t = 23 is Jun 2026#
(sndr2_t <- amort.table(Loan = bal60, n = 10 * 12, i = boe_base + 0.0325, ic = 12, pf = 12))#
#
# Interest paid over years 6 - 15#
get_amortval(sndr2_t, "Total Interest") #
# [1] 68017.23#
#
# Total interest paid after 15 years#
get_amortint(sndr1_t, 60) + get_amortval(sndr2_t, "Total Interest") #
# [1] 83724.73#
#
# Interest paid at higher rate by Jun 2026, i.e. age 66 (payment 1, 13 and 25 are Aug, 23 is Jun)#
get_amortint(sndr2_t, 23)#
# [1] 21318.9#
#
# Balance after Jun 2026 payment#
get_amortval(sndr2_p, "Balance")#
# [1] 120987.1#
sndr2_t$Schedule[23, 5]#
all.equal(get_amortval(sndr2_p, "Balance"), sndr2_t$Schedule[23, 5])#
#
# _______________________#
# Alternative repayment mortgage, 10y @ 5.2%#
(arm_p <- amort.period(Loan = bal60, n = 10 * 12, i = 0.052, ic = 12, pf = 12, t = 23)) # t = 23 is Jun 2026#
(arm_t <- amort.table(Loan = bal60, n = 10 * 12, i = 0.052, ic = 12, pf = 12))#
#
# Interest paid year 6 - 15#
get_amortval(arm_t, "Total Interest")#
# [1] 39674.35#
#
# Total interest paid after 15 years#
get_amortint(sndr1_t, 60) + get_amortval(arm_t, "Total Interest")#
# [1] 55381.85#
#
# Interest paid at this rate by Jun 2026, i.e. age 66 (payment 1, 13 and 25 are Aug, 23 is Jun)#
get_amortint(arm_t, 23)#
# [1] 12892.29#
#
# Balance after Jun 2026 payment#
get_amortval(arm_p, "Balance")#
arm_t$Schedule[23, 5]#
all.equal(arm_p[10], arm_t$Schedule[23, 5])#
#
# ________________________________#
# USS Statement 31 March 2023: - #
	# Retirement Income Builder #
rib_ls2023 <- 116028.12#
rib_pen2023 <- 38676.04#
	# Investment Builder#
ib2023 <- 10023.90#
	# Cash total#
rib_ls2023 + ib2023#
# Benefit Illustrator - retire 10 Jul 2024 - age 64y 2m#
	# Retirement Income Builder #
rib_ls2024e <- 117760#
rib_pen2024e <- 39240#
	# Investment Builder#
ib2024e <- 15450#
	# Estimated cash total: lump sum + investment builder.#
(ls_ttl2024 <- rib_ls2024e + ib2024e)#
# Benefit Illustrator - retire 10 Jul 2026 - age 66y 2m#
	# Retirement Income Builder #
rib_ls2026e <- 127010#
rib_pen2026e <- 42330#
	# Investment Builder#
ib2026e <- 25180#
	# Estimated cash total: lump sum + investment builder.#
(ls_ttl2026 <- rib_ls2026e + ib2026e)#
# _______________________#
# USS Quotation - retire 10 Jul 2024 - age 64y 2m#
	# Retirement Income Builder #
rib_ls2024_80USS <- 93902.76#
rib_pen2024_80USS <- 31300.92#
	# Investment Builder#
ib2024USS <- 16274.10#
	# Quoted cash total: lump sum + investment builder.#
(ls_ttl2024_80USS <- rib_ls2024_80USS + ib2024USS)#
#
# Full value for comparison with estimates#
c(lump_sum = rib_ls2024_80USS, pension = rib_pen2024_80USS) / 0.8#
# [1] 117378.45  39126.15#
#
# _______________________#
# State Pension payable from 66y 2m (Dept Work & Pensions Letter 17 Oct 2017)#
# Also https://www.gov.uk/state-pension-age/y/age/1960-05-10#
state_pen <- 9371.27#
#
# _________________#
# 100% Retirement#
# Residual Santander mortgage after 5yy (bal60) - 100% retire#
(resmort2024 <- bal60 - rib_ls2024_80USS / 0.8 - ib2024USS)#
# [1] 5776.083#
#
# Estimated Take Home Pay (THP) from https://www.tax.service.gov.uk/estimate-paye-take-home-pay#
# Based on Gross (pre-tax) Income of £39,126.15#
# Year £30,629.98 Month £2,552.50#
#
# Estimated Take Home Pay (THP) from https://www.tax.service.gov.uk/estimate-paye-take-home-pay#
# Based on Gross (pre-tax) Income of £39,126.15 and State Pension of £9,371.27#
39126.15 + 9371.27#
# [1] 48497.42#
# Year £41,313.74 Month £3,442.81#
#
# Repayment remortgage, 5y @ 5.2% - 100% retire#
amort.period(Loan = resmort2024, n = 5 * 12, i = 0.052, ic = 12, pf = 12)#
amort.table(Loan = resmort2024, n = 5 * 12, i = 0.052, ic = 12, pf = 12)$Other#
# Total Interest £795.83#
#
# Repayment remortgage, 1y @ 5.2% - 100% retire#
amort.period(Loan = resmort2024, n = 1 * 12, i = 0.052, ic = 12, pf = 12)#
amort.table(Loan = resmort2024, n = 1 * 12, i = 0.052, ic = 12, pf = 12)$Other#
# Total Interest £163.98#
#
# _________________#
# 80% Retirement#
#
# Income calculation—NB will be less than this as will still have some pension contributions & possibly AVCs!#
# Work 0.2 FTE#
# Based on Gross (pre-tax) Income of £31,300.92 plus £77,207 x 20%#
rib_pen2024_80USS + 77207 * 0.2#
# [1] 46742.32#
# Estimated Take Home Pay (THP) from https://www.tax.service.gov.uk/estimate-paye-take-home-pay#
# Year £35,808.98 Month £2,984.08#
#
# Work 0.4 FTE#
# Based on Gross (pre-tax) Income of £31,300.92 plus £77,207 x 40%#
rib_pen2024_80USS + 77207 * 0.4#
# [1] 62183.72#
# Estimated Take Home Pay (THP) from https://www.tax.service.gov.uk/estimate-paye-take-home-pay#
# Year £45,119.56 Month £3,759.96#
#
# Residual Santander mortgage after 5yy (bal60) - 80% retire, without Investment Builder#
(resmort2024_80pc <- bal60 - rib_ls2024_80USS)#
# [1] 45525.87#
#
# Repayment remortgage, 10y @ 5.2% - 80% retire#
(rm10noib <- amort.period(Loan = resmort2024_80pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12, t = 24))#
# Affordability (0.4FTE) - monthly amount after mtg payment#
3759.96 - get_amortval(rm10noib, "PMT")#
# [1] 3272.625#
#
# Interest paid in first 2 years#
get_amortint(amort.table(Loan = resmort2024_80pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12), 24)#
# [1] 4376.51#
#
# Repayment remortgage, 5y @ 5.2% - 80% retire#
(rm5noib <- amort.period(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12, t = 24))#
# Affordability (0.4FTE) - monthly amount after mtg payment#
3759.96 - get_amortval(rm5noib, "PMT")#
# [1] 2896.653#
#
# Interest paid in first 2 years#
get_amortint(amort.table(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12), 24)#
# [1] 3912.23#
#
# Residual Santander mortgage after 5yy (bal60) - 80% retire, with Investment Builder#
(resmort2024_80pc <- bal60 - ls_ttl2024_80USS)#
#
# Repayment remortgage, 10y @ 5.2% - 80% retire#
(rm10ib <- amort.period(Loan = resmort2024_80pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12, t = 24))#
# Affordability (0.4FTE) - monthly amount after mtg payment#
3759.96 - get_amortval(rm10ib, "PMT")#
# [1] 3446.832#
#
# Interest paid in first 2 years#
get_amortint(amort.table(Loan = resmort2024_80pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12), 24)#
# [1] 2812.03#
#
# Repayment remortgage, 5y @ 5.2% - 80% retire#
# amort.table(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12)#
(rm5ib <- amort.period(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12, t = 24))#
# Affordability (0.4FTE) - monthly amount after mtg payment#
3759.96 - get_amortval(rm5ib, "PMT")#
[1] 3205.259#
#
# Interest paid in first 2 years#
get_amortint(amort.table(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12), 24)#
# [1] 2513.73#
#
# 2nd lump sum at full retirement#
ls_ttl2026 * 0.2#
#
# Pen at full retirement#
rib_pen2024_80USS + rib_pen2026e * 0.2 + state_pen#
# 49138.19#
# Take home pay £41,826.35 a year, £3,485.53 a month
search()
.libPaths
.libPaths()
remove.packages(FinancialMath)
remove.packages("FinancialMath")
remove.packages("FinancialMath", "/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library")
library(BitsnBobs)
# Mortgage Calculations 2023#
#
library(BitsnBobs)#
library(tibble)#
library(FinancialMath)#
help(package = "FinancialMath")#
#
# See also example in /Users/frzmce/Library/CloudStorage/OneDrive-UniversityofBristol/Documents/R/MCE R Functions & Exemplars/amort.period and amort.table examples.R#
#
# _______________________#
# Santander Mortgage: -#
# Five years fixed rate 1.84%#
# Loan advanced 1 Jul 2019; 1st repayment 1 Aug 2019#
(sndr1_t <- amort.table(Loan = 200099, n = 15 * 12, i = 0.0184, ic = 12, pf = 12))#
#
# Total interest paid after 5 years#
get_amortint(sndr1_t, 60)#
# [1] 15707.5#
#
(sndr1_p <- amort.period(Loan = 200099, n = 15 * 12, i = 0.0184, ic = 12, pf = 12, t = 60))#
#
# Balance after 5 years#
(bal60 <- get_amortval(sndr1_p, "Balance"))#
# [1] 139428.6#
#
# _______________________#
# Santander mortgage after fixed rate ends @ BoE base rate + 3.25%: -#
#
# Bank of England base rate#
boe_base <- 0.0525	#
#
(sndr2_p <- amort.period(Loan = bal60, n = 10 * 12, i = boe_base + 0.0325, ic = 12, pf = 12, t = 23)) # t = 23 is Jun 2026#
(sndr2_t <- amort.table(Loan = bal60, n = 10 * 12, i = boe_base + 0.0325, ic = 12, pf = 12))#
#
# Interest paid over years 6 - 15#
get_amortval(sndr2_t, "Total Interest") #
# [1] 68017.23#
#
# Total interest paid after 15 years#
get_amortint(sndr1_t, 60) + get_amortval(sndr2_t, "Total Interest") #
# [1] 83724.73#
#
# Interest paid at higher rate by Jun 2026, i.e. age 66 (payment 1, 13 and 25 are Aug, 23 is Jun)#
get_amortint(sndr2_t, 23)#
# [1] 21318.9#
#
# Balance after Jun 2026 payment#
get_amortval(sndr2_p, "Balance")#
# [1] 120987.1#
sndr2_t$Schedule[23, 5]#
all.equal(get_amortval(sndr2_p, "Balance"), sndr2_t$Schedule[23, 5])#
#
# _______________________#
# Alternative repayment mortgage, 10y @ 5.2%#
(arm_p <- amort.period(Loan = bal60, n = 10 * 12, i = 0.052, ic = 12, pf = 12, t = 23)) # t = 23 is Jun 2026#
(arm_t <- amort.table(Loan = bal60, n = 10 * 12, i = 0.052, ic = 12, pf = 12))#
#
# Interest paid year 6 - 15#
get_amortval(arm_t, "Total Interest")#
# [1] 39674.35#
#
# Total interest paid after 15 years#
get_amortint(sndr1_t, 60) + get_amortval(arm_t, "Total Interest")#
# [1] 55381.85#
#
# Interest paid at this rate by Jun 2026, i.e. age 66 (payment 1, 13 and 25 are Aug, 23 is Jun)#
get_amortint(arm_t, 23)#
# [1] 12892.29#
#
# Balance after Jun 2026 payment#
get_amortval(arm_p, "Balance")#
arm_t$Schedule[23, 5]#
all.equal(arm_p[10], arm_t$Schedule[23, 5])#
#
# ________________________________#
# USS Statement 31 March 2023: - #
	# Retirement Income Builder #
rib_ls2023 <- 116028.12#
rib_pen2023 <- 38676.04#
	# Investment Builder#
ib2023 <- 10023.90#
	# Cash total#
rib_ls2023 + ib2023#
# Benefit Illustrator - retire 10 Jul 2024 - age 64y 2m#
	# Retirement Income Builder #
rib_ls2024e <- 117760#
rib_pen2024e <- 39240#
	# Investment Builder#
ib2024e <- 15450#
	# Estimated cash total: lump sum + investment builder.#
(ls_ttl2024 <- rib_ls2024e + ib2024e)#
# Benefit Illustrator - retire 10 Jul 2026 - age 66y 2m#
	# Retirement Income Builder #
rib_ls2026e <- 127010#
rib_pen2026e <- 42330#
	# Investment Builder#
ib2026e <- 25180#
	# Estimated cash total: lump sum + investment builder.#
(ls_ttl2026 <- rib_ls2026e + ib2026e)#
# _______________________#
# USS Quotation - retire 10 Jul 2024 - age 64y 2m#
	# Retirement Income Builder #
rib_ls2024_80USS <- 93902.76#
rib_pen2024_80USS <- 31300.92#
	# Investment Builder#
ib2024USS <- 16274.10#
	# Quoted cash total: lump sum + investment builder.#
(ls_ttl2024_80USS <- rib_ls2024_80USS + ib2024USS)#
#
# Full value for comparison with estimates#
c(lump_sum = rib_ls2024_80USS, pension = rib_pen2024_80USS) / 0.8#
# [1] 117378.45  39126.15#
#
# _______________________#
# State Pension payable from 66y 2m (Dept Work & Pensions Letter 17 Oct 2017)#
# Also https://www.gov.uk/state-pension-age/y/age/1960-05-10#
state_pen <- 9371.27#
#
# _________________#
# 100% Retirement#
# Residual Santander mortgage after 5yy (bal60) - 100% retire#
(resmort2024 <- bal60 - rib_ls2024_80USS / 0.8 - ib2024USS)#
# [1] 5776.083#
#
# Estimated Take Home Pay (THP) from https://www.tax.service.gov.uk/estimate-paye-take-home-pay#
# Based on Gross (pre-tax) Income of £39,126.15#
# Year £30,629.98 Month £2,552.50#
#
# Estimated Take Home Pay (THP) from https://www.tax.service.gov.uk/estimate-paye-take-home-pay#
# Based on Gross (pre-tax) Income of £39,126.15 and State Pension of £9,371.27#
39126.15 + 9371.27#
# [1] 48497.42#
# Year £41,313.74 Month £3,442.81#
#
# Repayment remortgage, 5y @ 5.2% - 100% retire#
amort.period(Loan = resmort2024, n = 5 * 12, i = 0.052, ic = 12, pf = 12)#
amort.table(Loan = resmort2024, n = 5 * 12, i = 0.052, ic = 12, pf = 12)$Other#
# Total Interest £795.83#
#
# Repayment remortgage, 1y @ 5.2% - 100% retire#
amort.period(Loan = resmort2024, n = 1 * 12, i = 0.052, ic = 12, pf = 12)#
amort.table(Loan = resmort2024, n = 1 * 12, i = 0.052, ic = 12, pf = 12)$Other#
# Total Interest £163.98#
#
# _________________#
# 80% Retirement#
#
# Income calculation—NB will be less than this as will still have some pension contributions & possibly AVCs!#
# Work 0.2 FTE#
# Based on Gross (pre-tax) Income of £31,300.92 plus £77,207 x 20%#
rib_pen2024_80USS + 77207 * 0.2#
# [1] 46742.32#
# Estimated Take Home Pay (THP) from https://www.tax.service.gov.uk/estimate-paye-take-home-pay#
# Year £35,808.98 Month £2,984.08#
#
# Work 0.4 FTE#
# Based on Gross (pre-tax) Income of £31,300.92 plus £77,207 x 40%#
rib_pen2024_80USS + 77207 * 0.4#
# [1] 62183.72#
# Estimated Take Home Pay (THP) from https://www.tax.service.gov.uk/estimate-paye-take-home-pay#
# Year £45,119.56 Month £3,759.96#
#
# Residual Santander mortgage after 5yy (bal60) - 80% retire, without Investment Builder#
(resmort2024_80pc <- bal60 - rib_ls2024_80USS)#
# [1] 45525.87#
#
# Repayment remortgage, 10y @ 5.2% - 80% retire#
(rm10noib <- amort.period(Loan = resmort2024_80pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12, t = 24))#
# Affordability (0.4FTE) - monthly amount after mtg payment#
3759.96 - get_amortval(rm10noib, "PMT")#
# [1] 3272.625#
#
# Interest paid in first 2 years#
get_amortint(amort.table(Loan = resmort2024_80pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12), 24)#
# [1] 4376.51#
#
# Repayment remortgage, 5y @ 5.2% - 80% retire#
(rm5noib <- amort.period(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12, t = 24))#
# Affordability (0.4FTE) - monthly amount after mtg payment#
3759.96 - get_amortval(rm5noib, "PMT")#
# [1] 2896.653#
#
# Interest paid in first 2 years#
get_amortint(amort.table(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12), 24)#
# [1] 3912.23#
#
# Residual Santander mortgage after 5yy (bal60) - 80% retire, with Investment Builder#
(resmort2024_80pc <- bal60 - ls_ttl2024_80USS)#
#
# Repayment remortgage, 10y @ 5.2% - 80% retire#
(rm10ib <- amort.period(Loan = resmort2024_80pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12, t = 24))#
# Affordability (0.4FTE) - monthly amount after mtg payment#
3759.96 - get_amortval(rm10ib, "PMT")#
# [1] 3446.832#
#
# Interest paid in first 2 years#
get_amortint(amort.table(Loan = resmort2024_80pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12), 24)#
# [1] 2812.03#
#
# Repayment remortgage, 5y @ 5.2% - 80% retire#
# amort.table(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12)#
(rm5ib <- amort.period(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12, t = 24))#
# Affordability (0.4FTE) - monthly amount after mtg payment#
3759.96 - get_amortval(rm5ib, "PMT")#
# [1] 3205.259#
#
# Interest paid in first 2 years#
get_amortint(amort.table(Loan = resmort2024_80pc, n = 5 * 12, i = 0.052, ic = 12, pf = 12), 24)#
# [1] 2513.73#
#
# 2nd lump sum at full retirement#
ls_ttl2026 * 0.2#
#
# Pen at full retirement#
rib_pen2024_80USS + rib_pen2026e * 0.2 + state_pen#
# 49138.19#
# Take home pay £41,826.35 a year, £3,485.53 a month#
#
# _________________#
# 60% Retirement#
# Residual Santander mortgage after 5yy (bal60) - 60% retire#
(resmort2024_60pc <- bal60 - ls_ttl2024 * 0.6)#
#
# Based on Gross (pre-tax) Income of £39,240 x 60% plus £75K x 40%#
crossprod(c(rib_pen2024e, 75000), c(0.6, 0.4)) |> as.numeric()#
# [1] 53544#
# Estimated Take Home Pay (THP) from https://www.tax.service.gov.uk/estimate-paye-take-home-pay#
# £40,108.52 a year £3,342.37 a month#
#
# Repayment remortgage, 10y @ 5.2% - 60% retire#
# amort.table(Loan = resmort2024_60pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12)#
amort.period(Loan = resmort2024_60pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12, t = 24)#
# Interest paid in first 2 years#
amort.table(Loan = resmort2024_60pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12)$Schedule[1:24, 3] |> sum()#
#
# 2nd lump sum at full retirement#
ls_ttl2026 * 0.4#
#
# Residual Santander mortgage after 5yy (bal60) - 60% retire, using 100% of inv builder#
(resmort2024_60_100pc <- bal60 - (117640 * 0.6 + ib2024e))#
#
# Repayment remortgage, 10y @ 5.2% - 60% retire, using 100% of inv builder#
# amort.table(Loan = resmort2024_60_100pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12)#
amort.period(Loan = resmort2024_60_100pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12, t = 24)#
# Interest paid in first 2 years#
amort.table(Loan = resmort2024_60_100pc, n = 10 * 12, i = 0.052, ic = 12, pf = 12)$Schedule[1:24, 3] |> sum()#
#
# 2nd lump sum at full retirement#
rib_ls2026e * 0.4#
# Pen at full retirement#
crossprod(c(rib_pen2024e, rib_pen2026e, state_pen), c(0.6, 0.4, 1.0)) |> as.numeric()#
# 49229.27#
# Take home pay £42,393.62 a year, £3,532.80 a month#
#
# _________________#
# X% Retirement#
#
tibble(#
	pc_retire = seq(1, 0, by = -0.2),#
	resmort2024 = bal60 - ls_ttl2024 * pc_retire,#
	UoB_sal = 75000 * (1 - pc_retire),#
	pens = rib_pen2024e * pc_retire,#
	ann_inc = UoB_sal + pens#
)
# Mortgage Calculations 2023#
#
library(BitsnBobs)#
library(tibble)#
library(FinancialMath)#
help(package = "FinancialMath")
amort.period(3000, pmt = 90, i = 0.024, ic = 12, pf = 12)
amort.table(3000, pmt = 90, i = 0.024, ic = 12, pf = 12)$Other
amort.table(3000, pmt = 90, i = nom_rate(0.024, 12), ic = 12, pf = 12)$Other
amort.table(3000, pmt = 90, i = nom_rate(0.024, 12)/12, ic = 12, pf = 12)$Other
amort.table(3000, pmt = 90, i = nom_rate(0.024, 12)/12, ic = 12, pf = 12)
amort.table(3000, pmt = 90, i = nom_rate(0.024, 365), ic = 365, pf = 12)
amort.table(3000, pmt = 90, i = nom_rate(0.24, 365), ic = 365, pf = 12)
amort.table(3000, pmt = 90, i = 0.24, ic = 365, pf = 12)
amort.table(3000, pmt = 90, i = nom_rate(0.24, 365), ic = 365, pf = 12)
amort.period(3000, pmt = 90, i = nom_rate(0.24, 365), ic = 365, pf = 12)
amort.table(3000, pmt = 124, i = nom_rate(0.24, 365), ic = 365, pf = 12)
nom_rate(0.24, 365)
# _____________________________________#
## MBNA Example2#
# From letter with statement#
# Owing £3,000 with Standard Effective Interest Rate of 24.00%p.a. variable#
# Daily interest rate#
nom_rate(0.24, 365)#
# [1] 0.2151748#
# Monthly payment fixed at £90#
amort.table(3000, pmt = 90, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
# Monthly payment fixed at £124#
amort.table(3000, pmt = 124, i = nom_rate(0.24, 365), ic = 365, pf = 12)
# Balance Transfer Calculations 2023#
#
library(BitsnBobs)#
library(tibble)#
library(FinancialMath)#
help(package = "FinancialMath")#
#
# _____________________________________#
## MBNA Example#
# /Users/frzmce/Library/CloudStorage/OneDrive-UniversityofBristol/Documents/MCE Admin/MCE Admin Safe/MBNA/Balance and Money Transfers/MBNA Money Transfer Example—Screenshot 2023-10-28 at 10.21.19.png#
#
# MBNA Money transfer, £2,000.00, 3.9% p.a. over 36 months with a 0% fee#
# NB 3.9% is an annual rate => ic, the interest conversion frequency should be the default value of 1.#
amort.table(Loan = 2000, pmt = 60, i = 0.039, pf = 12)#
#
# From statement: "We work out interest daily using your Simple Annual Rates, based on a 365-day year. We charge interest on the total amount you owe, including on interest we charged before, also known as compound interest."#
# In their statements, MBNA quote an approximate annual interest value corresponding to a simple annual rate rounded to#
# 4 significant figures, in this instance a trivial difference: —#
#
nom_rate(0.039, 365)#
nom_rate(0.039, 365) |> signif(4)#
amort.table(Loan = 2000, pmt = 60, i = 0.03826, ic = 365, pf = 12)#
# _____________________________________#
## MBNA Example2#
# From letter with statement#
# Owing £3,000 with Standard Effective Interest Rate of 24.00%p.a. variable#
# Daily interest rate#
nom_rate(0.24, 365)#
# [1] 0.2151748#
# Monthly payment fixed at £90; time to clear balance 4y & 4m; total interest £1637#
amort.table(3000, pmt = 90, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
# Monthly payment fixed at £124; time to clear balance 2y & 9m; total interest £981#
amort.table(3000, pmt = 124, i = nom_rate(0.24, 365), ic = 365, pf = 12)
amort.table(3000, pmt = 124, i = nom_rate(0.24, 365), ic = 365, pf = 12) |> get_amortint(33)
amort.table(3000, pmt = 90, i = nom_rate(0.24, 365), ic = 365, pf = 12) |> get_amortint(52)
# Balance Transfer Calculations 2023#
#
library(BitsnBobs)#
library(tibble)#
library(FinancialMath)#
help(package = "FinancialMath")#
#
# _____________________________________#
## MBNA Example#
# /Users/frzmce/Library/CloudStorage/OneDrive-UniversityofBristol/Documents/MCE Admin/MCE Admin Safe/MBNA/Balance and Money Transfers/MBNA Money Transfer Example—Screenshot 2023-10-28 at 10.21.19.png#
#
# MBNA Money transfer, £2,000.00, 3.9% p.a. over 36 months with a 0% fee#
# NB 3.9% is an annual rate => ic, the interest conversion frequency should be the default value of 1.#
amort.table(Loan = 2000, pmt = 60, i = 0.039, pf = 12)#
#
# From statement: "We work out interest daily using your Simple Annual Rates, based on a 365-day year. We charge interest on the total amount you owe, including on interest we charged before, also known as compound interest."#
# In their statements, MBNA quote an approximate annual interest value corresponding to a simple annual rate rounded to#
# 4 significant figures, in this instance a trivial difference: —#
#
nom_rate(0.039, 365)#
nom_rate(0.039, 365) |> signif(4)#
amort.table(Loan = 2000, pmt = 60, i = 0.03826, ic = 365, pf = 12)#
# _____________________________________#
## MBNA Example2#
# From letter with statement#
# Owing £3,000 with Standard Effective Interest Rate of 24.00%p.a. variable#
# Daily interest rate#
nom_rate(0.24, 365)#
# [1] 0.2151748#
# Monthly payment fixed at £90; time to clear balance 4y & 4m; total interest £1637#
amort.table(3000, pmt = 90, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
# Monthly payment fixed at £124; time to clear balance 2y & 9m; total interest £981#
amort.table(3000, pmt = 124, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
#
# _____________________________________#
# MBNA Money transfer, £4,000.00, 03/10/2023, exp 02/10/2025, 5.9% p.a. over 24 months with a 0% fee#
# First statement: #
# 26/10/2023 99747123	 INTEREST					  15.12	#
# 23/10/2023	 99705843	 DIRECT DEBIT PAYMENT -  	 -25.00	NB, this goes towards the previous balance transfer!#
# 03/10/2023	 10000167	 PAYMENT  TO  REQUESTED  	4000.00	#
#
# Simple Annual Rate (%) 5.7480#
#
# How they worked out the interest for this period#
as.Date("2023-10-26") - as.Date("2023-10-03")#
# Time difference of 23 days#
#
# Using 23 days at Simple Annual Rate (%) 5.7480#
4000 * 0.057480 * 23/365 # Not what they calculated…#
#
# Looks like they used 24 days!#
4000 * 0.057480 * 24/365#
#
# _____________________________________#
# Effective Rate#
# Formula from amort.table()#
# eff.i = (1 + i/ic)^ic - 1#
# In this instance, the difference from their quoted 5.9% p.a. is not quite so trivial#
(eff_i <- eff_rate(0.057480, 365))#
#
# _____________________________________#
# Interest only payments#
# From amort.table()#
# j = (1 + Eff Rate)^(1/pf) - 1). j appears to be the interest per payment period#
#
# (iop <- (1 + eff_i)^(1/12) - 1)#
# iop * 4000#
(iop <- j(eff_i, 12, 4000))#
#
# Total interest over 12 and 24 months#
round(iop * c(12, 24), 2)#
#
# Check this by using amort.period() with a billion year term, no visible change after 100 years!!#
amort.period(Loan = 4000,  n = 1e9 * 12, i = 0.057480, ic = 365, pf = 12, t = 1)#
amort.period(Loan = 4000,  n = 1e9 * 12, i = 0.057480, ic = 365, pf = 12, t = 100)#
#
# Illustration of the same using monthly rather than daily interest conversion frequency#
amort.period(Loan = 4000,  n = 1e9 * 12, i = nom_rate(eff_i, 12), ic = 12, pf = 12, t = 100)#
#
# Or by using amort.table(); adding an extra minute smidge (1e-10) to payments otherwise amort.table() thows error "Too small of pmt."#
mbna <- amort.table(Loan = 4000, pmt = iop + 1e-10, i = 0.057480, ic = 365, pf = 12)#
mbna$Other#
mbna$Schedule[1:24,]#
#
# Total Interest over 12 months#
mbna$Schedule[1:12, 3] |> sum()#
#
# Total Interest over 24 months#
mbna$Schedule[1:24, 3] |> sum()#
#
# Illustration of the same using monthly rather than daily interest conversion frequency (needs slightly bigger smidge)#
mbna2 <- amort.table(Loan = 4000, pmt = iop + 1e-6, i = nom_rate(eff_i, 12), ic = 12, pf = 12)#
#
mbna2$Other#
#
mbna2$Schedule[1:24,]#
#
rm(mbna, mbna2)#
#
# _____________________________________#
# Pay it off over 2 years#
amort.table(Loan = 4000, n = 24, i = 0.057480, ic = 365, pf = 12)#
#
# Interest over first 12 months of so doing#
amort.table(Loan = 4000, n = 24, i = 0.057480, ic = 365, pf = 12)$Schedule[1:12, 3] |> sum()
amort.table(Loan = 4000, n = 24, i = 0.057480, ic = 365, pf = 12) |> get_amortint(12)
# _____________________________________#
# Pay half off over 12 months#
# (Payment amount found empirically)#
amort.period(Loan = 4000, pmt = 181.5, i = 0.057480, ic = 365, pf = 12, t = 12)#
mbna3 <- amort.table(Loan = 4000, pmt = 181.5, i = 0.057480, ic = 365, pf = 12)#
mbna3$Other#
mbna3$Schedule[1:24,]#
get_amortint(mbna3, 12)
mbna3
# _____________________________________#
# Pay half off over 12 months#
# (Payment amount found empirically)#
amort.period(Loan = 4000, pmt = 181.5, i = 0.057480, ic = 365, pf = 12, t = 12)#
amort.table(Loan = 4000, pmt = 181.5, i = 0.057480, ic = 365, pf = 12)#
amort.table(Loan = 4000, pmt = 181.5, i = 0.057480, ic = 365, pf = 12) |> get_amortint(12)
# Balance Transfer Calculations 2023#
#
library(BitsnBobs)#
library(tibble)#
library(FinancialMath)#
help(package = "FinancialMath")#
#
# _____________________________________#
## MBNA Example#
# /Users/frzmce/Library/CloudStorage/OneDrive-UniversityofBristol/Documents/MCE Admin/MCE Admin Safe/MBNA/Balance and Money Transfers/MBNA Money Transfer Example—Screenshot 2023-10-28 at 10.21.19.png#
#
# MBNA Money transfer, £2,000.00, 3.9% p.a. over 36 months with a 0% fee#
# NB 3.9% is an annual rate => ic, the interest conversion frequency should be the default value of 1.#
amort.table(Loan = 2000, pmt = 60, i = 0.039, pf = 12)#
#
# From statement: "We work out interest daily using your Simple Annual Rates, based on a 365-day year. We charge interest on the total amount you owe, including on interest we charged before, also known as compound interest."#
# In their statements, MBNA quote an approximate annual interest value corresponding to a simple annual rate rounded to#
# 4 significant figures, in this instance a trivial difference: —#
#
nom_rate(0.039, 365)#
nom_rate(0.039, 365) |> signif(4)#
amort.table(Loan = 2000, pmt = 60, i = 0.03826, ic = 365, pf = 12)#
# _____________________________________#
## MBNA Example2#
# From letter with statement#
# Owing £3,000 with Standard Effective Interest Rate of 24.00%p.a. variable#
# Daily interest rate#
nom_rate(0.24, 365)#
# [1] 0.2151748#
# Monthly payment fixed at £90; time to clear balance 4y & 4m; total interest £1637#
amort.table(3000, pmt = 90, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
# Monthly payment fixed at £124; time to clear balance 2y & 9m; total interest £981#
amort.table(3000, pmt = 124, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
#
# _____________________________________#
# MBNA Money transfer, £4,000.00, 03/10/2023, exp 02/10/2025, 5.9% p.a. over 24 months with a 0% fee#
# First statement: #
# 26/10/2023 99747123	 INTEREST					  15.12	#
# 23/10/2023	 99705843	 DIRECT DEBIT PAYMENT -  	 -25.00	NB, this goes towards the previous balance transfer!#
# 03/10/2023	 10000167	 PAYMENT  TO  REQUESTED  	4000.00	#
#
# Simple Annual Rate (%) 5.7480#
#
# How they worked out the interest for this period#
as.Date("2023-10-26") - as.Date("2023-10-03")#
# Time difference of 23 days#
#
# Using 23 days at Simple Annual Rate (%) 5.7480#
4000 * 0.057480 * 23/365 # Not what they calculated…#
#
# Looks like they used 24 days!#
4000 * 0.057480 * 24/365#
#
# _____________________________________#
# Effective Rate#
# Formula from amort.table()#
# eff.i = (1 + i/ic)^ic - 1#
# In this instance, the difference from their quoted 5.9% p.a. is not quite so trivial#
(eff_i <- eff_rate(0.057480, 365))#
#
# _____________________________________#
# Interest only payments#
# From amort.table()#
# j = (1 + Eff Rate)^(1/pf) - 1). j appears to be the interest per payment period#
#
# (iop <- (1 + eff_i)^(1/12) - 1)#
# iop * 4000#
(iop <- j(eff_i, 12, 4000))#
#
# Total interest over 12 and 24 months#
round(iop * c(12, 24), 2)#
#
# Check this by using amort.period() with a billion year term, no visible change after 100 years!!#
amort.period(Loan = 4000,  n = 1e9 * 12, i = 0.057480, ic = 365, pf = 12, t = 1)#
amort.period(Loan = 4000,  n = 1e9 * 12, i = 0.057480, ic = 365, pf = 12, t = 100)#
#
# Illustration of the same using monthly rather than daily interest conversion frequency#
amort.period(Loan = 4000,  n = 1e9 * 12, i = nom_rate(eff_i, 12), ic = 12, pf = 12, t = 100)#
#
# Or by using amort.table(); adding an extra minute smidge (1e-10) to payments otherwise amort.table() thows error "Too small of pmt."#
mbna <- amort.table(Loan = 4000, pmt = iop + 1e-10, i = 0.057480, ic = 365, pf = 12)#
mbna$Other#
mbna$Schedule[1:24,]#
#
# Total Interest over 12 months#
mbna$Schedule[1:12, 3] |> sum()#
#
# Total Interest over 24 months#
mbna$Schedule[1:24, 3] |> sum()#
#
# Illustration of the same using monthly rather than daily interest conversion frequency (needs slightly bigger smidge)#
mbna2 <- amort.table(Loan = 4000, pmt = iop + 1e-6, i = nom_rate(eff_i, 12), ic = 12, pf = 12)#
#
mbna2$Other#
#
mbna2$Schedule[1:24,]#
#
rm(mbna, mbna2)#
#
# _____________________________________#
# Pay it off over 2 years#
amort.table(Loan = 4000, n = 24, i = 0.057480, ic = 365, pf = 12)#
#
# Interest over first 12 months of so doing#
amort.table(Loan = 4000, n = 24, i = 0.057480, ic = 365, pf = 12) |> get_amortint(12)#
#
# _____________________________________#
# Pay half off over 12 months#
# (Payment amount found empirically)#
amort.period(Loan = 4000, pmt = 181.5, i = 0.057480, ic = 365, pf = 12, t = 12)#
amort.table(Loan = 4000, pmt = 181.5, i = 0.057480, ic = 365, pf = 12)#
amort.table(Loan = 4000, pmt = 181.5, i = 0.057480, ic = 365, pf = 12) |> get_amortint(12)
get_amortint(mbna, 12)
mbna <- amort.table(Loan = 4000, pmt = iop + 1e-10, i = 0.057480, ic = 365, pf = 12)#
mbna$Other#
mbna$Schedule[1:24,]#
#
# Total Interest over 12 months#
mbna$Schedule[1:12, 3] |> sum()#
get_amortint(mbna, 12)
# Total Interest over 24 months#
mbna$Schedule[1:24, 3] |> sum()#
get_amortint(mbna, 24)
# Balance Transfer Calculations 2023#
#
library(BitsnBobs)#
library(tibble)#
library(FinancialMath)#
help(package = "FinancialMath")#
#
# _____________________________________#
## MBNA Example#
# /Users/frzmce/Library/CloudStorage/OneDrive-UniversityofBristol/Documents/MCE Admin/MCE Admin Safe/MBNA/Balance and Money Transfers/MBNA Money Transfer Example—Screenshot 2023-10-28 at 10.21.19.png#
#
# MBNA Money transfer, £2,000.00, 3.9% p.a. over 36 months with a 0% fee#
# NB 3.9% is an annual rate => ic, the interest conversion frequency should be the default value of 1.#
amort.table(Loan = 2000, pmt = 60, i = 0.039, pf = 12)#
#
# From statement: "We work out interest daily using your Simple Annual Rates, based on a 365-day year. We charge interest on the total amount you owe, including on interest we charged before, also known as compound interest."#
# In their statements, MBNA quote an approximate annual interest value corresponding to a simple annual rate rounded to#
# 4 significant figures, in this instance a trivial difference: —#
#
nom_rate(0.039, 365)#
nom_rate(0.039, 365) |> signif(4)#
amort.table(Loan = 2000, pmt = 60, i = 0.03826, ic = 365, pf = 12)#
# _____________________________________#
## MBNA Example2#
# From letter with statement#
# Owing £3,000 with Standard Effective Interest Rate of 24.00% p.a. variable#
# Daily interest rate#
nom_rate(0.24, 365)#
# [1] 0.2151748#
# Monthly payment fixed at £90; time to clear balance 4y & 4m; total interest £1637#
amort.table(3000, pmt = 90, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
# Monthly payment fixed at £124; time to clear balance 2y & 9m; total interest £981#
amort.table(3000, pmt = 124, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
#
# _____________________________________#
# MBNA Money transfer, £4,000.00, 03/10/2023, exp 02/10/2025, 5.9% p.a. over 24 months with a 0% fee#
# First statement: #
# 26/10/2023 99747123	 INTEREST					  15.12	#
# 23/10/2023	 99705843	 DIRECT DEBIT PAYMENT -  	 -25.00	NB, this goes towards the previous balance transfer!#
# 03/10/2023	 10000167	 PAYMENT  TO  REQUESTED  	4000.00	#
#
# Simple Annual Rate (%) 5.7480#
#
# How they worked out the interest for this period#
as.Date("2023-10-26") - as.Date("2023-10-03")#
# Time difference of 23 days#
#
# Using 23 days at Simple Annual Rate (%) 5.7480#
4000 * 0.057480 * 23/365 # Not what they calculated…#
#
# Looks like they used 24 days!#
4000 * 0.057480 * 24/365#
#
# _____________________________________#
# Effective Rate#
# Formula from amort.table()#
# eff.i = (1 + i/ic)^ic - 1#
# In this instance, the difference from their quoted 5.9% p.a. is not quite so trivial#
(eff_i <- eff_rate(0.057480, 365))#
#
# _____________________________________#
# Interest only payments#
# From amort.table()#
# j = (1 + Eff Rate)^(1/pf) - 1). j appears to be the interest per payment period#
#
# (iop <- (1 + eff_i)^(1/12) - 1)#
# iop * 4000#
(iop <- j(eff_i, 12, 4000))#
#
# Total interest over 12 and 24 months#
round(iop * c(12, 24), 2)#
#
# Check this by using amort.period() with a billion year term, no visible change after 100 years!!#
amort.period(Loan = 4000,  n = 1e9 * 12, i = 0.057480, ic = 365, pf = 12, t = 1)#
amort.period(Loan = 4000,  n = 1e9 * 12, i = 0.057480, ic = 365, pf = 12, t = 100)#
#
# Illustration of the same using monthly rather than daily interest conversion frequency#
amort.period(Loan = 4000,  n = 1e9 * 12, i = nom_rate(eff_i, 12), ic = 12, pf = 12, t = 100)#
#
# Or by using amort.table(); adding an extra minute smidge (1e-10) to payments otherwise amort.table() thows error "Too small of pmt."#
mbna <- amort.table(Loan = 4000, pmt = iop + 1e-10, i = 0.057480, ic = 365, pf = 12)#
mbna$Other#
mbna$Schedule[1:24,]#
#
# Total Interest over 12 months#
# mbna$Schedule[1:12, 3] |> sum()#
get_amortint(mbna, 12)#
#
# Total Interest over 24 months#
# mbna$Schedule[1:24, 3] |> sum()#
get_amortint(mbna, 24)#
#
# Illustration of the same using monthly rather than daily interest conversion frequency (needs slightly bigger smidge)#
mbna2 <- amort.table(Loan = 4000, pmt = iop + 1e-6, i = nom_rate(eff_i, 12), ic = 12, pf = 12)#
mbna2$Other#
mbna2$Schedule[1:24,]#
#
rm(mbna, mbna2)#
#
# _____________________________________#
# Pay it off over 2 years#
amort.table(Loan = 4000, n = 24, i = 0.057480, ic = 365, pf = 12)#
#
# Interest over first 12 months of so doing#
amort.table(Loan = 4000, n = 24, i = 0.057480, ic = 365, pf = 12) |> get_amortint(12)#
#
# _____________________________________#
# Pay half off over 12 months#
# (Payment amount found empirically)#
amort.period(Loan = 4000, pmt = 181.5, i = 0.057480, ic = 365, pf = 12, t = 12)#
amort.table(Loan = 4000, pmt = 181.5, i = 0.057480, ic = 365, pf = 12)#
amort.table(Loan = 4000, pmt = 181.5, i = 0.057480, ic = 365, pf = 12) |> get_amortint(12)
# Balance Transfer Calculations 2023#
#
library(BitsnBobs)#
library(tibble)#
library(FinancialMath)#
help(package = "FinancialMath")
searchpaths()
# Balance Transfer Calculations 2023#
#
library(BitsnBobs)#
library(tibble)#
library(FinancialMath)#
help(package = "FinancialMath")
# Balance Transfer Calculations 2023#
#
library(BitsnBobs)#
library(tibble)#
library(FinancialMath)#
help(package = "FinancialMath")#
#
# _____________________________________#
## MBNA Example#
# /Users/frzmce/Library/CloudStorage/OneDrive-UniversityofBristol/Documents/MCE Admin/MCE Admin Safe/MBNA/Balance and Money Transfers/MBNA Money Transfer Example—Screenshot 2023-10-28 at 10.21.19.png#
#
# MBNA Money transfer, £2,000.00, 3.9% p.a. over 36 months with a 0% fee#
# NB 3.9% is an annual rate => ic, the interest conversion frequency should be the default value of 1.#
amort.table(Loan = 2000, pmt = 60, i = 0.039, pf = 12)#
#
# From statement: "We work out interest daily using your Simple Annual Rates, based on a 365-day year. We charge interest on the total amount you owe, including on interest we charged before, also known as compound interest."#
# In their statements, MBNA quote an approximate annual interest value corresponding to a simple annual rate rounded to#
# 4 significant figures, in this instance a trivial difference: —#
#
nom_rate(0.039, 365)#
nom_rate(0.039, 365) |> signif(4)#
amort.table(Loan = 2000, pmt = 60, i = 0.03826, ic = 365, pf = 12)#
# _____________________________________#
## MBNA Example2#
# From letter with statement#
# Owing £3,000 with Standard Effective Interest Rate of 24.00% p.a. variable#
# Daily interest rate#
nom_rate(0.24, 365)#
# [1] 0.2151748#
# Monthly payment fixed at £90; time to clear balance 4y & 4m; total interest £1637#
amort.table(3000, pmt = 90, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
# Monthly payment fixed at £124; time to clear balance 2y & 9m; total interest £981#
amort.table(3000, pmt = 124, i = nom_rate(0.24, 365), ic = 365, pf = 12)
amort.table(12000, pmt = 52.53, i = nom_rate(0.49, 365), ic = 365, pf = 12)
amort.table(12000, pmt = 52.53, i = nom_rate(0.049, 365), ic = 365, pf = 12)
amort.table(1200, pmt = 52.53, i = nom_rate(0.049, 365), ic = 365, pf = 12)
amort.table(1200, n = 24, i = nom_rate(0.049, 365), ic = 365, pf = 12)
amort.table(1200, n = 24, i = 0.049, pf = 12)
# Balance Transfer Calculations 2023#
#
library(BitsnBobs)#
library(tibble)#
library(FinancialMath)#
help(package = "FinancialMath")#
#
# _____________________________________#
## MBNA Example#
# /Users/frzmce/Library/CloudStorage/OneDrive-UniversityofBristol/Documents/MCE Admin/MCE Admin Safe/MBNA/Balance and Money Transfers/MBNA Money Transfer Example—Screenshot 2023-10-28 at 10.21.19.png#
#
# MBNA Money transfer, £2,000.00, 3.9% p.a. over 36 months with a 0% fee#
# NB 3.9% is an annual rate => ic, the interest conversion frequency should be the default value of 1.#
amort.table(Loan = 2000, pmt = 60, i = 0.039, pf = 12)#
#
# From statement: "We work out interest daily using your Simple Annual Rates, based on a 365-day year. We charge interest on the total amount you owe, including on interest we charged before, also known as compound interest."#
# In their statements, MBNA quote an approximate annual interest value corresponding to a simple annual rate rounded to#
# 4 significant figures, in this instance a trivial difference: —#
#
nom_rate(0.039, 365)#
nom_rate(0.039, 365) |> signif(4)#
amort.table(Loan = 2000, pmt = 60, i = 0.03826, ic = 365, pf = 12)#
# _____________________________________#
## MBNA Example2#
# From letter with statement#
# Owing £3,000 with Standard Effective Interest Rate of 24.00% p.a. variable#
# Daily interest rate#
nom_rate(0.24, 365)#
# [1] 0.2151748#
# Monthly payment fixed at £90; time to clear balance 4y & 4m; total interest £1637#
amort.table(3000, pmt = 90, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
# Monthly payment fixed at £124; time to clear balance 2y & 9m; total interest £981#
amort.table(3000, pmt = 124, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
#
# _____________________________________#
## Apple Example#
# https://www.apple.com/uk/shop/browse/financing#
# Representative Example#
# Loan amount: £1,200#
# Deposit: £0#
# Annual rate of interest: 4.9% p.a. (fixed)#
# Representative APR: 4.9% APR#
# 24-month loan with 24 monthly payments of £52.53#
# Total amount payable: £1,260.72#
#
amort.table(1200, n = 24, i = 0.049, pf = 12)#
or#
amort.table(1200, n = 24, i = nom_rate(0.049, 365), ic = 365, pf = 12)
nom_rate(0.049, 365)
round(nom_rate(0.049, 365), 4)
round(nom_rate(0.049, 365), 5)
# or#
amort.table(1200, n = 24, i = round(nom_rate(0.049, 365), 5), ic = 365, pf = 12)
52.53 * 24
amort.table(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("Total Paid")
amort.table(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("Total Paid")
amort.table(1200, pmt = 52.53, n = 24, i = 0.049, pf = 12) |> get_amortval("Total Paid")
amort.table(1200, pmt = 52.53, n = 24, i = 0.049, pf = 12)
amort.table(1200, n = 24, i = 0.049, pf = 12)
amort.period(1200, n = 24, i = 0.049, pf = 12)
amort.period(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("PMT")
(amort.period(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("PMT")) * 24
amort.table(1200, n = 24, i = 0.049, pf = 12)
amort.table(1200, n = 24, i = 0.049, pf = 12)$Schedule[, 2]
(amort.period(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("PMT")) * 24
amort.period(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("PMT")#
#
(amort.period(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("PMT")) * 24
amort.period(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("PMT")#
#
(amort.period(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("PMT")) * 24
amort.table(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("Total Paid")
amort.table(1200, pmt = 52.53, i = 0.049, pf = 12)
(amort.period(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("PMT")) * 24
# amort.period gets this right if you use pmt = 52.53#
amort.period(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("PMT")#
#
(amort.period(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("PMT")) * 24#
#
# but not if yoou use n = 24#
amort.period(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("PMT")#
#
(amort.period(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("PMT")) * 24
# Balance Transfer Calculations 2023#
#
library(BitsnBobs)#
library(tibble)#
library(FinancialMath)#
help(package = "FinancialMath")#
#
# _____________________________________#
## MBNA Example#
# /Users/frzmce/Library/CloudStorage/OneDrive-UniversityofBristol/Documents/MCE Admin/MCE Admin Safe/MBNA/Balance and Money Transfers/MBNA Money Transfer Example—Screenshot 2023-10-28 at 10.21.19.png#
#
# MBNA Money transfer, £2,000.00, 3.9% p.a. over 36 months with a 0% fee#
# NB 3.9% is an annual rate => ic, the interest conversion frequency should be the default value of 1.#
amort.table(Loan = 2000, pmt = 60, i = 0.039, pf = 12)#
#
# From statement: "We work out interest daily using your Simple Annual Rates, based on a 365-day year. We charge interest on the total amount you owe, including on interest we charged before, also known as compound interest."#
# In their statements, MBNA quote an approximate annual interest value corresponding to a simple annual rate rounded to#
# 4 significant figures, in this instance a trivial difference: —#
#
nom_rate(0.039, 365)#
nom_rate(0.039, 365) |> signif(4)#
amort.table(Loan = 2000, pmt = 60, i = 0.03826, ic = 365, pf = 12)#
# _____________________________________#
## MBNA Example2#
# From letter with statement#
# Owing £3,000 with Standard Effective Interest Rate of 24.00% p.a. variable#
# Daily interest rate#
nom_rate(0.24, 365)#
# [1] 0.2151748#
# Monthly payment fixed at £90; time to clear balance 4y & 4m; total interest £1637#
amort.table(3000, pmt = 90, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
# Monthly payment fixed at £124; time to clear balance 2y & 9m; total interest £981#
amort.table(3000, pmt = 124, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
#
# _____________________________________#
## Apple Example#
# https://www.apple.com/uk/shop/browse/financing#
# Representative Example#
# Loan amount: £1,200#
# Deposit: £0#
# Annual rate of interest: 4.9% p.a. (fixed)#
# Representative APR: 4.9% APR#
# 24-month loan with 24 monthly payments of £52.53#
# Total amount payable: £1,260.72#
#
amort.table(1200, n = 24, i = 0.049, pf = 12)#
# or#
amort.table(1200, n = 24, i = nom_rate(0.049, 365), ic = 365, pf = 12)#
#
# Total amount payable, as they stated: —#
 52.53 * 24#
# [1] 1260.72#
#
# amort.period gets this right using pmt = 52.53#
amort.period(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("PMT")#
#
(amort.period(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("PMT")) * 24#
#
# but not using n = 24#
amort.period(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("PMT")#
#
(amort.period(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("PMT")) * 24#
#
# Whereas, amort.table() the (slightly) incorrect answer whichever way you do it, hmm…: —#
#
amort.table(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("Total Paid")#
#
amort.table(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("Total Paid")#
# [1] 1260.83
17.87 * 24
# Balance Transfer Calculations 2023#
#
library(BitsnBobs)#
library(tibble)#
library(FinancialMath)#
help(package = "FinancialMath")#
#
# _____________________________________#
## MBNA Example#
# /Users/frzmce/Library/CloudStorage/OneDrive-UniversityofBristol/Documents/MCE Admin/MCE Admin Safe/MBNA/Balance and Money Transfers/MBNA Money Transfer Example—Screenshot 2023-10-28 at 10.21.19.png#
#
# MBNA Money transfer, £2,000.00, 3.9% p.a. over 36 months with a 0% fee#
# NB 3.9% is an (effective) annual rate => ic, the interest conversion frequency should be the default value of 1.#
amort.table(Loan = 2000, pmt = 60, i = 0.039, pf = 12)#
#
# From statement: "We work out interest daily using your Simple Annual Rates, based on a 365-day year. We charge interest on the total amount you owe, including on interest we charged before, also known as compound interest."#
# In their statements, MBNA quote an approximate annual interest value corresponding to a simple annual rate rounded to#
# 4 significant figures, in this instance a trivial difference: —#
#
nom_rate(0.039, 365)#
nom_rate(0.039, 365) |> signif(4)#
amort.table(Loan = 2000, pmt = 60, i = 0.03826, ic = 365, pf = 12)#
# _____________________________________#
## MBNA Example2#
# From letter with statement#
# Owing £3,000 with Standard Effective Interest Rate of 24.00% p.a. variable#
# Daily interest rate#
nom_rate(0.24, 365)#
# [1] 0.2151748#
# Monthly payment fixed at £90; time to clear balance 4y & 4m; total interest £1637#
amort.table(3000, pmt = 90, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
# Monthly payment fixed at £124; time to clear balance 2y & 9m; total interest £981#
amort.table(3000, pmt = 124, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
#
# _____________________________________#
## Apple Example#
# https://www.apple.com/uk/shop/browse/financing#
# Representative Example#
# Loan amount: £1,200#
# Deposit: £0#
# Annual rate of interest: 4.9% p.a. (fixed)#
# Representative APR: 4.9% APR#
# 24-month loan with 24 monthly payments of £52.53#
# Total amount payable: £1,260.72#
#
amort.table(1200, n = 24, i = 0.049, pf = 12)#
# or#
amort.table(1200, n = 24, i = nom_rate(0.049, 365), ic = 365, pf = 12)#
#
# Total amount payable, as Apple stated: —#
 52.53 * 24#
# [1] 1260.72#
#
# amort.period gets this right using pmt = 52.53#
amort.period(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("PMT")#
#
(amort.period(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("PMT")) * 24#
#
# but not using n = 24#
amort.period(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("PMT")#
#
(amort.period(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("PMT")) * 24#
#
# Whereas, amort.table() gives a (slightly) different answer whichever way you do it, hmm…: —#
#
amort.table(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("Total Paid")#
#
amort.table(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("Total Paid")#
# [1] 1260.83#
#
# _____________________________________#
# MBNA Money transfer, £4,000.00, 03/10/2023, exp 02/10/2025, 5.9% p.a. over 24 months with a 0% fee#
# First statement: #
# 26/10/2023 99747123	 INTEREST					  15.12	#
# 23/10/2023	 99705843	 DIRECT DEBIT PAYMENT -  	 -25.00	NB, this goes towards the previous balance transfer!#
# 03/10/2023	 10000167	 PAYMENT  TO  REQUESTED  	4000.00	#
#
# Simple Annual Rate (%) 5.7480#
#
# How they worked out the interest for this period#
as.Date("2023-10-26") - as.Date("2023-10-03")#
# Time difference of 23 days#
#
# Using 23 days at Simple Annual Rate (%) 5.7480#
4000 * 0.057480 * 23/365 # Not what they calculated…#
#
# Looks like they used 24 days!#
4000 * 0.057480 * 24/365#
#
# _____________________________________#
# Effective Rate#
# Formula from amort.table()#
# eff.i = (1 + i/ic)^ic - 1#
# In this instance, the difference from their quoted 5.9% p.a. is not quite so trivial#
(eff_i <- eff_rate(0.057480, 365))
# _____________________________________#
# Interest only payments#
# From amort.table()#
# j = (1 + Eff Rate)^(1/pf) - 1). j appears to be the interest per payment period#
#
# (iop <- (1 + eff_i)^(1/12) - 1)#
# iop * 4000#
(iop <- j(eff_i, 12, 4000))
# Balance Transfer Calculations 2023#
#
library(BitsnBobs)#
library(tibble)#
library(FinancialMath)#
help(package = "FinancialMath")#
#
# _____________________________________#
## MBNA Example#
# /Users/frzmce/Library/CloudStorage/OneDrive-UniversityofBristol/Documents/MCE Admin/MCE Admin Safe/MBNA/Balance and Money Transfers/MBNA Money Transfer Example—Screenshot 2023-10-28 at 10.21.19.png#
#
# MBNA Money transfer, £2,000.00, 3.9% p.a. over 36 months with a 0% fee#
# NB 3.9% is an (effective) annual rate => ic, the interest conversion frequency should be the default value of 1.#
amort.table(Loan = 2000, pmt = 60, i = 0.039, pf = 12)#
#
# From statement: "We work out interest daily using your Simple Annual Rates, based on a 365-day year. We charge interest on the total amount you owe, including on interest we charged before, also known as compound interest."#
# In their statements, MBNA quote an approximate annual interest value corresponding to a simple annual rate rounded to#
# 4 significant figures, in this instance a trivial difference: —#
#
nom_rate(0.039, 365)#
nom_rate(0.039, 365) |> signif(4)#
amort.table(Loan = 2000, pmt = 60, i = 0.03826, ic = 365, pf = 12)#
# _____________________________________#
## MBNA Example2#
# From letter with statement#
# Owing £3,000 with Standard Effective Interest Rate of 24.00% p.a. variable#
# Daily interest rate#
nom_rate(0.24, 365)#
# [1] 0.2151748#
# Monthly payment fixed at £90; time to clear balance 4y & 4m; total interest £1637#
amort.table(3000, pmt = 90, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
# Monthly payment fixed at £124; time to clear balance 2y & 9m; total interest £981#
amort.table(3000, pmt = 124, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
#
# _____________________________________#
## Apple Example#
# https://www.apple.com/uk/shop/browse/financing#
# Representative Example#
# Loan amount: £1,200#
# Deposit: £0#
# Annual rate of interest: 4.9% p.a. (fixed)#
# Representative APR: 4.9% APR#
# 24-month loan with 24 monthly payments of £52.53#
# Total amount payable: £1,260.72#
#
amort.table(1200, n = 24, i = 0.049, pf = 12)#
# or#
amort.table(1200, n = 24, i = nom_rate(0.049, 365), ic = 365, pf = 12)#
#
# Total amount payable, as Apple stated: —#
 52.53 * 24#
# [1] 1260.72#
#
# amort.period gets this right using pmt = 52.53#
amort.period(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("PMT")#
#
(amort.period(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("PMT")) * 24#
#
# but not using n = 24#
amort.period(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("PMT")#
#
(amort.period(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("PMT")) * 24#
#
# Whereas, amort.table() gives a (slightly) different answer whichever way you do it, hmm…: —#
#
amort.table(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("Total Paid")#
#
amort.table(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("Total Paid")#
# [1] 1260.83#
#
# _____________________________________#
# MBNA Money transfer, £4,000.00, 03/10/2023, exp 02/10/2025, 5.9% p.a. over 24 months with a 0% fee#
# First statement: #
# 26/10/2023 99747123	 INTEREST					  15.12	#
# 23/10/2023	 99705843	 DIRECT DEBIT PAYMENT -  	 -25.00	NB, this goes towards the previous balance transfer!#
# 03/10/2023	 10000167	 PAYMENT  TO  REQUESTED  	4000.00	#
#
# Simple Annual Rate (%) 5.7480#
#
# How they worked out the interest for this period#
as.Date("2023-10-26") - as.Date("2023-10-03")#
# Time difference of 23 days#
#
# Using 23 days at Simple Annual Rate (%) 5.7480#
4000 * 0.057480 * 23/365 # Not what they calculated…#
#
# Looks like they used 24 days!#
4000 * 0.057480 * 24/365#
#
# _____________________________________#
# Effective Rate#
# Formula from amort.table()#
# eff.i = (1 + i/ic)^ic - 1#
# In this instance, the difference from their quoted 5.9% p.a. is not quite so trivial#
(eff_i <- eff_rate(0.057480, 365))#
#
# _____________________________________#
# Interest only payments#
# From amort.table()#
# j = (1 + Eff Rate)^(1/pf) - 1). j appears to be the interest per payment period#
#
# (iop <- (1 + eff_i)^(1/12) - 1)#
# iop * 4000#
(iop <- j(eff_i, 12, 4000))
4000 * 0.05748 * 1/12
j(0.59, 12, 4000)
j(0.059, 12, 4000)
(19.15407 / 4000 + 1)^12 - 1
# Balance Transfer Calculations 2023#
#
library(BitsnBobs)#
library(tibble)#
library(FinancialMath)#
help(package = "FinancialMath")#
#
# _____________________________________#
## MBNA Example#
# /Users/frzmce/Library/CloudStorage/OneDrive-UniversityofBristol/Documents/MCE Admin/MCE Admin Safe/MBNA/Balance and Money Transfers/MBNA Money Transfer Example—Screenshot 2023-10-28 at 10.21.19.png#
#
# MBNA Money transfer, £2,000.00, 3.9% p.a. over 36 months with a 0% fee#
# NB 3.9% is an (effective) annual rate => ic, the interest conversion frequency should be the default value of 1.#
amort.table(Loan = 2000, pmt = 60, i = 0.039, pf = 12)#
#
# From statement: "We work out interest daily using your Simple Annual Rates, based on a 365-day year. We charge interest on the total amount you owe, including on interest we charged before, also known as compound interest."#
# In their statements, MBNA quote an approximate annual interest value corresponding to a simple annual rate rounded to#
# 4 significant figures, in this instance a trivial difference: —#
#
nom_rate(0.039, 365)#
nom_rate(0.039, 365) |> signif(4)#
amort.table(Loan = 2000, pmt = 60, i = 0.03826, ic = 365, pf = 12)#
# _____________________________________#
## MBNA Example2#
# From letter with statement#
# Owing £3,000 with Standard Effective Interest Rate of 24.00% p.a. variable#
# Daily interest rate#
nom_rate(0.24, 365)#
# [1] 0.2151748#
# Monthly payment fixed at £90; time to clear balance 4y & 4m; total interest £1637#
amort.table(3000, pmt = 90, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
# Monthly payment fixed at £124; time to clear balance 2y & 9m; total interest £981#
amort.table(3000, pmt = 124, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
#
# _____________________________________#
## Apple Example#
# https://www.apple.com/uk/shop/browse/financing#
# Representative Example#
# Loan amount: £1,200#
# Deposit: £0#
# Annual rate of interest: 4.9% p.a. (fixed)#
# Representative APR: 4.9% APR#
# 24-month loan with 24 monthly payments of £52.53#
# Total amount payable: £1,260.72#
#
amort.table(1200, n = 24, i = 0.049, pf = 12)#
# or#
amort.table(1200, n = 24, i = nom_rate(0.049, 365), ic = 365, pf = 12)#
#
# Total amount payable, as Apple stated: —#
 52.53 * 24#
# [1] 1260.72#
#
# amort.period gets this right using pmt = 52.53#
amort.period(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("PMT")#
#
(amort.period(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("PMT")) * 24#
#
# but not using n = 24#
amort.period(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("PMT")#
#
(amort.period(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("PMT")) * 24#
#
# Whereas, amort.table() gives a (slightly) different answer whichever way you do it, hmm…: —#
#
amort.table(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("Total Paid")#
#
amort.table(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("Total Paid")#
# [1] 1260.83#
#
# _____________________________________#
# MBNA Money transfer, £4,000.00, 03/10/2023, exp 02/10/2025, 5.9% p.a. over 24 months with a 0% fee#
# First statement: #
# 26/10/2023 99747123	 INTEREST					  15.12	#
# 23/10/2023	 99705843	 DIRECT DEBIT PAYMENT -  	 -25.00	NB, this goes towards the previous balance transfer!#
# 03/10/2023	 10000167	 PAYMENT  TO  REQUESTED  	4000.00	#
#
# Simple Annual Rate (%) 5.7480#
#
# How they worked out the interest for this period#
as.Date("2023-10-26") - as.Date("2023-10-03")#
# Time difference of 23 days#
#
# Using 23 days at Simple Annual Rate (%) 5.7480#
4000 * 0.057480 * 23/365 # Not what they calculated…#
#
# Looks like they used 24 days!#
4000 * 0.057480 * 24/365#
#
# _____________________________________#
# Effective Rate#
# Formula from amort.table()#
# eff.i = (1 + i/ic)^ic - 1#
# In this instance, the difference from their quoted 5.9% p.a. is not quite so trivial#
(eff_i <- eff_rate(0.057480, 365))#
#
# _____________________________________#
# Interest only payments#
# From amort.table()#
# j = (1 + Eff Rate)^(1/pf) - 1). j appears to be the interest per payment period#
#
# (iop <- (1 + eff_i)^(1/12) - 1)#
# iop * 4000#
(iop <- j(eff_i, 12, 4000))#
#
# Total interest over 12 and 24 months
j2rate(19.2, 12, 4000)
eff_rate(0.1, 2)
eff_rate(0.11, 2)
eff_rate(0.1, 12)
eff_rate(0.101, 2)
eff_rate(0.10, c(2, 4, 12, 365))
eff_rate(0.10, c(2, 4, 12, 365)) |> setNames(c("Semiannual", "Quarterly", "Monthly", "Daily"))
# Balance Transfer Calculations 2023#
#
library(BitsnBobs)#
library(tibble)#
library(FinancialMath)#
help(package = "FinancialMath")#
#
# _____________________________________#
## MBNA Example#
# /Users/frzmce/Library/CloudStorage/OneDrive-UniversityofBristol/Documents/MCE Admin/MCE Admin Safe/MBNA/Balance and Money Transfers/MBNA Money Transfer Example—Screenshot 2023-10-28 at 10.21.19.png#
#
# MBNA Money transfer, £2,000.00, 3.9% p.a. over 36 months with a 0% fee#
# NB 3.9% is an (effective) annual rate => ic, the interest conversion frequency should be the default value of 1.#
amort.table(Loan = 2000, pmt = 60, i = 0.039, pf = 12)#
#
# From statement: "We work out interest daily using your Simple Annual Rates, based on a 365-day year. We charge interest on the total amount you owe, including on interest we charged before, also known as compound interest."#
# In their statements, MBNA quote an approximate annual interest value corresponding to a simple annual rate rounded to#
# 4 significant figures, in this instance a trivial difference: —#
#
nom_rate(0.039, 365)#
nom_rate(0.039, 365) |> signif(4)#
amort.table(Loan = 2000, pmt = 60, i = 0.03826, ic = 365, pf = 12)#
# _____________________________________#
## MBNA Example2#
# From letter with statement#
# Owing £3,000 with Standard Effective Interest Rate of 24.00% p.a. variable#
# Daily interest rate#
nom_rate(0.24, 365)#
# [1] 0.2151748#
# Monthly payment fixed at £90; time to clear balance 4y & 4m; total interest £1637#
amort.table(3000, pmt = 90, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
# Monthly payment fixed at £124; time to clear balance 2y & 9m; total interest £981#
amort.table(3000, pmt = 124, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
#
# _____________________________________#
## Apple Example#
# https://www.apple.com/uk/shop/browse/financing#
# Representative Example#
# Loan amount: £1,200#
# Deposit: £0#
# Annual rate of interest: 4.9% p.a. (fixed)#
# Representative APR: 4.9% APR#
# 24-month loan with 24 monthly payments of £52.53#
# Total amount payable: £1,260.72#
#
amort.table(1200, n = 24, i = 0.049, pf = 12)#
# or#
amort.table(1200, n = 24, i = nom_rate(0.049, 365), ic = 365, pf = 12)#
#
# Total amount payable, as Apple stated: —#
 52.53 * 24#
# [1] 1260.72#
#
# amort.period gets this right using pmt = 52.53#
amort.period(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("PMT")#
#
(amort.period(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("PMT")) * 24#
#
# but not using n = 24#
amort.period(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("PMT")#
#
(amort.period(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("PMT")) * 24#
#
# Whereas, amort.table() gives a (slightly) different answer whichever way you do it, hmm…: —#
#
amort.table(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("Total Paid")#
#
amort.table(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("Total Paid")#
# [1] 1260.83#
#
# _____________________________________#
# MBNA Money transfer, £4,000.00, 03/10/2023, exp 02/10/2025, 5.9% p.a. over 24 months with a 0% fee#
# First statement: #
# 26/10/2023 99747123	 INTEREST					  15.12	#
# 23/10/2023	 99705843	 DIRECT DEBIT PAYMENT -  	 -25.00	NB, this goes towards the previous balance transfer!#
# 03/10/2023	 10000167	 PAYMENT  TO  REQUESTED  	4000.00	#
#
# Simple Annual Rate (%) 5.7480#
#
# How they worked out the interest for this period#
as.Date("2023-10-26") - as.Date("2023-10-03")#
# Time difference of 23 days#
#
# Using 23 days at Simple Annual Rate (%) 5.7480#
4000 * 0.057480 * 23/365 # Not what they calculated…#
#
# Looks like they used 24 days!#
4000 * 0.057480 * 24/365#
#
# _____________________________________#
# Effective Rate#
# Formula from amort.table()#
# eff.i = (1 + i/ic)^ic - 1#
# In this instance, the difference from their quoted 5.9% p.a. is not quite so trivial#
(eff_i <- eff_rate(0.057480, 365))#
#
# _____________________________________#
# Interest only payments#
# From amort.table()#
# j = (1 + Eff Rate)^(1/pf) - 1). j appears to be the interest per payment period#
#
# (iop <- (1 + eff_i)^(1/12) - 1)#
# iop * 4000#
(iop <- j(eff_i, 12, 4000))#
#
# Total interest over 12 and 24 months#
round(iop * c(12, 24), 2)#
#
# Check this by using amort.period() with a billion year term, no visible change after 100 years!!#
amort.period(Loan = 4000,  n = 1e9 * 12, i = 0.057480, ic = 365, pf = 12, t = 1)#
amort.period(Loan = 4000,  n = 1e9 * 12, i = 0.057480, ic = 365, pf = 12, t = 100)#
#
# Illustration of the same using monthly rather than daily interest conversion frequency#
amort.period(Loan = 4000,  n = 1e9 * 12, i = nom_rate(eff_i, 12), ic = 12, pf = 12, t = 100)#
#
# Or by using amort.table(); adding an extra minute smidge (1e-10) to payments otherwise amort.table() thows error "Too small of pmt."#
mbna <- amort.table(Loan = 4000, pmt = iop + 1e-10, i = 0.057480, ic = 365, pf = 12)#
mbna$Other#
mbna$Schedule[1:24,]#
#
# Total Interest over 12 months#
# mbna$Schedule[1:12, 3] |> sum()#
get_amortint(mbna, 12)#
#
# Total Interest over 24 months#
# mbna$Schedule[1:24, 3] |> sum()#
get_amortint(mbna, 24)#
#
# Illustration of the same using monthly rather than daily interest conversion frequency (needs slightly bigger smidge)#
mbna2 <- amort.table(Loan = 4000, pmt = iop + 1e-6, i = nom_rate(eff_i, 12), ic = 12, pf = 12)#
mbna2$Other#
mbna2$Schedule[1:24,]#
#
rm(mbna, mbna2)#
#
# _____________________________________#
# Pay it off over 2 years#
amort.table(Loan = 4000, n = 24, i = 0.057480, ic = 365, pf = 12)#
#
# Interest over first 12 months of so doing#
amort.table(Loan = 4000, n = 24, i = 0.057480, ic = 365, pf = 12) |> get_amortint(12)#
#
# _____________________________________#
# Pay half off over 12 months#
# (Payment amount found empirically)#
amort.period(Loan = 4000, pmt = 181.5, i = 0.057480, ic = 365, pf = 12, t = 12)#
amort.table(Loan = 4000, pmt = 181.5, i = 0.057480, ic = 365, pf = 12)#
amort.table(Loan = 4000, pmt = 181.5, i = 0.057480, ic = 365, pf = 12) |> get_amortint(12)
eff_rate(nom_rate(5.9, 12,), 12)
eff_rate(nom_rate(5.9, 12), 12)
eff_rate(nom_rate(5.9, 356), 365)
j(5.9/100, 365, 4000)
j(5.9/100, 12, 4000)
amort.period(4000, pmt = 67.97, i = 5.9/100, ic = 365, pf = 12)
amort.period(4000, pmt = 67.97, i = nom_rate(5.9/100, 365), ic = 365, pf = 12)
amort.table(4000, pmt = 67.97, i = nom_rate(5.9/100, 365), ic = 365, pf = 12)
amort.period(4000, pmt = 67.97 - 15.12, i = 5.9/100, ic = 365, pf = 12)
amort.table(4000, pmt = 67.97 - 15.12, i = 5.9/100, ic = 365, pf = 12)
amort.table(4000, pmt = 67.97 - 15.12, i = nom_rate(5.9/100, 365), ic = 365, pf = 12)
amort.period(4000, pmt = 67.97 - 15.12, i = nom_rate(5.9/100, 365), ic = 365, pf = 12)
j2rate(52.850000, 12, 4000)
j2rate(19.154069, 12, 4000)
77207 * 0.83
exp(.059)
# Balance Transfer Calculations 2023#
#
library(BitsnBobs)#
library(tibble)#
library(FinancialMath)#
help(package = "FinancialMath")#
#
# _____________________________________#
## MBNA Example#
# /Users/frzmce/Library/CloudStorage/OneDrive-UniversityofBristol/Documents/MCE Admin/MCE Admin Safe/MBNA/Balance and Money Transfers/MBNA Money Transfer Example—Screenshot 2023-10-28 at 10.21.19.png#
#
# MBNA Money transfer, £2,000.00, 3.9% p.a. over 36 months with a 0% fee#
# NB 3.9% is an (effective) annual rate => ic, the interest conversion frequency should be the default value of 1.#
amort.table(Loan = 2000, pmt = 60, i = 0.039, pf = 12)#
#
# From statement: "We work out interest daily using your Simple Annual Rates, based on a 365-day year. We charge interest on the total amount you owe, including on interest we charged before, also known as compound interest."#
# In their statements, MBNA quote an approximate annual interest value corresponding to a simple annual rate rounded to#
# 4 significant figures, in this instance a trivial difference: —#
#
nom_rate(0.039, 365)#
nom_rate(0.039, 365) |> signif(4)#
amort.table(Loan = 2000, pmt = 60, i = 0.03826, ic = 365, pf = 12)#
# _____________________________________#
## MBNA Example2#
# From letter with statement#
# Owing £3,000 with Standard Effective Interest Rate of 24.00% p.a. variable#
# Daily interest rate#
nom_rate(0.24, 365)#
# [1] 0.2151748#
# Monthly payment fixed at £90; time to clear balance 4y & 4m; total interest £1637#
amort.table(3000, pmt = 90, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
# Monthly payment fixed at £124; time to clear balance 2y & 9m; total interest £981#
amort.table(3000, pmt = 124, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
#
# _____________________________________#
## Apple Example#
# https://www.apple.com/uk/shop/browse/financing#
# Representative Example#
# Loan amount: £1,200#
# Deposit: £0#
# Annual rate of interest: 4.9% p.a. (fixed)#
# Representative APR: 4.9% APR#
# 24-month loan with 24 monthly payments of £52.53#
# Total amount payable: £1,260.72#
#
amort.table(1200, n = 24, i = 0.049, pf = 12)#
# or#
amort.table(1200, n = 24, i = nom_rate(0.049, 365), ic = 365, pf = 12)#
#
# Total amount payable, as Apple stated: —#
 52.53 * 24#
# [1] 1260.72#
#
# amort.period gets this right using pmt = 52.53#
amort.period(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("PMT")#
#
(amort.period(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("PMT")) * 24#
#
# but not using n = 24#
amort.period(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("PMT")#
#
(amort.period(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("PMT")) * 24#
#
# Whereas, amort.table() gives a (slightly) different answer whichever way you do it, hmm…: —#
#
amort.table(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("Total Paid")#
#
amort.table(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("Total Paid")#
# [1] 1260.83
# _____________________________________#
# MBNA Money transfer, £4,000.00, 03/10/2023, exp 02/10/2025, 5.9% p.a. over 24 months with a 0% fee#
# First statement: #
# 26/10/2023 99747123	 INTEREST					  15.12	#
# 23/10/2023	 99705843	 DIRECT DEBIT PAYMENT -  	 -25.00	NB, this goes towards the previous balance transfer!#
# 03/10/2023	 10000167	 PAYMENT  TO  REQUESTED  	4000.00	#
#
# Simple Annual Rate (%) 5.7480#
#
# How they worked out the interest for this period#
as.Date("2023-10-26") - as.Date("2023-10-03")#
# Time difference of 23 days#
#
# Using 23 days at Simple Annual Rate (%) 5.7480#
4000 * 0.057480 * 23/365 # Not what they calculated…#
#
# Looks like they used 24 days!#
4000 * 0.057480 * 24/365#
#
# _____________________________________#
# Effective Rate#
# In this instance, the difference from their quoted 5.9% p.a. is not quite so trivial#
(eff_i <- eff_rate(0.057480, 365))
# _____________________________________#
# Effective Rate#
# In this instance, the difference from their quoted 5.9% p.a. is not quite so trivial#
(eff_i <- eff_rate(0.057480, 365))#
#
# _____________________________________#
# Interest only payments#
# From amort.table()#
# j = (1 + Eff Rate)^(1/pf) - 1). j appears to be the interest per payment period#
#
# (iop <- (1 + eff_i)^(1/12) - 1)#
# iop * 4000#
(iop <- j(eff_i, 12, 4000))#
#
# Total interest over 12 and 24 months#
round(iop * c(12, 24), 2)#
#
# Check this by using amort.period() with a billion year term, no visible change after 100 years!!#
amort.period(Loan = 4000,  n = 1e9 * 12, i = 0.057480, ic = 365, pf = 12, t = 1)#
amort.period(Loan = 4000,  n = 1e9 * 12, i = 0.057480, ic = 365, pf = 12, t = 100)
j(eff_rate(0.057480, 365))
j(eff_rate(0.057480, 365), 12)
j(eff_i, 12)
j(eff_i, 12, 4015.12)
# Or by using amort.table(); adding an extra minute smidge (1e-10) to payments otherwise amort.table() thows error "Too small of pmt."#
mbna <- amort.table(Loan = 4000, pmt = iop + 1e-10, i = 0.057480, ic = 365, pf = 12)#
mbna$Other#
mbna$Schedule[1:24,]
# Total Interest over 12 months#
# mbna$Schedule[1:12, 3] |> sum()#
get_amortint(mbna, 12)#
#
# Total Interest over 24 months#
# mbna$Schedule[1:24, 3] |> sum()#
get_amortint(mbna, 24)
# Total Interest over 12 months#
get_amortint(mbna, c(12, 24))
# _____________________________________#
# Pay it off over 2 years - NB loan is now 4015.12 after initial period interest!#
amort.table(Loan = 4015.12, n = 24, i = 0.057480, ic = 365, pf = 12)#
#
# Interest over first 12 months of so doing#
amort.table(Loan = 4015.12, n = 24, i = 0.057480, ic = 365, pf = 12) |> get_amortint(12)
4000 * eff_i * 23/365
4000 * eff_i * 24/365
j(eff_i, 365/23, 4000)
j(eff_i, 365/24, 4000)
# Balance Transfer Calculations 2023#
#
library(BitsnBobs)#
library(tibble)#
library(FinancialMath)#
help(package = "FinancialMath")#
#
# _____________________________________#
## MBNA Example#
# /Users/frzmce/Library/CloudStorage/OneDrive-UniversityofBristol/Documents/MCE Admin/MCE Admin Safe/MBNA/Balance and Money Transfers/MBNA Money Transfer Example—Screenshot 2023-10-28 at 10.21.19.png#
#
# MBNA Money transfer, £2,000.00, 3.9% p.a. over 36 months with a 0% fee#
# NB 3.9% is an (effective) annual rate => ic, the interest conversion frequency should be the default value of 1.#
amort.table(Loan = 2000, pmt = 60, i = 0.039, pf = 12)#
#
# From statement: "We work out interest daily using your Simple Annual Rates, based on a 365-day year. We charge interest on the total amount you owe, including on interest we charged before, also known as compound interest."#
# In their statements, MBNA quote an approximate annual interest value corresponding to a simple annual rate rounded to#
# 4 significant figures, in this instance a trivial difference: —#
#
nom_rate(0.039, 365)#
nom_rate(0.039, 365) |> signif(4)#
amort.table(Loan = 2000, pmt = 60, i = 0.03826, ic = 365, pf = 12)#
# _____________________________________#
## MBNA Example2#
# From letter with statement#
# Owing £3,000 with Standard Effective Interest Rate of 24.00% p.a. variable#
# Daily interest rate#
nom_rate(0.24, 365)#
# [1] 0.2151748#
# Monthly payment fixed at £90; time to clear balance 4y & 4m; total interest £1637#
amort.table(3000, pmt = 90, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
# Monthly payment fixed at £124; time to clear balance 2y & 9m; total interest £981#
amort.table(3000, pmt = 124, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
#
# _____________________________________#
## Apple Example#
# https://www.apple.com/uk/shop/browse/financing#
# Representative Example#
# Loan amount: £1,200#
# Deposit: £0#
# Annual rate of interest: 4.9% p.a. (fixed)#
# Representative APR: 4.9% APR#
# 24-month loan with 24 monthly payments of £52.53#
# Total amount payable: £1,260.72#
#
amort.table(1200, n = 24, i = 0.049, pf = 12)#
# or the equivalent with daily interest calculation#
amort.table(1200, n = 24, i = nom_rate(0.049, 365), ic = 365, pf = 12)#
#
# Total amount payable, as Apple stated: —#
 52.53 * 24#
# [1] 1260.72#
#
# amort.period gets this right using pmt = 52.53#
amort.period(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("PMT")#
#
(amort.period(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("PMT")) * 24#
#
# but not using n = 24#
amort.period(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("PMT")#
#
(amort.period(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("PMT")) * 24#
#
# Whereas, amort.table() gives a (slightly) different answer whichever way you do it, hmm…: —#
#
amort.table(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("Total Paid")#
#
amort.table(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("Total Paid")#
# [1] 1260.83#
#
# _____________________________________#
# MBNA Money transfer, £4,000.00, 03/10/2023, exp 02/10/2025, 5.9% p.a. over 24 months with a 0% fee#
# First statement: #
# 26/10/2023 99747123	 INTEREST					  15.12	#
# 23/10/2023	 99705843	 DIRECT DEBIT PAYMENT -  	 -25.00	NB, this goes towards the previous balance transfer!#
# 03/10/2023	 10000167	 PAYMENT  TO  REQUESTED  	4000.00	#
#
# Simple Annual Rate (%) 5.7480#
#
# How they worked out the interest for this period#
as.Date("2023-10-26") - as.Date("2023-10-03")#
# Time difference of 23 days#
#
# Using 23 days at Simple Annual Rate (%) 5.7480#
4000 * 0.057480/365 * 23 # Not what they calculated…#
# [1] 14.48811#
#
# Looks like they used 24 days!#
4000 * 0.057480/365 * 24#
# [1] 15.11803#
#
# _____________________________________#
# Effective Rate#
# In this instance, the difference from their quoted 5.9% p.a. is not quite so trivial#
(eff_i <- eff_rate(0.057480, 365))#
#
# _____________________________________#
# Interest only payments—j is the interest per payment period#
(iop <- j(eff_i, 12, 4000))#
# [1] 19.20445#
#
# Total interest over 12 and 24 months#
round(iop * c(12, 24), 2)#
#
# Cross-check with amort.period() with a billion year term (no visible change after 100 years!!)#
amort.period(Loan = 4000,  n = 1e9 * 12, i = 0.057480, ic = 365, pf = 12, t = 1)#
amort.period(Loan = 4000,  n = 1e9 * 12, i = 0.057480, ic = 365, pf = 12, t = 100)#
#
# Illustration of the same using monthly rather than daily interest conversion frequency#
amort.period(Loan = 4000,  n = 1e9 * 12, i = nom_rate(eff_i, 12), ic = 12, pf = 12, t = 100)#
#
# Or by using amort.table()#
# An extra minute smidge (1e-10) added to payments otherwise amort.table() thows error "Too small of pmt."#
mbna <- amort.table(Loan = 4000, pmt = iop + 1e-10, i = 0.057480, ic = 365, pf = 12)#
mbna$Other#
mbna$Schedule[1:24,]#
#
# Total Interest over 12 months#
get_amortint(mbna, 12)#
#
# Total Interest over 24 months#
get_amortint(mbna, 24)#
#
# Illustration of the same using monthly rather than daily interest conversion frequency#
# (Needs slightly bigger smidge)#
mbna2 <- amort.table(Loan = 4000, pmt = iop + 1e-6, i = nom_rate(eff_i, 12), ic = 12, pf = 12)#
mbna2$Other#
mbna2$Schedule[1:24,]#
#
rm(mbna, mbna2)#
#
# _____________________________________#
# Pay it off over 2 years - NB loan is now 4015.12 after initial period interest!#
amort.table(Loan = 4015.12, n = 24, i = 0.057480, ic = 365, pf = 12)#
#
# Interest over first 12 months of so doing#
amort.table(Loan = 4015.12, n = 24, i = 0.057480, ic = 365, pf = 12) |> get_amortint(12)
amort.table(3000, pmt = 124, i = 0.24, pf = 12)
# _____________________________________#
# Pay half off over 12 months#
# (Payment amount found empirically)#
amort.period(Loan = 4015.12, pmt = 181.5, i = 0.057480, ic = 365, pf = 12, t = 12)#
amort.table(Loan = 4015.12, pmt = 181.5, i = 0.057480, ic = 365, pf = 12)#
amort.table(Loan = 4015.12, pmt = 181.5, i = 0.057480, ic = 365, pf = 12) |> get_amortint(12)
source("/Users/frzmce/Library/CloudStorage/OneDrive-UniversityofBristol/Documents/R/Packages/BitsnBobs/R/BitsnBobs.R")
# Balance Transfer Calculations 2023#
#
library(BitsnBobs)#
library(tibble)#
library(FinancialMath)#
help(package = "FinancialMath")#
#
# _____________________________________#
## MBNA Example#
# /Users/frzmce/Library/CloudStorage/OneDrive-UniversityofBristol/Documents/MCE Admin/MCE Admin Safe/MBNA/Balance and Money Transfers/MBNA Money Transfer Example—Screenshot 2023-10-28 at 10.21.19.png#
#
# MBNA Money transfer, £2,000.00, 3.9% p.a. over 36 months with a 0% fee#
# NB 3.9% is an (effective) annual rate => ic, the interest conversion frequency should be the default value of 1.#
amort.table(Loan = 2000, pmt = 60, i = 0.039, pf = 12)#
#
# From statement: "We work out interest daily using your Simple Annual Rates, based on a 365-day year. We charge interest on the total amount you owe, including on interest we charged before, also known as compound interest."#
# In their statements, MBNA quote an approximate annual interest value corresponding to a simple annual rate rounded to#
# 4 significant figures, in this instance a trivial difference: —#
#
nom_rate(0.039, 365)#
nom_rate(0.039, 365) |> signif(4)#
amort.table(Loan = 2000, pmt = 60, i = 0.03826, ic = 365, pf = 12)#
# _____________________________________#
## MBNA Example2#
# From letter with statement#
# Owing £3,000 with Standard Effective Interest Rate of 24.00% p.a. variable#
# Daily interest rate#
nom_rate(0.24, 365)#
# [1] 0.2151748#
# Monthly payment fixed at £90; time to clear balance 4y & 4m; total interest £1637#
amort.table(3000, pmt = 90, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
# Monthly payment fixed at £124; time to clear balance 2y & 9m; total interest £981#
amort.table(3000, pmt = 124, i = nom_rate(0.24, 365), ic = 365, pf = 12)#
#
# _____________________________________#
## Apple Example#
# https://www.apple.com/uk/shop/browse/financing#
# Representative Example#
# Loan amount: £1,200#
# Deposit: £0#
# Annual rate of interest: 4.9% p.a. (fixed)#
# Representative APR: 4.9% APR#
# 24-month loan with 24 monthly payments of £52.53#
# Total amount payable: £1,260.72#
#
amort.table(1200, n = 24, i = 0.049, pf = 12)#
# or the equivalent with daily interest calculation#
amort.table(1200, n = 24, i = nom_rate(0.049, 365), ic = 365, pf = 12)#
#
# Total amount payable, as Apple stated: —#
 52.53 * 24#
# [1] 1260.72#
#
# amort.period gets this right using pmt = 52.53#
amort.period(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("PMT")#
#
(amort.period(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("PMT")) * 24#
#
# but not using n = 24#
amort.period(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("PMT")#
#
(amort.period(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("PMT")) * 24#
#
# Whereas, amort.table() gives a (slightly) different answer whichever way you do it, hmm…: —#
#
amort.table(1200, pmt = 52.53, i = 0.049, pf = 12) |> get_amortval("Total Paid")#
#
amort.table(1200, n = 24, i = 0.049, pf = 12) |> get_amortval("Total Paid")#
# [1] 1260.83#
#
# _____________________________________#
# MBNA Money transfer, £4,000.00, 03/10/2023, exp 02/10/2025, 5.9% p.a. over 24 months with a 0% fee#
# First statement: #
# 26/10/2023 99747123	 INTEREST					  15.12	#
# 23/10/2023	 99705843	 DIRECT DEBIT PAYMENT -  	 -25.00	NB, this goes towards the previous balance transfer!#
# 03/10/2023	 10000167	 PAYMENT  TO  REQUESTED  	4000.00	#
#
# Simple Annual Rate (%) 5.7480#
#
# How they worked out the interest for this period#
as.Date("2023-10-26") - as.Date("2023-10-03")#
# Time difference of 23 days#
#
# Using 23 days at Simple Annual Rate (%) 5.7480#
4000 * 0.057480/365 * 23 # Not what they calculated…#
# [1] 14.48811#
#
# Looks like they used 24 days!#
4000 * 0.057480/365 * 24#
# [1] 15.11803#
#
# _____________________________________#
# Effective Rate#
# In this instance, the difference from their quoted 5.9% p.a. is not quite so trivial#
(eff_i <- eff_rate(0.057480, 365))#
#
# _____________________________________#
# Interest only payments—j is the interest per payment period#
(iop <- j(eff_i, 12, 4000))#
# [1] 19.20445#
#
# Total interest over 12 and 24 months#
round(iop * c(12, 24), 2)#
#
# Cross-check with amort.period() with a billion year term (no visible change after 100 years!!)#
amort.period(Loan = 4000,  n = 1e9 * 12, i = 0.057480, ic = 365, pf = 12, t = 1)#
amort.period(Loan = 4000,  n = 1e9 * 12, i = 0.057480, ic = 365, pf = 12, t = 100)#
#
# Illustration of the same using monthly rather than daily interest conversion frequency#
amort.period(Loan = 4000,  n = 1e9 * 12, i = nom_rate(eff_i, 12), ic = 12, pf = 12, t = 100)#
#
# Or by using amort.table()#
# An extra minute smidge (1e-10) added to payments otherwise amort.table() throws error "Too small of pmt."#
mbna <- amort.table(Loan = 4000, pmt = iop + 1e-10, i = 0.057480, ic = 365, pf = 12)#
mbna$Other#
mbna$Schedule[1:24,]#
#
# Total Interest over 12 months#
get_amortint(mbna, 12)#
#
# Total Interest over 24 months#
get_amortint(mbna, 24)#
#
# Illustration of the same using monthly rather than daily interest conversion frequency#
# (Needs slightly bigger smidge to avoid "Too small of pmt" error.)#
mbna2 <- amort.table(Loan = 4000, pmt = iop + 1e-6, i = nom_rate(eff_i, 12), ic = 12, pf = 12)#
mbna2$Other#
mbna2$Schedule[1:24,]#
#
rm(mbna, mbna2)#
#
# _____________________________________#
# Pay it off over 2 years - NB loan is now 4015.12 after initial period interest!#
amort.table(Loan = 4015.12, n = 24, i = 0.057480, ic = 365, pf = 12)#
#
# Interest over first 12 months of so doing#
amort.table(Loan = 4015.12, n = 24, i = 0.057480, ic = 365, pf = 12) |> get_amortint(12)#
#
# _____________________________________#
# Pay half off over 12 months#
# (Payment amount found empirically)#
amort.period(Loan = 4015.12, pmt = 182.2, i = 0.057480, ic = 365, pf = 12, t = 12)#
amort.table(Loan = 4015.12, pmt = 182.2, i = 0.057480, ic = 365, pf = 12)#
amort.table(Loan = 4015.12, pmt = 182.2, i = 0.057480, ic = 365, pf = 12) |> get_amortint(12)
# _____________________________________#
# Based on MBNA Oct 2023 statement#
# Balance 4015.12#
# Minimum repayment: £67.97#
#
# Interest#
j(eff_i, 12, 4015.12)
amort.period(4015.12, pmt = 67.97, i = 0.057480, ic = 365, pf = 12)
# Assume £25 of minimum repayment used for previous balance transfer#
amort.period(4015.12, pmt = 67.97 - 25, i = 0.057480, ic = 365, pf = 12)
source("/Users/frzmce/Library/CloudStorage/OneDrive-UniversityofBristol/Documents/R/Packages/Revise and Install Packages/Load BitsnBobs and Help.R")
## Population = 500, 750 or 1000#
sample_size(d = 0.05, N = c(500L, 750L, 1000L))
## Population = 500, 750 or 1000#
sample_size(d = 0.1, N = c(500L, 750L, 1000L))
## Population = 500, 750 or 1000#
sample_size(d = 0.1, N = c(50L, 100L, 200L, 400L))
45L:55L
45L:55L |> .class2()
## Population = 500, 750 or 1000#
sample_size(d = 0.1, N = 45L:55L)
## Population = 500, 750 or 1000#
sample_size(d = 0.1, N = 40L:50L)
## Population = 500, 750 or 1000#
sample_size(d = 0.1, N = 43L:44L)
## Population = 500, 750 or 1000#
sample_size(d = 0.1, N = 42L:43L)
97*42/(97 + 42)
97*43/(97 + 43)
x <- "Minimum spanning tree (MST) representing the relationship between MLVA genotypes identified in this study and reported elsewhere with reference to (A) the country of origin and (B) the host species. Each node represents a single genotype. The size of the nodes is proportional to the number of entries with the same genotype, and the lines between nodes correspond to the variation in repeat number. Bold branches connect the samples varying at one locus, and those that differ at more than one locus are linked by thin dotted branches. Six reference strains of C. burnetii, including CbuG_Q212, CbuG_Q154, Cb175_Guyana, Dugway, Nine Mile RSA493 and Henzerling RSA331, are indicated. A coloured background connects genotypes that differ in only one marker from each other and may represent microvariants of a founder genotype."
x
y <- "Minimum spanning tree (MST) representing the relationship between MLVA genotypes identified in this study and reported elsewhere with reference to (A) the country of origin and (B) the host species. Each node represents a single genotype. The size of the nodes is proportional to the number of entries with the same genotype, and the lines between nodes correspond to the variation in repeat number. Bold branches connect the samples varying at one locus, and those that differ at more than one locus are linked by thin dotted branches. Six reference strains of C. burnetii, including CbuG_Q212, CbuG_Q154, Cb175_Guyana, Dugway, Nine Mile RSA493 and Henzerling RSA331, are indicated. A coloured background connects genotypes that differ in only one marker from each other and may represent microvariants of a founder genotype."
y
library(stringr)
path()
searchpath()
search()
x
y
x == y
# Balance Transfer Calculations 2023#
#
library(BitsnBobs)#
library(tibble)#
library(FinancialMath)#
help(package = "FinancialMath")
library(ParaAnita)
nom_rate(24.942/100, 12)
nom_rate(24.942/100, 12)/12
nom_rate(29.947/100, 12)/12
eff_rate(2.207/100 * 12, 12)
eff_rate(2.207/100 * 12, 12) * 100
1.873 * 12
nom_rate
eff_rate
1.01873^12 - 1
j(24.942/100, 1, 100)
j(12*1.873/100, 12, 100)
j(24.942/100, 12, 100)
j(24.942/100, 12, 100) * 12
as.Date("2023-01-01")
as.Date("2023-01-01") + 7 *45
as.Date("2023-11-12") - as.Date("2023-01-01")
(as.Date("2023-11-12") - as.Date("2023-01-01")) ? 7
(as.Date("2023-11-12") - as.Date("2023-01-01")) / 7
prop.test(5, 11)
prop.test(2, 105)
prop.test(c(5, 2), c(11, 105))
library(BitsnBobs)
matrix(c(5, 2, 11, 105), nrow = 2)
matrix(c(5, 2, 6, 103), nrow = 2)
matrix(c(5, 2, 6, 103), nrow = 2) |> fisher.test()
prop.test(2, 105)
prop.test(5, 120)
prop.test(c(5, 5), c(11, 120))
matrix(c(5, 5), c(11, 120))
matrix(c(5, 5, 11, 120), nrow2)
matrix(c(5, 5, 11, 120), nrow(2))
matrix(c(5, 5, 11, 120), nrow = 2)
matrix(c(5, 5, 11, 120), nrow = 2) |> fisher.test()
matrix(c(5, 5, 6, 115), nrow = 2) |> fisher.test()
matrix(c(5, 5, 6, 115), nrow = 2) |> chisq.test()
as.Date("2024-03-14")
as.Date("2024-03-14") |> str()
as.Date("2024-03-14") - as.Date("2023-11-25")
as.Date("2024-03-14") - sys.Date
as.Date("2024-03-14") - sys.Date()
as.Date("2024-03-14") - Sys.Date()
Sys.Date()
Sys.Date() |> str()
Sys.Date() |> .class2()
Sys.Date() |> unclass()
Sys.Date() - 19686
as.Date("2024-12-14") - Sys.Date()
as.Date("2023-12-14") - Sys.Date()
1/.7
as.Date("2024-03-14") - Sys.Date()
(as.Date("2024-03-14") - Sys.Date())/.7
(as.Date("2024-03-14") - Sys.Date())/.7 - 110
Sys.Date + (as.Date("2024-03-14") - Sys.Date())/.7
Sys.Date() + (as.Date("2024-03-14") - Sys.Date())/.7
51728.40 / 0.83
sum(2041, 15751, 8123, 29589)
88.22 - 52.87 - 55.08 + 153.90 * 2
Adata <- list(#
	list(2013:2016),#
	list(2001:2005),#
	list(c(2001:2005, 2009:2010)),#
	list(2001:2005, 2013:2016),#
	list(c(2001:2005, 2009:2010), 2013:2016),#
	list(c(2001:2005, 2008:2011)),#
	list(c(2001:2005, 2008:2011), 2006:2007, 2012:2016)#
)
Adata
list(#
	list(2013:2016),#
	list(2001:2005),#
	list(c(2001:2005, 2009:2010)),#
	list(2001:2005, 2013:2016),#
	list(c(2001:2005, 2009:2010), 2013:2016),#
	list(c(2001:2005, 2008:2011)),#
	list(c(2001:2005, 2008:2011), 2006:2007, 2012:2016)#
) |>#
map(\(x) map(x, as.character))
# suppressPackageStartupMessages(library(tidyverse))#
suppressPackageStartupMessages(library(broom))#
suppressPackageStartupMessages(library(dplyr))#
suppressPackageStartupMessages(library(forcats))#
suppressPackageStartupMessages(library(ggplot2))#
suppressPackageStartupMessages(library(lubridate))#
suppressPackageStartupMessages(library(purrr))#
suppressPackageStartupMessages(library(ResourceSelection))#
suppressPackageStartupMessages(library(rlang))#
suppressPackageStartupMessages(library(stringr))#
suppressPackageStartupMessages(library(tidyr))#
suppressPackageStartupMessages(library(tidyselect))#
library(BitsnBobs)#
library(ParaAnita)#
help(package = "ParaAnita")
list(#
	list(2013:2016),#
	list(2001:2005),#
	list(c(2001:2005, 2009:2010)),#
	list(2001:2005, 2013:2016),#
	list(c(2001:2005, 2009:2010), 2013:2016),#
	list(c(2001:2005, 2008:2011)),#
	list(c(2001:2005, 2008:2011), 2006:2007, 2012:2016)#
) |>#
map(\(x) map(x, as.character))
list(#
	list(2013:2016),#
	list(2001:2005),#
	list(c(2001:2005, 2009:2010)),#
	list(2001:2005, 2013:2016),#
	list(c(2001:2005, 2009:2010), 2013:2016),#
	list(c(2001:2005, 2008:2011)),#
	list(c(2001:2005, 2008:2011), 2006:2007, 2012:2016)#
) |>#
map(\(x) map(x, as.character)) |>						# Name group lists using purrr::map()…#
map(\(x) setNames(x, paste0("Gp", seq_along(x))))
list(#
	list(2013:2016),#
	list(2001:2005),#
	list(c(2001:2005, 2009:2010)),#
	list(2001:2005, 2013:2016),#
	list(c(2001:2005, 2009:2010), 2013:2016),#
	list(c(2001:2005, 2008:2011)),#
	list(c(2001:2005, 2008:2011), 2006:2007, 2012:2016)#
) |>#
map(\(x) map(x, as.character)) |>						# Name group lists using purrr::map()…#
map(\(x) setNames(x, paste0("Gp", seq_along(x)))) |>		# …and setNames()#
(\(x) setNames(x, paste0("ygroup", seq_along(x))))()
ls()#
rm(list = ls())#
ls()#
getwd()#
# setwd("/Users/markeisler/Documents/R/Packages/ParaAnita")#
# setwd("/Users/frzmce/Library/CloudStorage/OneDrive-UniversityofBristol/Documents/R/Packages/ParaAnita")#
setwd("~/OneDrive - University of Bristol/Documents/R/Packages/ParaAnita")#
getwd()#
#
library(de
library(devtools)#
library(roxygen2)
