[{"path":"https://mark-eis.github.io/ParaAnita/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 ParaAnita authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mark Eisler. Author, maintainer, copyright holder.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Eisler M (2024). ParaAnita: Functions Binary Binomial Data Analysis. R package version 1.0.0.0001, https://mark-eis.github.io/ParaAnita/.","code":"@Manual{,   title = {ParaAnita: Functions for Binary and Binomial Data Analysis},   author = {Mark Eisler},   year = {2024},   note = {R package version 1.0.0.0001},   url = {https://mark-eis.github.io/ParaAnita/}, }"},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/index.html","id":"r-functions-for-binary-and-binomial-data-analysis","dir":"","previous_headings":"","what":"R Functions for Binary and Binomial Data Analysis","title":"Functions for Binary and Binomial Data Analysis","text":"Author: Mark C. Eisler eMail: Mark.Eisler@bristol.ac.uk ORCID = 0000-0001-6843-3345","code":""},{"path":"https://mark-eis.github.io/ParaAnita/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Functions for Binary and Binomial Data Analysis","text":"can install development version ParaAnita GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"Mark-Eis/ParaAnita\")"},{"path":"https://mark-eis.github.io/ParaAnita/index.html","id":"paraanita-package-description-","dir":"","previous_headings":"Installation","what":"ParaAnita Package Description: –","title":"Functions for Binary and Binomial Data Analysis","text":"ParaAnita R package includes functions intended address simplify number issues commonly encountered binary (Bernoulli) binomial data analysis using generalised linear models. specifically, ParaAnita following: – Summarises binary binomial proportion data contingency tables contingency_table(), xcontingency_table(), binom_contingency(). Calculates odds ratios confidence intervals associated probabilities odds_ratio(). Gets, sets removes contrasts attribute selected categorical variables (factors) within data get_contrasts(), get_contr_data(), set_contrasts(), set_contrasts<-(), set_contr_treat() set_contr_treat<-(). Gets, sets manipulates categorical variable contrast names contr_colnames(), contr_colnames<-(), contr_colpfx<-(), helm_names() helm_names<-(). Compares related generalised linear models using various measures anova_tbl(), comp_glm(), summanov() univ_anova(). Collates model results standard errors, optional grouping levels selected categorical variables, format convenient plotting glm_plotlist() glm_plotdata(), plots individual faceted plots ggplot.glm_plotdata() var_labs(). Adds, modifies, removes selects factors data add_grps(), drop_null(), drop_zero(), expl_fcts(), fct_to_num(), good_levels(). Simulates Bernoulli binomial proportion data sets categorical explanatory variables bernoulli_data() binom_data(). Simplifies statistical analysis chsqfish() starsig(). Provides auxiliary print functions prints objects derived ParaAnita S3 methods announce(), lf(), print_all() print_lf(). Tidies R workspace rm_objects().","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/ParaAnita-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ParaAnita: Functions for Binary and Binomial Data Analysis — ParaAnita-package","title":"ParaAnita: Functions for Binary and Binomial Data Analysis — ParaAnita-package","text":"Summarises binary (Bernoulli) binomial proportion data contingency tables contingency_table(), xcontingency_table(), binom_contingency(). Calculates odds ratios confidence intervals associated probabilities odds_ratio(). Gets, sets removes contrasts attribute selected categorical variables (factors) within data get_contrasts(), get_contr_data(), set_contrasts(), set_contrasts<-(), set_contr_treat() set_contr_treat<-(). Gets, sets manipulates contrast names contr_colnames(), contr_colnames<-(), contr_colpfx<-(), helm_names() helm_names<-(). Compares related generalised linear models using various measures anova_tbl(), comp_glm(), summanov() univ_anova(). Collates model results standard errors, optional grouping levels selected categorical variables, format convenient plotting glm_plotlist() glm_plotdata(); plots individual faceted plots ggplot.glm_plotdata() var_labs(). Adds, modifies, removes selects factors data add_grps(), drop_null(), drop_zero(), expl_fcts(), fct_to_num(), good_levels(). Simulates Bernoulli binomial proportion data sets categorical explanatory variables bernoulli_data() binom_data(). Simplifies statistical analysis chsqfish() starsig(). Provides auxilliary print functions prints objects derived ParaAnita S3 methods announce(), lf(), print_all(), print_lf(). Tidies workspace rm_objects().","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/ParaAnita-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ParaAnita: Functions for Binary and Binomial Data Analysis — ParaAnita-package","text":"Maintainer: Mark Eisler Mark.Eisler@bristol.ac.uk (ORCID) [copyright holder]","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/Print_Methods.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 Print Methods — Print_Methods","title":"S3 Print Methods — Print_Methods","text":"S3 methods printing objects class \"announce\", \"binom_contingency\", \"contingency_table\", \"odds_ratio\" \"summ_anov\".","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/Print_Methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 Print Methods — Print_Methods","text":"","code":"# S3 method for announce print(x, ...)  # S3 method for binom_contingency print(   x,   width = NULL,   ...,   n = NULL,   max_extra_cols = NULL,   max_footer_lines = NULL )  # S3 method for contingency_table print(   x,   width = NULL,   ...,   n = NULL,   max_extra_cols = NULL,   max_footer_lines = NULL )  # S3 method for odds_ratio print(   x,   width = NULL,   ...,   n = NULL,   max_extra_cols = NULL,   max_footer_lines = NULL )  # S3 method for summ_anov print(x, ...)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/Print_Methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 Print Methods — Print_Methods","text":"x object used select method. ... arguments passed methods. width used max.levels NULL, see . n Number rows show. NULL, default, print rows less print_max option. Otherwise, print many rows specified print_min option. max_extra_cols Number extra columns print abbreviated information , width small entire tibble. NULL, max_extra_cols option used. previously defined n_extra argument soft-deprecated. max_footer_lines Maximum number footer lines. NULL, max_footer_lines option used.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/Print_Methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 Print Methods — Print_Methods","text":"argument x.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/Print_Methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"S3 Print Methods — Print_Methods","text":"print methods return argument x invisibly, via invisible().","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/Print_Methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 Print Methods — Print_Methods","text":"","code":"## print.announce() — print an 'announce' object announce(\"x\", lead = \"Lorem ipsum dolor sit amet\") #> _____________________________ #> Lorem ipsum dolor sit amet: - #>  #> [1] \"x\"  (d <- bernoulli_data()) #> ___________________________ #> Simulated Bernoulli Data: - #>  #> # A tibble: 330 × 2 #>    iv       dv #>  * <fct> <int> #>  1 a         1 #>  2 a         1 #>  3 a         1 #>  4 a         1 #>  5 a         1 #>  6 a         0 #>  7 a         1 #>  8 a         1 #>  9 a         0 #> 10 a         1 #> # ℹ 320 more rows  ## print.binom_contingency() — print a 'binom_contingency' object d |> binom_contingency(dv) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 5 × 3 #>   iv       pn    qn #> * <fct> <int> <int> #> 1 a        35    31 #> 2 b        24    42 #> 3 c        14    52 #> 4 d        16    50 #> 5 e         8    58  (d2 <- tibble(     iv = letters[1:4] |> sample(10, replace = TRUE) |> as.factor(),     dv = c(\"Success\", \"Fail\", \"Borderline\")  |> sample(10, replace = TRUE)   )) #> # A tibble: 10 × 2 #>    iv    dv         #>    <fct> <chr>      #>  1 d     Fail       #>  2 c     Borderline #>  3 c     Fail       #>  4 b     Fail       #>  5 b     Fail       #>  6 b     Success    #>  7 d     Fail       #>  8 a     Borderline #>  9 b     Borderline #> 10 c     Borderline  ## print.contingency_table() — print a 'contingency_table' object d2 |> contingency_table(dv) #> ____________________ #> Contingency Table: - #>  #> # A tibble: 4 × 4 #>   iv     Fail Borderline Success #> * <fct> <int>      <int>   <int> #> 1 d         2          0       0 #> 2 c         1          2       0 #> 3 b         2          1       1 #> 4 a         0          1       0  ## print.odds_ratio() — print an 'odds_ratio' object d |> odds_ratio(.dep_var = dv, .ind_var = iv) #> Waiting for profiling to be done... #> ____________________________ #> Estimates and Odds Ratios: - #>  #> # A tibble: 5 × 7 #>   parameter   estimate    se     p_val odds_ratio ci[,\"2.5 %\"] [,\"97.5 %\"] sig   #> * <chr>          <dbl> <dbl>     <dbl>      <dbl>        <dbl>       <dbl> <fct> #> 1 (Intercept)    0.121 0.247 0.623          1          NA           NA     NS    #> 2 ivb           -0.681 0.355 0.0554         0.506       0.250        1.01  .     #> 3 ivc           -1.43  0.389 0.000230       0.238       0.108        0.502 ***   #> 4 ivd           -1.26  0.379 0.000868       0.283       0.132        0.587 ***   #> 5 ive           -2.10  0.451 0.0000031      0.122       0.0476       0.283 ***    ## print.summanov() — print a 'summanov' object d |> summanov(dv, iv) #> _______________________________________ #> GLM Summary and Analysis of Deviance: - #>  #> $iv #> ______________ #> GLM Summary: - #>  #>  #> Call: #> glm(formula = new_formula(get_expr(.dep_var), sym(x)), family = .family,  #>     data = data) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)   0.1214     0.2466   0.492 0.622674     #> ivb          -0.6810     0.3554  -1.916 0.055351 .   #> ivc          -1.4335     0.3892  -3.683 0.000230 *** #> ivd          -1.2608     0.3786  -3.330 0.000868 *** #> ive          -2.1024     0.4506  -4.665 3.08e-06 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 399.72  on 329  degrees of freedom #> Residual deviance: 367.85  on 325  degrees of freedom #> AIC: 377.85 #>  #> Number of Fisher Scoring iterations: 4 #>  #> ____________ #> GLM Anova: - #>  #> Analysis of Deviance Table #>  #> Model: binomial, link: logit #>  #> Response: dv #>  #> Terms added sequentially (first to last) #>  #>  #>      Df Deviance Resid. Df Resid. Dev Pr(>Chi)     #> NULL                   329     399.72              #> iv    4   31.874       325     367.85 2.03e-06 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>   rm(d, d2)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/Simulate_Data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated Bernoulli and  Binomial Proportion Data — Simulate_Data","title":"Simulated Bernoulli and  Binomial Proportion Data — Simulate_Data","text":"bernoulli_data() creates simulated univariate Bernoulli data set dependent variable dv values 0 1, independent variable iv levels represented lower case letters. binom_data() creates simulated univariate binomial proportion data set variable pn representing number successes, variable qn representing number failures, independent variable iv levels represented lower case letters.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/Simulate_Data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated Bernoulli and  Binomial Proportion Data — Simulate_Data","text":"","code":"bernoulli_data(   levels = 5,   length = 66,   probs = seq(0.5, 0.1, length.out = levels) )  binom_data(   levels = 5,   length = 66L,   probs = seq(0.5, 0.1, length.out = levels) )"},{"path":"https://mark-eis.github.io/ParaAnita/reference/Simulate_Data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulated Bernoulli and  Binomial Proportion Data — Simulate_Data","text":"levels numeric, desired number levels independent variable iv;  default 5. length numeric, desired number simulated observations per level independent variable iv; default 20. probs numeric vector length levels, representing probabilities success corresponding level; default seq(0.5, 0.1, length.= levels).","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/Simulate_Data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulated Bernoulli and  Binomial Proportion Data — Simulate_Data","text":"object class \"announce\" inheriting tibble column iv independant variable, bernoulli_data(), column dv representing dependant variable; binom_data(), columns pn qn representing number \"successes\" \"failures\", follows: - iv factor representing levels independant variable. dv integer representing value dependent variable. pn integer representing  number successes. qn integer representing  number failures.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/Simulate_Data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulated Bernoulli and  Binomial Proportion Data — Simulate_Data","text":"random sample Bernoulli distribution obtained level independent variable iv, corresponding probability given probs, using rbinom() size = 1. result returned tibble two columns, iv representing level independent variable dv representing simulated data. result may easily converted (simulated) proportion data inspected using binom_contingency(), see examples. random sample binomial distribution size length obtained level independent variable iv, corresponding probability given probs, using rbinom() size = levels. bernoulli_data() binom_data() used demonstrating testing functions contingency_table(), binom_contingency() odds_ratio().","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/Simulate_Data.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Simulated Bernoulli and  Binomial Proportion Data — Simulate_Data","text":"default length 66 minimum number trials probability success 0.1 overall probability zero failures less 1 1000 .e., \\((1 - 0.1)^{66} < 0.001\\).","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/Simulate_Data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulated Bernoulli and  Binomial Proportion Data — Simulate_Data","text":"","code":"bernoulli_data() #> ___________________________ #> Simulated Bernoulli Data: - #>  #> # A tibble: 330 × 2 #>    iv       dv #>  * <fct> <int> #>  1 a         1 #>  2 a         1 #>  3 a         0 #>  4 a         0 #>  5 a         1 #>  6 a         0 #>  7 a         1 #>  8 a         0 #>  9 a         0 #> 10 a         0 #> # ℹ 320 more rows bernoulli_data() |> binom_contingency(dv, iv) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 5 × 3 #>   iv       pn    qn #> * <fct> <int> <int> #> 1 a        29    37 #> 2 b        26    40 #> 3 c        16    50 #> 4 d        12    54 #> 5 e        10    56 bernoulli_data(probs = seq(0.4, 0, length.out = 5)) |> binom_contingency(dv, iv) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 5 × 3 #>   iv       pn    qn #> * <fct> <int> <int> #> 1 a        28    38 #> 2 b        15    51 #> 3 c        15    51 #> 4 d         5    61 #> 5 e         0    66  binom_data() #> __________________________ #> Simulated Binomial Data: - #>  #> # A tibble: 5 × 3 #>   iv       pn    qn #> * <fct> <int> <int> #> 1 a        38    28 #> 2 b        29    37 #> 3 c        21    45 #> 4 d        14    52 #> 5 e         6    60 binom_data(probs = seq(0.4, 0, length.out = 5)) #> __________________________ #> Simulated Binomial Data: - #>  #> # A tibble: 5 × 3 #>   iv       pn    qn #> * <fct> <int> <int> #> 1 a        26    40 #> 2 b        21    45 #> 3 c        14    52 #> 4 d         3    63 #> 5 e         0    66"},{"path":"https://mark-eis.github.io/ParaAnita/reference/add_grps.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Factors to Data Based on Grouped Levels of an Existing Factor — add_grps","title":"Add Factors to Data Based on Grouped Levels of an Existing Factor — add_grps","text":"Add new factors data based grouped levels existing factor, using key compatible fct_collapse.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/add_grps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Factors to Data Based on Grouped Levels of an Existing Factor — add_grps","text":"","code":"add_grps(data, .fct, .key, .sort = TRUE)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/add_grps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Factors to Data Based on Grouped Levels of an Existing Factor — add_grps","text":"data data frame, data frame extension (e.g. tibble). .fct quoted name existing (ungrouped) factor. .key list nested, named lists representing groupings, containing series named character vectors. .sort logical, whether sort levels new factors; default TRUE.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/add_grps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Factors to Data Based on Grouped Levels of an Existing Factor — add_grps","text":"data frame, data frame extension (e.g. tibble), equivalent data additional grouped factor(s).","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/add_grps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Factors to Data Based on Grouped Levels of an Existing Factor — add_grps","text":".key argument series named lists nested within outer list. nested named list must contain one named character vectors representing new factor groupings. nested lists structured compatibility fct_collapse() package forcats. add_grps() add new, grouped factors data, one nested list name. Levels assigned new grouped factors using name whichever character vector, , contains old factor level. none , original ungrouped factor level used. Various different groupings factor may conveniently added data using add_grps() corresponding series related binomial glms compared using comp_glm().","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/add_grps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Factors to Data Based on Grouped Levels of an Existing Factor — add_grps","text":"","code":"(d <- binom_data(levels = 6)) #> __________________________ #> Simulated Binomial Data: - #>  #> # A tibble: 6 × 3 #>   iv       pn    qn #> * <fct> <int> <int> #> 1 a        33    33 #> 2 b        29    37 #> 3 c        17    49 #> 4 d        12    54 #> 5 e        12    54 #> 6 f         4    62  ## One grouped factor grp_key <- list(g = c(\"a\", \"c\", \"e\"), h = c(\"b\", \"d\", \"f\"))  d |> add_grps(iv, list(iv2 = grp_key)) #> __________________________ #> Simulated Binomial Data: - #>  #> # A tibble: 6 × 4 #>   iv    iv2      pn    qn #>   <fct> <fct> <int> <int> #> 1 a     g        33    33 #> 2 b     h        29    37 #> 3 c     g        17    49 #> 4 d     h        12    54 #> 5 e     g        12    54 #> 6 f     h         4    62  ## Several grouped factors grp_key <- list(     iv2 = grp_key,     iv3 = list(i = c(\"a\", \"b\", \"c\"), j = c(\"d\", \"e\", \"f\")),     iv4 = list(k = c(\"a\", \"b\"), l = c(\"c\", \"d\"), m = c(\"e\", \"f\")) )  d |> add_grps(iv, grp_key) #> __________________________ #> Simulated Binomial Data: - #>  #> # A tibble: 6 × 6 #>   iv    iv2   iv3   iv4      pn    qn #>   <fct> <fct> <fct> <fct> <int> <int> #> 1 a     g     i     k        33    33 #> 2 b     h     i     k        29    37 #> 3 c     g     i     l        17    49 #> 4 d     h     j     l        12    54 #> 5 e     g     j     m        12    54 #> 6 f     h     j     m         4    62  ## Cut out the middleman list(     iv2 = list(g = c(\"a\", \"c\", \"e\"), h = c(\"b\", \"d\", \"f\")),     iv3 = list(i = c(\"a\", \"b\", \"c\"), j = c(\"d\", \"e\", \"f\")),     iv4 = list(k = c(\"a\", \"b\"), l = c(\"c\", \"d\"), m = c(\"e\", \"f\")) ) |> add_grps(d, iv, .key = _) #> __________________________ #> Simulated Binomial Data: - #>  #> # A tibble: 6 × 6 #>   iv    iv2   iv3   iv4      pn    qn #>   <fct> <fct> <fct> <fct> <int> <int> #> 1 a     g     i     k        33    33 #> 2 b     h     i     k        29    37 #> 3 c     g     i     l        17    49 #> 4 d     h     j     l        12    54 #> 5 e     g     j     m        12    54 #> 6 f     h     j     m         4    62  ## Binomial data with month as explanatory variable, using dplyr and forcats package functions (d <- binom_data(12, probs = rep_len(0.5, 12)) |>     mutate(across(iv, \\(x) fct_recode(x, !!!setNames(letters[1:12], month.abb)))) |>     rename(month = \"iv\")) #> __________________________ #> Simulated Binomial Data: - #>  #> # A tibble: 12 × 3 #>    month    pn    qn #>    <fct> <int> <int> #>  1 Jan      32    34 #>  2 Feb      33    33 #>  3 Mar      29    37 #>  4 Apr      35    31 #>  5 May      36    30 #>  6 Jun      31    35 #>  7 Jul      41    25 #>  8 Aug      34    32 #>  9 Sep      28    38 #> 10 Oct      36    30 #> 11 Nov      38    28 #> 12 Dec      40    26  ## Name three lists of different month groupings using purrr::map() list(     list(1:3, 4:6, 7:9, 10:12),     list(1:4, 5:8, 9:12),     list(c(1:3, 10:12), 4:9) ) |> map(\\(x) map(x, \\(y) month.abb[y])) |> map(\\(x) setNames(x, paste0(\"group\", seq_along(x)))) |> (\\(x) setNames(x, paste0(\"months\", seq_along(x))))() |> add_grps(d, month, .key = _)        ## Add the new year groups to data #> __________________________ #> Simulated Binomial Data: - #>  #> # A tibble: 12 × 6 #>    month months1 months2 months3    pn    qn #>    <fct> <fct>   <fct>   <fct>   <int> <int> #>  1 Jan   group1  group1  group1     32    34 #>  2 Feb   group1  group1  group1     33    33 #>  3 Mar   group1  group1  group1     29    37 #>  4 Apr   group2  group1  group2     35    31 #>  5 May   group2  group2  group2     36    30 #>  6 Jun   group2  group2  group2     31    35 #>  7 Jul   group3  group2  group2     41    25 #>  8 Aug   group3  group2  group2     34    32 #>  9 Sep   group3  group3  group2     28    38 #> 10 Oct   group4  group3  group1     36    30 #> 11 Nov   group4  group3  group1     38    28 #> 12 Dec   group4  group3  group1     40    26  ## Example from fct_collapse() using gss_cat dataset from {forcats} package # \\dontshow{    if (!requireNamespace(\"forcats\", quietly = TRUE))         warning(\"package 'forcats' must be installed\")    try(gss_cat <- forcats::gss_cat) # }  fct_count(gss_cat$partyid) #> # A tibble: 10 × 2 #>    f                      n #>    <fct>              <int> #>  1 No answer            154 #>  2 Don't know             1 #>  3 Other party          393 #>  4 Strong republican   2314 #>  5 Not str republican  3032 #>  6 Ind,near rep        1791 #>  7 Independent         4119 #>  8 Ind,near dem        2499 #>  9 Not str democrat    3690 #> 10 Strong democrat     3490  grp_key <- list(     partyid2 = list(         missing = c(\"No answer\", \"Don't know\"),         other = \"Other party\",         rep = c(\"Strong republican\", \"Not str republican\"),         ind = c(\"Ind,near rep\", \"Independent\", \"Ind,near dem\"),         dem = c(\"Not str democrat\", \"Strong democrat\")     ) )  gss_cat |>     add_grps(partyid, grp_key) |>     _$partyid2 |> fct_count() #> # A tibble: 5 × 2 #>   f           n #>   <fct>   <int> #> 1 dem      7180 #> 2 ind      8409 #> 3 missing   155 #> 4 other     393 #> 5 rep      5346  gss_cat |>     add_grps(partyid, grp_key, .sort = FALSE) |>     _$partyid2 |> fct_count() #> # A tibble: 5 × 2 #>   f           n #>   <fct>   <int> #> 1 missing   155 #> 2 other     393 #> 3 rep      5346 #> 4 ind      8409 #> 5 dem      7180  # \\dontshow{     rm(gss_cat) # }  rm(grp_key, d)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/announce.html","id":null,"dir":"Reference","previous_headings":"","what":"Announce Class for Consistent Printing — announce","title":"Announce Class for Consistent Printing — announce","text":"Creates object class \"announce\" built-title string used printing.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/announce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Announce Class for Consistent Printing — announce","text":"","code":"announce(object = vector(), lead = \"Announce\", ...)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/announce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Announce Class for Consistent Printing — announce","text":"object Object converted \"announce\" class. lead character string giving title printed. ... named arguments forwarded print methods classes inherited object.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/announce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Announce Class for Consistent Printing — announce","text":"object class \"announce\" inheriting class(es) object.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/announce.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Announce Class for Consistent Printing — announce","text":"announce() converts object class \"announce\", inheriting existing class(es).","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/announce.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Announce Class for Consistent Printing — announce","text":"","code":"announce() #> ___________ #> Announce: - #>  #> logical(0) (cpt <- announce(\"x\", lead = \"Lorem ipsum dolor sit amet\")) #> _____________________________ #> Lorem ipsum dolor sit amet: - #>  #> [1] \"x\" .class2(cpt) #> [1] \"announce\"  \"character\"  ## an Announce object, or one inheriting from announce, can be safely overwritten (cpt <- announce(cpt, \"Consectetur adipiscing elit\")) #> ______________________________ #> Consectetur adipiscing elit: - #>  #> [1] \"x\" .class2(cpt) #> [1] \"announce\"  \"character\"  rm(cpt)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/anova_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Tibble from List of Anovas — anova_tbl","title":"Create Tibble from List of Anovas — anova_tbl","text":"Create tibble list anovas compare model null model compare two nested models.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/anova_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Tibble from List of Anovas — anova_tbl","text":"","code":"anova_tbl(anova_ls)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/anova_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Tibble from List of Anovas — anova_tbl","text":"anova_ls list anova objects.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/anova_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Tibble from List of Anovas — anova_tbl","text":"object classes \"anova_tbl\", \"announce\", inheriting tibble, showing table entries anova, one per line.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/anova_tbl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Tibble from List of Anovas — anova_tbl","text":"anovas compared must type .e., must analyses single model object must comparisons two models. models one independent variable, results may difficult interpret warning given. anova_tbl() can used easily conveniently compare list anovas obtained summanov  list_transpose, see examples.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/anova_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Tibble from List of Anovas — anova_tbl","text":"","code":"## Following on from summanov() examples…  ## Simulate Bernoulli data (d <- list(     iv2 = list(g = c(\"a\", \"c\", \"e\"), h = c(\"b\", \"d\", \"f\")),     iv3 = list(i = c(\"a\", \"b\", \"c\"), j = c(\"d\", \"e\", \"f\")),     iv4 = list(k = c(\"a\", \"b\"), l = c(\"c\", \"d\"), m = c(\"e\", \"f\")) ) |> add_grps(binom_data(levels = 6), iv, .key = _)) #> __________________________ #> Simulated Binomial Data: - #>  #> # A tibble: 6 × 6 #>   iv    iv2   iv3   iv4      pn    qn #>   <fct> <fct> <fct> <fct> <int> <int> #> 1 a     g     i     k        29    37 #> 2 b     h     i     k        25    41 #> 3 c     g     i     l        17    49 #> 4 d     h     j     l        19    47 #> 5 e     g     j     m        14    52 #> 6 f     h     j     m        10    56  ## Create list of GLM anovas using summanov() (alist <- d |> summanov(cbind(pn, qn), starts_with(\"iv\")) |>     list_transpose() |> _$anova) #> $iv #> ____________ #> GLM Anova: - #>  #> Analysis of Deviance Table #>  #> Model: binomial, link: logit #>  #> Response: cbind(pn, qn) #>  #> Terms added sequentially (first to last) #>  #>  #>      Df Deviance Resid. Df Resid. Dev Pr(>Chi)    #> NULL                     5     18.397             #> iv    5   18.397         0      0.000 0.002488 ** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> $iv2 #> ____________ #> GLM Anova: - #>  #> Analysis of Deviance Table #>  #> Model: binomial, link: logit #>  #> Response: cbind(pn, qn) #>  #> Terms added sequentially (first to last) #>  #>  #>      Df Deviance Resid. Df Resid. Dev Pr(>Chi) #> NULL                     5     18.397          #> iv2   1   0.4436         4     17.953   0.5054 #>  #> $iv3 #> ____________ #> GLM Anova: - #>  #> Analysis of Deviance Table #>  #> Model: binomial, link: logit #>  #> Response: cbind(pn, qn) #>  #> Terms added sequentially (first to last) #>  #>  #>      Df Deviance Resid. Df Resid. Dev Pr(>Chi)    #> NULL                     5    18.3967             #> iv3   1   9.7328         4     8.6639  0.00181 ** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> $iv4 #> ____________ #> GLM Anova: - #>  #> Analysis of Deviance Table #>  #> Model: binomial, link: logit #>  #> Response: cbind(pn, qn) #>  #> Terms added sequentially (first to last) #>  #>  #>      Df Deviance Resid. Df Resid. Dev  Pr(>Chi)     #> NULL                     5    18.3967               #> iv4   2   16.924         3     1.4726 0.0002113 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>   ## Tibble from list of GLM anovas  alist |> anova_tbl() #> _________________________________________________ #> Analysis of Deviance (Comparing to null model): - #>  #> # A tibble: 4 × 9 #>   Name  `Null Df` `Null Dev`    Df Deviance `Resid. Df` `Resid. Dev` `Pr(>Chi)` #> * <chr>     <int>      <dbl> <int>    <dbl>       <int>        <dbl>      <dbl> #> 1 iv            5       18.4     5   18.4             0    -5.33e-15   0.00249  #> 2 iv2           5       18.4     1    0.444           4     1.80e+ 1   0.505    #> 3 iv3           5       18.4     1    9.73            4     8.66e+ 0   0.00181  #> 4 iv4           5       18.4     2   16.9             3     1.47e+ 0   0.000211 #> # ℹ 1 more variable: sig <fct>  ## Add GLM anova with two independent variables alist$iv3_iv4 <- glm(cbind(pn, qn) ~ iv3 + iv4, family = binomial, data = d) |>     anova()  ## Tibble from list with multivariable anova invokes warning try(alist |> anova_tbl()) #> Warning: iv3_iv4 has > 1 independent variable, interpret with caution #> _________________________________________________ #> Analysis of Deviance (Comparing to null model): - #>  #> # A tibble: 5 × 9 #>   Name   `Null Df` `Null Dev`    Df Deviance `Resid. Df` `Resid. Dev` `Pr(>Chi)` #> * <chr>      <int>      <dbl> <int>    <dbl>       <int>        <dbl>      <dbl> #> 1 iv             5       18.4     5   18.4             0    -5.33e-15   0.00249  #> 2 iv2            5       18.4     1    0.444           4     1.80e+ 1   0.505    #> 3 iv3            5       18.4     1    9.73            4     8.66e+ 0   0.00181  #> 4 iv4            5       18.4     2   16.9             3     1.47e+ 0   0.000211 #> 5 iv3_i…         5       18.4     1    9.73            4     8.66e+ 0  NA        #> # ℹ 1 more variable: sig <fct>  rm(d, alist)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/binom_contingency.html","id":null,"dir":"Reference","previous_headings":"","what":"Binomial Contingency Table for Data with a Binary Outcome — binom_contingency","title":"Binomial Contingency Table for Data with a Binary Outcome — binom_contingency","text":"binom_contingency() creates binomial contingency table data binary dependent variable one categorical independent variables, optionally including totals, proportions confidence intervals.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/binom_contingency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binomial Contingency Table for Data with a Binary Outcome — binom_contingency","text":"","code":"binom_contingency(   .data,   .dep_var,   ...,   .drop_zero = FALSE,   .propci = FALSE,   .level = 0.95 )"},{"path":"https://mark-eis.github.io/ParaAnita/reference/binom_contingency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binomial Contingency Table for Data with a Binary Outcome — binom_contingency","text":".data data frame, data frame extension (e.g. tibble). .dep_var <data-masking> quoted name binary dependent variable, numeric values 0 1. ... <tidy-select> quoted name(s) one factors character vectors .data, included (excluded) output. .drop_zero logical. TRUE, levels explanatory factors values .dep_var either zero one dropped output; default FALSE. .propci logical. TRUE, row output \"binom_contingency\" object includes totals, proportions confidence intervals; default FALSE. .level confidence level required; default 0.95.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/binom_contingency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binomial Contingency Table for Data with a Binary Outcome — binom_contingency","text":"object class \"binom_contingency\", \"announce\", inheriting tibble, columns pn qn representing number \"successes\" \"failures\" respectively, columns independant (explanatory) variables. .propci = TRUE additional columns output representing totals, proportions confidence intervals.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/binom_contingency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Binomial Contingency Table for Data with a Binary Outcome — binom_contingency","text":"Categorical variables (.e. factors character vectors) .data required factors resulting contingency table may selected inclusion exclusion using ... argument <tidy-select> syntax package dplyr, including use “selection helpers”. ... arguments supplied, categorical variables .data (.dep_var) used. list defused R expressions, instance created expl_fcts(), may used ... arguments injected using splice-operator, !!!, see examples. Use drop_zero = TRUE drop levels explanatory factors values .dep_var either zero one, prevent warning messages ‘fitted probabilities numerically 0 1 occurred’ fitting generalized linear models using glm() calculating odds ratios using odds_ratio(); see examples Venables & Ripley (2002, pp. 197–8).","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/binom_contingency.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Binomial Contingency Table for Data with a Binary Outcome — binom_contingency","text":"Confidence intervals calculated using prop.test(), based Wilson's score method without continuity correction (Newcombe, 1998).","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/binom_contingency.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Binomial Contingency Table for Data with a Binary Outcome — binom_contingency","text":"Confidence interval R's prop.test() differs hand calculation result SAS.  Stack Exchange. Newcombe R.G. (1998). Two-Sided Confidence Intervals Single Proportion: Comparison Seven Methods. Statistics Medicine, 17, 857-872.  doi:10.1002/(SICI)1097-0258(19980430)17:8<857::AID-SIM777>3.0.CO;2-E . Venables, W.N. Ripley, B.D. (2002) Modern Applied Statistics S. New York: Springer. doi:10.1007/978-0-387-21706-2 . Yates' continuity correction confidence interval returned prop.test.  Stack Exchange.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/binom_contingency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Binomial Contingency Table for Data with a Binary Outcome — binom_contingency","text":"","code":"## Bernoulli data with a single explanatory variable (d <- bernoulli_data()) #> ___________________________ #> Simulated Bernoulli Data: - #>  #> # A tibble: 330 × 2 #>    iv       dv #>  * <fct> <int> #>  1 a         1 #>  2 a         0 #>  3 a         1 #>  4 a         0 #>  5 a         1 #>  6 a         0 #>  7 a         0 #>  8 a         1 #>  9 a         0 #> 10 a         0 #> # ℹ 320 more rows d |> binom_contingency(dv) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 5 × 3 #>   iv       pn    qn #> * <fct> <int> <int> #> 1 a        30    36 #> 2 b        26    40 #> 3 c        15    51 #> 4 d        15    51 #> 5 e         7    59 d |> binom_contingency(dv, .propci = TRUE) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 5 × 7 #>   iv       pn    qn     n     p  lower upper #> * <fct> <int> <int> <int> <dbl>  <dbl> <dbl> #> 1 a        30    36    66 0.455 0.340  0.574 #> 2 b        26    40    66 0.394 0.285  0.515 #> 3 c        15    51    66 0.227 0.143  0.342 #> 4 d        15    51    66 0.227 0.143  0.342 #> 5 e         7    59    66 0.106 0.0523 0.203 #> \tConfidence level 0.95   ## Bernoulli data for a single explanatory variable with levels at which responses are all zero (d <- bernoulli_data(probs = seq(0.4, 0, length.out = 5))) #> ___________________________ #> Simulated Bernoulli Data: - #>  #> # A tibble: 330 × 2 #>    iv       dv #>  * <fct> <int> #>  1 a         1 #>  2 a         1 #>  3 a         0 #>  4 a         1 #>  5 a         1 #>  6 a         0 #>  7 a         0 #>  8 a         0 #>  9 a         1 #> 10 a         1 #> # ℹ 320 more rows d |> binom_contingency(dv) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 5 × 3 #>   iv       pn    qn #> * <fct> <int> <int> #> 1 a        34    32 #> 2 b        19    47 #> 3 c        18    48 #> 4 d         7    59 #> 5 e         0    66 ## Invokes warning: - ##   '! glm.fit: fitted probabilities numerically 0 or 1 occurred' try(d |> binom_contingency(dv) |>     odds_ratio(.ind_var = iv)) #> Waiting for profiling to be done... #> Warning: There were 48 warnings in `mutate()`. #> The first warning was: #> ℹ In argument: `ci = exp(rbind(c(NA, NA), confint(.glm, level = .level)[-1, #>   ]))`. #> Caused by warning: #> ! glm.fit: fitted probabilities numerically 0 or 1 occurred #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 47 remaining warnings. #> ____________________________ #> Estimates and Odds Ratios: - #>  #> # A tibble: 5 × 7 #>   parameter   estimate       se    p_val odds_ratio ci[,\"2.5 %\"] sig   #> * <chr>          <dbl>    <dbl>    <dbl>      <dbl>        <dbl> <fct> #> 1 (Intercept)   0.0606     0.25 0.806         1          NA      NS    #> 2 ivb          -0.966      0.37 0.00843       0.380       0.183  **    #> 3 ivc          -1.04       0.37 0.00491       0.353       0.168  **    #> 4 ivd          -2.19       0.47 0.000003      0.112       0.0414 ***   #> 5 ive         -27.0    51859.   1.00          0           0      NS    #> # ℹ 1 more variable: ci[2] <dbl>  ##  Argument .drop_zero = TRUE in binomial contingency() prevents this warning d |> binom_contingency(dv, .drop_zero = TRUE) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 4 × 3 #>   iv       pn    qn #> * <fct> <int> <int> #> 1 a        34    32 #> 2 b        19    47 #> 3 c        18    48 #> 4 d         7    59 d |> binom_contingency(dv, .drop_zero = TRUE) |>     odds_ratio(.ind_var = iv) #> Waiting for profiling to be done... #> ____________________________ #> Estimates and Odds Ratios: - #>  #> # A tibble: 4 × 7 #>   parameter   estimate    se    p_val odds_ratio ci[,\"2.5 %\"] [,\"97.5 %\"] sig   #> * <chr>          <dbl> <dbl>    <dbl>      <dbl>        <dbl>       <dbl> <fct> #> 1 (Intercept)   0.0606 0.246 0.806         1          NA           NA     NS    #> 2 ivb          -0.966  0.367 0.00843       0.380       0.183        0.774 **    #> 3 ivc          -1.04   0.370 0.00491       0.353       0.168        0.722 **    #> 4 ivd          -2.19   0.470 0.000003      0.112       0.0414       0.267 ***    ## Bernoulli data with multiple explanatory variables (d <- list(     iv2 = list(i = c(\"a\", \"c\", \"e\", \"g\"), j = c(\"b\", \"d\", \"f\", \"h\")),     iv3 = list(k = c(\"a\", \"b\", \"c\", \"d\"), l = c(\"e\", \"f\", \"g\", \"h\")),     iv4 = list(k = c(\"a\", \"b\"), l = c(\"c\", \"d\"), m = c(\"e\", \"f\")) ) |> add_grps(bernoulli_data(levels = 8), iv, .key = _)) #> ___________________________ #> Simulated Bernoulli Data: - #>  #> # A tibble: 528 × 5 #>    iv    iv2   iv3   iv4      dv #>    <fct> <fct> <fct> <fct> <int> #>  1 a     i     k     k         1 #>  2 a     i     k     k         1 #>  3 a     i     k     k         1 #>  4 a     i     k     k         0 #>  5 a     i     k     k         1 #>  6 a     i     k     k         0 #>  7 a     i     k     k         1 #>  8 a     i     k     k         0 #>  9 a     i     k     k         0 #> 10 a     i     k     k         1 #> # ℹ 518 more rows  d |> binom_contingency(dv) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 8 × 6 #>   iv    iv2   iv3   iv4      pn    qn #> * <fct> <fct> <fct> <fct> <int> <int> #> 1 a     i     k     k        33    33 #> 2 b     j     k     k        25    41 #> 3 c     i     k     l        28    38 #> 4 d     j     k     l        16    50 #> 5 e     i     l     m        10    56 #> 6 f     j     l     m        17    49 #> 7 g     i     l     g        14    52 #> 8 h     j     l     h         6    60 d |> binom_contingency(dv, iv, iv3) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 8 × 4 #>   iv    iv3      pn    qn #> * <fct> <fct> <int> <int> #> 1 a     k        33    33 #> 2 b     k        25    41 #> 3 c     k        28    38 #> 4 d     k        16    50 #> 5 e     l        10    56 #> 6 f     l        17    49 #> 7 g     l        14    52 #> 8 h     l         6    60 d |> binom_contingency(dv, !c(iv2, iv4)) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 8 × 4 #>   iv    iv3      pn    qn #> * <fct> <fct> <int> <int> #> 1 a     k        33    33 #> 2 b     k        25    41 #> 3 c     k        28    38 #> 4 d     k        16    50 #> 5 e     l        10    56 #> 6 f     l        17    49 #> 7 g     l        14    52 #> 8 h     l         6    60 d |> binom_contingency(dv, !!!expl_fcts(d)) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 8 × 6 #>   iv    iv2   iv3   iv4      pn    qn #> * <fct> <fct> <fct> <fct> <int> <int> #> 1 a     i     k     k        33    33 #> 2 b     j     k     k        25    41 #> 3 c     i     k     l        28    38 #> 4 d     j     k     l        16    50 #> 5 e     i     l     m        10    56 #> 6 f     j     l     m        17    49 #> 7 g     i     l     g        14    52 #> 8 h     j     l     h         6    60  d |> binom_contingency(dv, .propci = TRUE) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 8 × 10 #>   iv    iv2   iv3   iv4      pn    qn     n      p  lower upper #> * <fct> <fct> <fct> <fct> <int> <int> <int>  <dbl>  <dbl> <dbl> #> 1 a     i     k     k        33    33    66 0.5    0.383  0.617 #> 2 b     j     k     k        25    41    66 0.379  0.271  0.499 #> 3 c     i     k     l        28    38    66 0.424  0.312  0.544 #> 4 d     j     k     l        16    50    66 0.242  0.155  0.358 #> 5 e     i     l     m        10    56    66 0.152  0.0844 0.257 #> 6 f     j     l     m        17    49    66 0.258  0.167  0.374 #> 7 g     i     l     g        14    52    66 0.212  0.131  0.325 #> 8 h     j     l     h         6    60    66 0.0909 0.0423 0.184 #> \tConfidence level 0.95  d |> binom_contingency(dv, .drop_zero = TRUE) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 8 × 6 #>   iv    iv2   iv3   iv4      pn    qn #> * <fct> <fct> <fct> <fct> <int> <int> #> 1 a     i     k     k        33    33 #> 2 b     j     k     k        25    41 #> 3 c     i     k     l        28    38 #> 4 d     j     k     l        16    50 #> 5 e     i     l     m        10    56 #> 6 f     j     l     m        17    49 #> 7 g     i     l     g        14    52 #> 8 h     j     l     h         6    60  d |>    binom_contingency(dv, iv2, iv3, .drop_zero = TRUE) |>    glm(cbind(pn, qn) ~ ., binomial, data = _) |>    summary() #>  #> Call: #> glm(formula = cbind(pn, qn) ~ ., family = binomial, data = binom_contingency(d,  #>     dv, iv2, iv3, .drop_zero = TRUE)) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  -0.2589     0.1589  -1.629   0.1032     #> iv2j         -0.4173     0.2005  -2.081   0.0374 *   #> iv3l         -1.0762     0.2056  -5.235 1.65e-07 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 35.2484  on 3  degrees of freedom #> Residual deviance:  2.0794  on 1  degrees of freedom #> AIC: 28.208 #>  #> Number of Fisher Scoring iterations: 4 #>   d |>    binom_contingency(dv, iv2, iv3, .drop_zero = TRUE) |>    glm(cbind(pn, qn) ~ ., binomial, data = _) |>    odds_ratio() #> glm(formula = cbind(pn, qn) ~ ., family = binomial, data = binom_contingency(d,  #>     dv, iv2, iv3, .drop_zero = TRUE)) #> Waiting for profiling to be done... #> ____________________________ #> Estimates and Odds Ratios: - #>  #> # A tibble: 3 × 7 #>   parameter   estimate    se      p_val odds_ratio ci[,\"2.5 %\"] sig   #> * <chr>          <dbl> <dbl>      <dbl>      <dbl>        <dbl> <fct> #> 1 (Intercept)   -0.259 0.159 0.103           1           NA     NS    #> 2 iv2j          -0.417 0.200 0.0374          0.659        0.444 *     #> 3 iv3l          -1.08  0.206 0.00000017      0.341        0.226 ***   #> # ℹ 1 more variable: ci[2] <dbl>  ## Use {dplyr} selection helpers e.g., last_col(), num_range() and starts_with() d |> binom_contingency(dv, last_col(1L))  ## Offset of 1L used, since last column of d is dv #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 5 × 3 #>   iv4      pn    qn #> * <fct> <int> <int> #> 1 k        58    74 #> 2 l        44    88 #> 3 m        27   105 #> 4 g        14    52 #> 5 h         6    60 d |> binom_contingency(dv, !last_col()) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 8 × 6 #>   iv    iv2   iv3   iv4      pn    qn #> * <fct> <fct> <fct> <fct> <int> <int> #> 1 a     i     k     k        33    33 #> 2 b     j     k     k        25    41 #> 3 c     i     k     l        28    38 #> 4 d     j     k     l        16    50 #> 5 e     i     l     m        10    56 #> 6 f     j     l     m        17    49 #> 7 g     i     l     g        14    52 #> 8 h     j     l     h         6    60 d |> binom_contingency(dv, num_range(\"iv\", 2:3)) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 4 × 4 #>   iv2   iv3      pn    qn #> * <fct> <fct> <int> <int> #> 1 i     k        61    71 #> 2 j     k        41    91 #> 3 i     l        24   108 #> 4 j     l        23   109 d |> binom_contingency(dv, !num_range(\"iv\", 2:3)) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 8 × 4 #>   iv    iv4      pn    qn #> * <fct> <fct> <int> <int> #> 1 a     k        33    33 #> 2 b     k        25    41 #> 3 c     l        28    38 #> 4 d     l        16    50 #> 5 e     m        10    56 #> 6 f     m        17    49 #> 7 g     g        14    52 #> 8 h     h         6    60 d |> binom_contingency(dv, starts_with(\"iv\")) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 8 × 6 #>   iv    iv2   iv3   iv4      pn    qn #> * <fct> <fct> <fct> <fct> <int> <int> #> 1 a     i     k     k        33    33 #> 2 b     j     k     k        25    41 #> 3 c     i     k     l        28    38 #> 4 d     j     k     l        16    50 #> 5 e     i     l     m        10    56 #> 6 f     j     l     m        17    49 #> 7 g     i     l     g        14    52 #> 8 h     j     l     h         6    60 d |> binom_contingency(dv, !starts_with(\"iv\")) ## Here, negation excludes all explanatory factors #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 1 × 2 #>      pn    qn #> * <int> <int> #> 1   149   379  rm(d)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/chsqfish.html","id":null,"dir":"Reference","previous_headings":"","what":"Chi-Squared or Fisher's Exact Test — chsqfish","title":"Chi-Squared or Fisher's Exact Test — chsqfish","text":"Test input data using Chi-squared Fisher's exact test appropriate.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/chsqfish.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chi-Squared or Fisher's Exact Test — chsqfish","text":"","code":"chsqfish(...)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/chsqfish.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chi-Squared or Fisher's Exact Test — chsqfish","text":"... vector, matrix, data frame valid input chisq.test","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/chsqfish.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chi-Squared or Fisher's Exact Test — chsqfish","text":"list containing observed expected values result either chisq.test() fisher.test(), appropriate.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/chsqfish.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Chi-Squared or Fisher's Exact Test — chsqfish","text":"Uses chisq.test() calculate expected values applies Chi-squared test expected values 5 greater, otherwise applies fisher.test().","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/chsqfish.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chi-Squared or Fisher's Exact Test — chsqfish","text":"","code":"(t <- bernoulli_data(2, 50, c(0.6, 0.4)) |>   contingency_table(dv, iv, .rownames = TRUE)) #>    0  1 #> a 20 30 #> b 32 18  t |> chsqfish() #> $observed #>    0  1 #> a 20 30 #> b 32 18 #>  #> $expected #>    0  1 #> a 26 24 #> b 26 24 #>  #> $test #>  #> \tPearson's Chi-squared test with Yates' continuity correction #>  #> data:  t #> X-squared = 4.8478, df = 1, p-value = 0.02768 #>  #>  #> attr(,\"class\") #> [1] \"chsqfish\"  (t <- bernoulli_data(3, 10, c(0.8, 0.5, 0.2)) |>   contingency_table(dv, iv, .rownames = TRUE)) #>   0 1 #> a 5 5 #> b 5 5 #> c 8 2  t |> chsqfish() #> Warning: Chi-squared approximation may be incorrect #> $observed #>   0 1 #> a 5 5 #> b 5 5 #> c 8 2 #>  #> $expected #>   0 1 #> a 6 4 #> b 6 4 #> c 6 4 #>  #> $test #>  #> \tFisher's Exact Test for Count Data with simulated p-value (based on #> \t2000 replicates) #>  #> data:  chsq$observed #> p-value = 0.3428 #> alternative hypothesis: two.sided #>  #>  #> attr(,\"class\") #> [1] \"chsqfish\"  rm(t)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/comp_glm.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Series of Nested GLMs — comp_glm","title":"Compare Series of Nested GLMs — comp_glm","text":"Compare series nested Bernoulli binomial GLMs supplying data, dependent variable list terms representing right-hand side series model formulae.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/comp_glm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Series of Nested GLMs — comp_glm","text":"","code":"comp_glm(.data, .dep_var, ..., .family = binomial, .arrange_by = desc(AIC))"},{"path":"https://mark-eis.github.io/ParaAnita/reference/comp_glm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Series of Nested GLMs — comp_glm","text":".data data frame, data frame extension (e.g. tibble). .dep_var <data-masking> quoted name binary dependent variable used LHS model formula; numeric values 0 1, two-column matrix columns giving numbers successes failures e.g., cbind(pn, qn). ... <dynamic-dots> RHS number model formulae compared, based independent variables .data. .family description error distribution link function used model. Can character string naming family function, family function result call family function; default binomial. .arrange_by <data-masking> quoted name column ordering results. Use desc sort variable descending order; default desc(AIC).","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/comp_glm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Series of Nested GLMs — comp_glm","text":"object classes \"comp_glm\", \"announce\", inheriting tibble hence \"data.frame\", columns including RHS model formula, glm object eight goodness--fit measures output glance.glm, follows: - f_rhs right-hand side formula supplied ... argument. .glm list-column containing glm model objects. AIC Akaike's Information Criterion. BIC Bayesian Information Criterion. deviance Deviance model. df.null Degrees freedom null model. df.residual Residual degrees freedom. logLik log-likelihood model. nobs Number observations. null.deviance Deviance null model.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/comp_glm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare Series of Nested GLMs — comp_glm","text":"comp_glm() builds formulas dependent variable formula right-hand side, calls glm, saves resulting objects class \"glm\" list column tibble, together model fit information obtained using glance.glm broom package. output may ordered selected column, otherwise default descending order Akaike's Information Criterion (AIC). comp_glm() may used conveniently compare series related binomial GLMs based different groupings factors added .data using add_grps.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/comp_glm.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compare Series of Nested GLMs — comp_glm","text":"user's responsibility check models suitably nested ensure meaningful comparisons.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/comp_glm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Series of Nested GLMs — comp_glm","text":"","code":"## Simulate Bernoulli data  (d <- list(         iv2 = list(g = c(\"a\", \"c\", \"e\"), h = c(\"b\", \"d\", \"f\")),         iv3 = list(i = c(\"a\", \"b\", \"c\"), j = c(\"d\", \"e\", \"f\")),         iv4 = list(k = c(\"a\", \"b\"), l = c(\"c\", \"d\"), m = c(\"e\", \"f\"))     ) |> add_grps(bernoulli_data(levels = 6), iv, .key = _)) #> ___________________________ #> Simulated Bernoulli Data: - #>  #> # A tibble: 396 × 5 #>    iv    iv2   iv3   iv4      dv #>    <fct> <fct> <fct> <fct> <int> #>  1 a     g     i     k         0 #>  2 a     g     i     k         0 #>  3 a     g     i     k         0 #>  4 a     g     i     k         0 #>  5 a     g     i     k         0 #>  6 a     g     i     k         0 #>  7 a     g     i     k         0 #>  8 a     g     i     k         1 #>  9 a     g     i     k         0 #> 10 a     g     i     k         1 #> # ℹ 386 more rows  ## Models arranged in descending order of AIC by default. d |> comp_glm(dv, iv, iv2, iv3, iv4) #> ______________________ #> Compare Nested GLMs: - #>  #> # A tibble: 4 × 10 #>   f_rhs .glm       null.deviance df.null logLik   AIC   BIC deviance df.residual #> * <chr> <named li>         <dbl>   <int>  <dbl> <dbl> <dbl>    <dbl>       <int> #> 1 iv2   <glm>               494.     395  -245.  494.  502.     490.         394 #> 2 iv    <glm>               494.     395  -236.  484.  508.     472.         390 #> 3 iv4   <glm>               494.     395  -238.  482.  494.     476.         393 #> 4 iv3   <glm>               494.     395  -239.  482.  490.     478.         394 #> # ℹ 1 more variable: nobs <int>  ## Arrange models by formula right-hand side  (comps <- d |> comp_glm(dv, iv, iv2, iv3, iv4, .arrange_by = f_rhs)) #> ______________________ #> Compare Nested GLMs: - #>  #> # A tibble: 4 × 10 #>   f_rhs .glm       null.deviance df.null logLik   AIC   BIC deviance df.residual #> * <chr> <named li>         <dbl>   <int>  <dbl> <dbl> <dbl>    <dbl>       <int> #> 1 iv    <glm>               494.     395  -236.  484.  508.     472.         390 #> 2 iv2   <glm>               494.     395  -245.  494.  502.     490.         394 #> 3 iv3   <glm>               494.     395  -239.  482.  490.     478.         394 #> 4 iv4   <glm>               494.     395  -238.  482.  494.     476.         393 #> # ℹ 1 more variable: nobs <int>  ## Inspect components of .glm list-column lapply(comps$.glm, formula) #> $iv #> dv ~ iv #> <environment: 0x55f5d1ff2f98> #>  #> $iv2 #> dv ~ iv2 #> <environment: 0x55f5d1ff2f98> #>  #> $iv3 #> dv ~ iv3 #> <environment: 0x55f5d1ff2f98> #>  #> $iv4 #> dv ~ iv4 #> <environment: 0x55f5d1ff2f98> #>   lapply(comps$.glm, summary) #> $iv #>  #> Call: #> glm(formula = new_formula(get_expr(.dep_var), get_expr(x), quo_get_env(x)),  #>     family = .family, data = .data) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  -0.3677     0.2504  -1.469 0.141885     #> ivb          -0.1270     0.3565  -0.356 0.721695     #> ivc           0.1241     0.3524   0.352 0.724717     #> ivd          -0.4652     0.3666  -1.269 0.204508     #> ive          -0.8561     0.3859  -2.218 0.026550 *   #> ivf          -1.4781     0.4374  -3.379 0.000727 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 493.85  on 395  degrees of freedom #> Residual deviance: 471.70  on 390  degrees of freedom #> AIC: 483.7 #>  #> Number of Fisher Scoring iterations: 4 #>  #>  #> $iv2 #>  #> Call: #> glm(formula = new_formula(get_expr(.dep_var), get_expr(x), quo_get_env(x)),  #>     family = .family, data = .data) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  -0.5815     0.1482  -3.924  8.7e-05 *** #> iv2h         -0.3993     0.2178  -1.834   0.0667 .   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 493.85  on 395  degrees of freedom #> Residual deviance: 490.47  on 394  degrees of freedom #> AIC: 494.47 #>  #> Number of Fisher Scoring iterations: 4 #>  #>  #> $iv3 #>  #> Call: #> glm(formula = new_formula(get_expr(.dep_var), get_expr(x), quo_get_env(x)),  #>     family = .family, data = .data) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  -0.3677     0.1445  -2.544    0.011 *   #> iv3j         -0.8850     0.2239  -3.954  7.7e-05 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 493.85  on 395  degrees of freedom #> Residual deviance: 477.67  on 394  degrees of freedom #> AIC: 481.67 #>  #> Number of Fisher Scoring iterations: 4 #>  #>  #> $iv4 #>  #> Call: #> glm(formula = new_formula(get_expr(.dep_var), get_expr(x), quo_get_env(x)),  #>     family = .family, data = .data) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept) -0.43078    0.17813  -2.418 0.015591 *   #> iv4l        -0.09624    0.25335  -0.380 0.704052     #> iv4m        -1.07329    0.28750  -3.733 0.000189 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 493.85  on 395  degrees of freedom #> Residual deviance: 476.31  on 393  degrees of freedom #> AIC: 482.31 #>  #> Number of Fisher Scoring iterations: 4 #>  #>   ## Convert to binomial data using binom_contingency() (d <- d |> binom_contingency(dv)) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 6 × 6 #>   iv    iv2   iv3   iv4      pn    qn #> * <fct> <fct> <fct> <fct> <int> <int> #> 1 a     g     i     k        27    39 #> 2 b     h     i     k        25    41 #> 3 c     g     i     l        29    37 #> 4 d     h     j     l        20    46 #> 5 e     g     j     m        15    51 #> 6 f     h     j     m         9    57  (comps <- d |> comp_glm(cbind(pn, qn), iv, iv2, iv3, iv4)) #> ______________________ #> Compare Nested GLMs: - #>  #> # A tibble: 4 × 10 #>   f_rhs .glm       null.deviance df.null logLik   AIC   BIC deviance df.residual #> * <chr> <named li>         <dbl>   <int>  <dbl> <dbl> <dbl>    <dbl>       <int> #> 1 iv2   <glm>               22.2       5  -22.6  49.3  48.9 1.88e+ 1           4 #> 2 iv    <glm>               22.2       5  -13.3  38.5  37.3 4.66e-15           0 #> 3 iv4   <glm>               22.2       5  -15.6  37.1  36.5 4.62e+ 0           3 #> 4 iv3   <glm>               22.2       5  -16.3  36.5  36.1 5.97e+ 0           4 #> # ℹ 1 more variable: nobs <int>  ## Inspect components of .glm list-column lapply(comps$.glm, formula) #> $iv2 #> cbind(pn, qn) ~ iv2 #> <environment: 0x55f5d1ff2f98> #>  #> $iv #> cbind(pn, qn) ~ iv #> <environment: 0x55f5d1ff2f98> #>  #> $iv4 #> cbind(pn, qn) ~ iv4 #> <environment: 0x55f5d1ff2f98> #>  #> $iv3 #> cbind(pn, qn) ~ iv3 #> <environment: 0x55f5d1ff2f98> #>   lapply(comps$.glm, summary) #> $iv2 #>  #> Call: #> glm(formula = new_formula(get_expr(.dep_var), get_expr(x), quo_get_env(x)),  #>     family = .family, data = .data) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  -0.5815     0.1482  -3.924  8.7e-05 *** #> iv2h         -0.3993     0.2178  -1.834   0.0667 .   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 22.157  on 5  degrees of freedom #> Residual deviance: 18.771  on 4  degrees of freedom #> AIC: 49.299 #>  #> Number of Fisher Scoring iterations: 4 #>  #>  #> $iv #>  #> Call: #> glm(formula = new_formula(get_expr(.dep_var), get_expr(x), quo_get_env(x)),  #>     family = .family, data = .data) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  -0.3677     0.2504  -1.469 0.141885     #> ivb          -0.1270     0.3565  -0.356 0.721695     #> ivc           0.1241     0.3524   0.352 0.724717     #> ivd          -0.4652     0.3666  -1.269 0.204508     #> ive          -0.8561     0.3859  -2.218 0.026550 *   #> ivf          -1.4781     0.4374  -3.379 0.000727 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 2.2157e+01  on 5  degrees of freedom #> Residual deviance: 4.6629e-15  on 0  degrees of freedom #> AIC: 38.528 #>  #> Number of Fisher Scoring iterations: 3 #>  #>  #> $iv4 #>  #> Call: #> glm(formula = new_formula(get_expr(.dep_var), get_expr(x), quo_get_env(x)),  #>     family = .family, data = .data) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept) -0.43078    0.17813  -2.418 0.015591 *   #> iv4l        -0.09624    0.25335  -0.380 0.704052     #> iv4m        -1.07329    0.28750  -3.733 0.000189 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 22.1574  on 5  degrees of freedom #> Residual deviance:  4.6168  on 3  degrees of freedom #> AIC: 37.145 #>  #> Number of Fisher Scoring iterations: 4 #>  #>  #> $iv3 #>  #> Call: #> glm(formula = new_formula(get_expr(.dep_var), get_expr(x), quo_get_env(x)),  #>     family = .family, data = .data) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  -0.3677     0.1445  -2.544    0.011 *   #> iv3j         -0.8850     0.2239  -3.954  7.7e-05 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 22.1574  on 5  degrees of freedom #> Residual deviance:  5.9721  on 4  degrees of freedom #> AIC: 36.5 #>  #> Number of Fisher Scoring iterations: 4 #>  #>   rm(comps, d)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/contingency_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Contingency Tables for Two or More Categorical Variables — contingency_table","title":"Contingency Tables for Two or More Categorical Variables — contingency_table","text":"contingency_table() compiles contingency table two categorical variables, first typically outcome (dependent) varable used column headings, remainder typically explanatory (independent) variables appear contingency table either factors optionally row headings. xcontingency_table() compiles contingency table categorical outcome varable multiple categorical explanatory variables “crossed” obtain single explanatory factor.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/contingency_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Contingency Tables for Two or More Categorical Variables — contingency_table","text":"","code":"contingency_table(.data, .dep_var, ..., .wt = NULL, .rownames = FALSE)  xcontingency_table(   .data,   .dep_var,   ...,   .crossname = NULL,   .wt = NULL,   .rownames = FALSE )"},{"path":"https://mark-eis.github.io/ParaAnita/reference/contingency_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Contingency Tables for Two or More Categorical Variables — contingency_table","text":".data data frame, data frame extension (e.g. tibble). .dep_var <data-masking> quoted name dependent variable, may character vector, factor, numeric. ... <tidy-select> quoted name(s) one factors character vectors .data, included (excluded) output. .wt frequency weights, either NULL (default) quoted name numeric variable. NULL, number rows unique combination dependent independent variables counted. quoted name numeric variable representing frequency weights, summated unique combination dependent independent variables. .rownames logical. TRUE, value data frame levels first (crossed) independent variable row names, rather tibble; default FALSE. .crossname character string used name column crossed variables. omitted, names crossed variables used combined “snake case”.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/contingency_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Contingency Tables for Two or More Categorical Variables — contingency_table","text":"contingency_table(), object class \"contingency_table\", \"announce\", inheriting tibble, data.frame, depending whether .rownames = FALSE (default) TRUE. Similarly xcontingency_table(), object class \"xcontingency_table\", \"announce\" inheriting tibble data.frame, depending value rownames.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/contingency_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Contingency Tables for Two or More Categorical Variables — contingency_table","text":"Categorical variables (.e. factors character vectors) .data required factors resulting contingency table may selected inclusion exclusion using ... argument <tidy-select> syntax package dplyr, including use “selection helpers”. ... arguments supplied, categorical variables .data (.dep_var) used. list defused R expressions, instance created expl_fcts(), may used ... arguments injected using splice-operator, !!!, see examples. .rownames = TRUE, resulting contingency table conventional data.frame rather tibble first categorical variable (.dep_var) used row headings rather factor. row headings allows result passed argument chisq.test(), fisher.test() chsqfish(), e.g., conveniently using |> piped sequence (see examples). However, using .rownames = TRUE contingency table one explanatory (independent) variable likely result error message “duplicate 'row.names' allowed”, case xcontingency_table() used instead. Multiple categorical explanatory variables contingency table compiled xcontingency_table() “crossed” using fct_cross().","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/contingency_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Contingency Tables for Two or More Categorical Variables — contingency_table","text":"","code":"(d <- tibble(     iv = letters[1:4] |> sample(10, replace = TRUE),     dv = c(0L:3L) |> sample(10, replace = TRUE) )) #> # A tibble: 10 × 2 #>    iv       dv #>    <chr> <int> #>  1 b         3 #>  2 d         3 #>  3 c         3 #>  4 b         1 #>  5 a         1 #>  6 b         2 #>  7 b         0 #>  8 d         2 #>  9 b         2 #> 10 a         2  d |> contingency_table(dv) #> ____________________ #> Contingency Table: - #>  #> # A tibble: 4 × 5 #>   iv      `3`   `1`   `2`   `0` #> * <chr> <int> <int> <int> <int> #> 1 b         1     1     2     1 #> 2 d         1     0     1     0 #> 3 c         1     0     0     0 #> 4 a         0     1     1     0 d |> contingency_table(dv, .rownames = TRUE) #>   3 1 2 0 #> b 1 1 2 1 #> d 1 0 1 0 #> c 1 0 0 0 #> a 0 1 1 0  (d <- tibble(     iv = letters[1:4] |> sample(10, replace = TRUE) |> as.factor(),     dv = c(\"Success\", \"Fail\", \"Borderline\")  |> sample(10, replace = TRUE)   )) #> # A tibble: 10 × 2 #>    iv    dv         #>    <fct> <chr>      #>  1 c     Borderline #>  2 c     Success    #>  3 a     Success    #>  4 c     Fail       #>  5 c     Fail       #>  6 d     Fail       #>  7 d     Success    #>  8 a     Borderline #>  9 d     Borderline #> 10 d     Borderline  d |> contingency_table(dv) #> ____________________ #> Contingency Table: - #>  #> # A tibble: 3 × 4 #>   iv    Borderline Success  Fail #> * <fct>      <int>   <int> <int> #> 1 c              1       1     2 #> 2 a              1       1     0 #> 3 d              2       1     1 d |> contingency_table(dv, .rownames = TRUE) #>   Borderline Success Fail #> c          1       1    2 #> a          1       1    0 #> d          2       1    1  (d <- tibble(     iv = letters[1:4] |> sample(100, replace = TRUE),     dv = c(\"Success\", \"Fail\", \"Borderline\")  |> sample(100, replace = TRUE)   ) |> count(iv, dv)) #> # A tibble: 12 × 3 #>    iv    dv             n #>    <chr> <chr>      <int> #>  1 a     Borderline     9 #>  2 a     Fail           6 #>  3 a     Success        6 #>  4 b     Borderline     8 #>  5 b     Fail           5 #>  6 b     Success        8 #>  7 c     Borderline    14 #>  8 c     Fail           9 #>  9 c     Success       10 #> 10 d     Borderline     8 #> 11 d     Fail          11 #> 12 d     Success        6  d |> contingency_table(dv, .wt = n) #> ____________________ #> Contingency Table: - #>  #> # A tibble: 4 × 4 #>   iv    Borderline  Fail Success #> * <chr>      <int> <int>   <int> #> 1 a              9     6       6 #> 2 b              8     5       8 #> 3 c             14     9      10 #> 4 d              8    11       6 d |> contingency_table(dv, .wt = n, .rownames = TRUE) |> print_lf() |> chisq.test() #>   Borderline Fail Success #> a          9    6       6 #> b          8    5       8 #> c         14    9      10 #> d          8   11       6 #>  #>  #> \tPearson's Chi-squared test #>  #> data:  print_lf(contingency_table(d, dv, .wt = n, .rownames = TRUE)) #> X-squared = 3.1729, df = 6, p-value = 0.7869 #>   rm(d)  ## Using gss_cat dataset from {forcats} package # \\dontshow{   if (!requireNamespace(\"forcats\", quietly = TRUE))      warning(\"package 'forcats' must be installed\")   try(gss_cat <- forcats::gss_cat) # }  gss_cat |> contingency_table(race, relig, denom) #> ____________________ #> Contingency Table: - #>  #> # A tibble: 47 × 5 #>    relig              denom             White Black Other #>  * <fct>              <fct>             <int> <int> <int> #>  1 Protestant         Southern baptist   1151   355    30 #>  2 Protestant         Baptist-dk which    723   697    37 #>  3 Protestant         No denomination    1020   149    55 #>  4 Orthodox-christian Not applicable       92     2     1 #>  5 None               Not applicable     2816   384   323 #>  6 Christian          Not applicable      147    49    28 #>  7 Protestant         Lutheran-mo synod   208     2     2 #>  8 Protestant         Other              1886   468   180 #>  9 Protestant         United methodist   1007    49    11 #> 10 Jewish             Not applicable      370    10     8 #> # ℹ 37 more rows gss_cat |> contingency_table(race, !c(marital, rincome:partyid)) #> ____________________ #> Contingency Table: - #>  #> # A tibble: 47 × 5 #>    relig              denom             White Black Other #>  * <fct>              <fct>             <int> <int> <int> #>  1 Protestant         Southern baptist   1151   355    30 #>  2 Protestant         Baptist-dk which    723   697    37 #>  3 Protestant         No denomination    1020   149    55 #>  4 Orthodox-christian Not applicable       92     2     1 #>  5 None               Not applicable     2816   384   323 #>  6 Christian          Not applicable      147    49    28 #>  7 Protestant         Lutheran-mo synod   208     2     2 #>  8 Protestant         Other              1886   468   180 #>  9 Protestant         United methodist   1007    49    11 #> 10 Jewish             Not applicable      370    10     8 #> # ℹ 37 more rows  if (FALSE) {   gss_cat |> contingency_table(race, relig, denom, .rownames = TRUE)    ## gives error message \"duplicate 'row.names' are not allowed\";   ## use xcontingency_table() instead }  gss_cat |> xcontingency_table(race, relig, denom) #> ____________________________ #> Crossed Contingency Table: - #>  #> # A tibble: 47 × 4 #>    relig_denom                       White Black Other #>  * <fct>                             <int> <int> <int> #>  1 Protestant:Southern baptist        1151   355    30 #>  2 Protestant:Baptist-dk which         723   697    37 #>  3 Protestant:No denomination         1020   149    55 #>  4 Orthodox-christian:Not applicable    92     2     1 #>  5 None:Not applicable                2816   384   323 #>  6 Christian:Not applicable            147    49    28 #>  7 Protestant:Lutheran-mo synod        208     2     2 #>  8 Protestant:Other                   1886   468   180 #>  9 Protestant:United methodist        1007    49    11 #> 10 Jewish:Not applicable               370    10     8 #> # ℹ 37 more rows gss_cat |> xcontingency_table(race, !c(marital, rincome:partyid)) #> ____________________________ #> Crossed Contingency Table: - #>  #> # A tibble: 47 × 4 #>    relig_denom                       White Black Other #>  * <fct>                             <int> <int> <int> #>  1 Protestant:Southern baptist        1151   355    30 #>  2 Protestant:Baptist-dk which         723   697    37 #>  3 Protestant:No denomination         1020   149    55 #>  4 Orthodox-christian:Not applicable    92     2     1 #>  5 None:Not applicable                2816   384   323 #>  6 Christian:Not applicable            147    49    28 #>  7 Protestant:Lutheran-mo synod        208     2     2 #>  8 Protestant:Other                   1886   468   180 #>  9 Protestant:United methodist        1007    49    11 #> 10 Jewish:Not applicable               370    10     8 #> # ℹ 37 more rows gss_cat |> xcontingency_table(race, relig, denom, .crossname = \"Denomination\") #> ____________________________ #> Crossed Contingency Table: - #>  #> # A tibble: 47 × 4 #>    Denomination                      White Black Other #>  * <fct>                             <int> <int> <int> #>  1 Protestant:Southern baptist        1151   355    30 #>  2 Protestant:Baptist-dk which         723   697    37 #>  3 Protestant:No denomination         1020   149    55 #>  4 Orthodox-christian:Not applicable    92     2     1 #>  5 None:Not applicable                2816   384   323 #>  6 Christian:Not applicable            147    49    28 #>  7 Protestant:Lutheran-mo synod        208     2     2 #>  8 Protestant:Other                   1886   468   180 #>  9 Protestant:United methodist        1007    49    11 #> 10 Jewish:Not applicable               370    10     8 #> # ℹ 37 more rows gss_cat |> xcontingency_table(race, relig, denom, .rownames = TRUE) |> head(10) #>                                   White Black Other #> Protestant:Southern baptist        1151   355    30 #> Protestant:Baptist-dk which         723   697    37 #> Protestant:No denomination         1020   149    55 #> Orthodox-christian:Not applicable    92     2     1 #> None:Not applicable                2816   384   323 #> Christian:Not applicable            147    49    28 #> Protestant:Lutheran-mo synod        208     2     2 #> Protestant:Other                   1886   468   180 #> Protestant:United methodist        1007    49    11 #> Jewish:Not applicable               370    10     8  ## Two more esoteric examples ivars <- quos(relig, denom) gss_cat |> contingency_table(race, !!!ivars) #> ____________________ #> Contingency Table: - #>  #> # A tibble: 47 × 5 #>    relig              denom             White Black Other #>  * <fct>              <fct>             <int> <int> <int> #>  1 Protestant         Southern baptist   1151   355    30 #>  2 Protestant         Baptist-dk which    723   697    37 #>  3 Protestant         No denomination    1020   149    55 #>  4 Orthodox-christian Not applicable       92     2     1 #>  5 None               Not applicable     2816   384   323 #>  6 Christian          Not applicable      147    49    28 #>  7 Protestant         Lutheran-mo synod   208     2     2 #>  8 Protestant         Other              1886   468   180 #>  9 Protestant         United methodist   1007    49    11 #> 10 Jewish             Not applicable      370    10     8 #> # ℹ 37 more rows  ivars <- c(\"relig\", \"denom\") gss_cat |> contingency_table(race, any_of(ivars)) #> ____________________ #> Contingency Table: - #>  #> # A tibble: 47 × 5 #>    relig              denom             White Black Other #>  * <fct>              <fct>             <int> <int> <int> #>  1 Protestant         Southern baptist   1151   355    30 #>  2 Protestant         Baptist-dk which    723   697    37 #>  3 Protestant         No denomination    1020   149    55 #>  4 Orthodox-christian Not applicable       92     2     1 #>  5 None               Not applicable     2816   384   323 #>  6 Christian          Not applicable      147    49    28 #>  7 Protestant         Lutheran-mo synod   208     2     2 #>  8 Protestant         Other              1886   468   180 #>  9 Protestant         United methodist   1007    49    11 #> 10 Jewish             Not applicable      370    10     8 #> # ℹ 37 more rows  rm(ivars)  # \\dontshow{   rm(gss_cat) # }"},{"path":"https://mark-eis.github.io/ParaAnita/reference/contr_colnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and Set Contrast Matrix Column Names — contr_colnames","title":"Get and Set Contrast Matrix Column Names — contr_colnames","text":"Set view column names contrasts associated factor.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/contr_colnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and Set Contrast Matrix Column Names — contr_colnames","text":"","code":"contr_colnames(x)  contr_colnames(x) <- value  contr_colpfx(x) <- value"},{"path":"https://mark-eis.github.io/ParaAnita/reference/contr_colnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and Set Contrast Matrix Column Names — contr_colnames","text":"x factor contrast column headings set viewed. value character vector containing contrast column names, length equal number contrasts; case contr_colpfx()<- character string used prefix existing contrast column names.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/contr_colnames.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get and Set Contrast Matrix Column Names — contr_colnames","text":"contr_colnames() returns current column names contrasts factor. contr_colnames()<- sets column names contrasts factor. cntr_pfx()<- prefixes current column names contrasts factor character string provided. can useful factor levels elided factor name , instance, printed output summary.glm. contrasts set x, contr_colnames()<- cntr_pfx()<- set contrast attribute using default function options(\"contrasts\") modifying column names.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/contr_colnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get and Set Contrast Matrix Column Names — contr_colnames","text":"","code":"(d <- data.frame(   f = gl(5, 5, labels = LETTERS[1:5]),   dv = sample(c(0,1), 25, replace = TRUE) )) #>    f dv #> 1  A  0 #> 2  A  0 #> 3  A  0 #> 4  A  1 #> 5  A  1 #> 6  B  0 #> 7  B  1 #> 8  B  1 #> 9  B  0 #> 10 B  0 #> 11 C  0 #> 12 C  1 #> 13 C  1 #> 14 C  0 #> 15 C  1 #> 16 D  1 #> 17 D  0 #> 18 D  1 #> 19 D  1 #> 20 D  0 #> 21 E  0 #> 22 E  0 #> 23 E  0 #> 24 E  0 #> 25 E  0  contrasts(d$f) <- contr.helmert contrasts(d$f) #>   [,1] [,2] [,3] [,4] #> A   -1   -1   -1   -1 #> B    1   -1   -1   -1 #> C    0    2   -1   -1 #> D    0    0    3   -1 #> E    0    0    0    4 contr_colnames(d$f) #> NULL glm(dv ~ f, family = binomial, data = d) |> summary() #>  #> Call: #> glm(formula = dv ~ f, family = binomial, data = d) #>  #> Coefficients: #>               Estimate Std. Error z value Pr(>|z|) #> (Intercept) -3.713e+00  5.834e+02  -0.006    0.995 #> f1          -2.012e-16  6.455e-01   0.000    1.000 #> f2           2.703e-01  3.727e-01   0.725    0.468 #> f3           1.352e-01  2.635e-01   0.513    0.608 #> f4          -3.713e+00  5.834e+02  -0.006    0.995 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 33.651  on 24  degrees of freedom #> Residual deviance: 26.920  on 20  degrees of freedom #> AIC: 36.92 #>  #> Number of Fisher Scoring iterations: 17 #>   contr_colnames(d$f) <- c(\"A v. B\", \"AB v. C\", \"ABC v. D\", \"ABCD v. E\") contr_colnames(d$f) #> [1] \"A v. B\"    \"AB v. C\"   \"ABC v. D\"  \"ABCD v. E\" contrasts(d$f) #>   A v. B AB v. C ABC v. D ABCD v. E #> A     -1      -1       -1        -1 #> B      1      -1       -1        -1 #> C      0       2       -1        -1 #> D      0       0        3        -1 #> E      0       0        0         4 glm(dv ~ f, family = binomial, data = d) |> summary() #>  #> Call: #> glm(formula = dv ~ f, family = binomial, data = d) #>  #> Coefficients: #>               Estimate Std. Error z value Pr(>|z|) #> (Intercept) -3.713e+00  5.834e+02  -0.006    0.995 #> fA v. B     -2.012e-16  6.455e-01   0.000    1.000 #> fAB v. C     2.703e-01  3.727e-01   0.725    0.468 #> fABC v. D    1.352e-01  2.635e-01   0.513    0.608 #> fABCD v. E  -3.713e+00  5.834e+02  -0.006    0.995 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 33.651  on 24  degrees of freedom #> Residual deviance: 26.920  on 20  degrees of freedom #> AIC: 36.92 #>  #> Number of Fisher Scoring iterations: 17 #>   contr_colpfx(d$f) <- \": \" contr_colnames(d$f) #> [1] \": A v. B\"    \": AB v. C\"   \": ABC v. D\"  \": ABCD v. E\" glm(dv ~ f, family = binomial, data = d) |> summary() #>  #> Call: #> glm(formula = dv ~ f, family = binomial, data = d) #>  #> Coefficients: #>                Estimate Std. Error z value Pr(>|z|) #> (Intercept)  -3.713e+00  5.834e+02  -0.006    0.995 #> f: A v. B    -2.012e-16  6.455e-01   0.000    1.000 #> f: AB v. C    2.703e-01  3.727e-01   0.725    0.468 #> f: ABC v. D   1.352e-01  2.635e-01   0.513    0.608 #> f: ABCD v. E -3.713e+00  5.834e+02  -0.006    0.995 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 33.651  on 24  degrees of freedom #> Residual deviance: 26.920  on 20  degrees of freedom #> AIC: 36.92 #>  #> Number of Fisher Scoring iterations: 17 #>   rm(d)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/expl_fcts.html","id":null,"dir":"Reference","previous_headings":"","what":"Explanatory Factors in Data as List of Expressions — expl_fcts","title":"Explanatory Factors in Data as List of Expressions — expl_fcts","text":"Create list defused expressions representing names selection explanatory factors character vectors dataset.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/expl_fcts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explanatory Factors in Data as List of Expressions — expl_fcts","text":"","code":"expl_fcts(.data, ..., .named = FALSE, .syms = TRUE)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/expl_fcts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explanatory Factors in Data as List of Expressions — expl_fcts","text":".data data frame, data frame extension (e.g. tibble). ... <tidy-select> quoted name(s) one factors character vectors .data, included (excluded) output. .named logical, whether name elements list. TRUE, unnamed inputs automatically named as_label(); default FALSE. .syms logical. FALSE, character vector returned rather list symbols; default TRUE.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/expl_fcts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Explanatory Factors in Data as List of Expressions — expl_fcts","text":"list symbols representing names selected explanatory factors character vectors .data; unless .syms = FALSE, case selected names returned character vector instead.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/expl_fcts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Explanatory Factors in Data as List of Expressions — expl_fcts","text":"default, expl_fcts() creates list symbols .e., defused R expressions, representing names selection explanatory factors (character vectors) .data, using syms package rlang. Alternatively, .syms = FALSE, character vector names explanatory factors (character vectors) .data returned instead. Variables .data may selected inclusion exclusion using ... argument <tidy-select> syntax package dplyr, including use “selection helpers”. ... arguments supplied, categorical variables .data included list. list symbols returned expl_fcts() may “injected” ... arguments contingency_table(), xcontingency_table(), binom_contingency() similar functions, using splice-operator !!!. .syms = TRUE, functions all_of any_of used wrap resulting character vector names instead using !!!. list symbols returned expl_fcts() may also used provide list argument injection support purrr package map functions, using injection-operator !! (see examples).","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/expl_fcts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Explanatory Factors in Data as List of Expressions — expl_fcts","text":"","code":"(d <- list(     iv2 = list(g = c(\"a\", \"c\", \"e\"), h = c(\"b\", \"d\", \"f\")),     iv3 = list(i = c(\"a\", \"b\", \"c\"), j = c(\"d\", \"e\", \"f\")),     iv4 = list(k = c(\"a\", \"b\"), l = c(\"c\", \"d\"), m = c(\"e\", \"f\")) ) |> add_grps(bernoulli_data(levels = 6), iv, .key = _)) #> ___________________________ #> Simulated Bernoulli Data: - #>  #> # A tibble: 396 × 5 #>    iv    iv2   iv3   iv4      dv #>    <fct> <fct> <fct> <fct> <int> #>  1 a     g     i     k         0 #>  2 a     g     i     k         0 #>  3 a     g     i     k         0 #>  4 a     g     i     k         1 #>  5 a     g     i     k         0 #>  6 a     g     i     k         1 #>  7 a     g     i     k         1 #>  8 a     g     i     k         1 #>  9 a     g     i     k         0 #> 10 a     g     i     k         0 #> # ℹ 386 more rows  d |> expl_fcts() #> [[1]] #> iv #>  #> [[2]] #> iv2 #>  #> [[3]] #> iv3 #>  #> [[4]] #> iv4 #>  d |> expl_fcts(.named = TRUE) #> $iv #> iv #>  #> $iv2 #> iv2 #>  #> $iv3 #> iv3 #>  #> $iv4 #> iv4 #>  d |> expl_fcts(.syms = FALSE) #> [1] \"iv\"  \"iv2\" \"iv3\" \"iv4\" d |> expl_fcts(.named = TRUE, .syms = FALSE) #>    iv   iv2   iv3   iv4  #>  \"iv\" \"iv2\" \"iv3\" \"iv4\"   ## Select or exclude factors d |> expl_fcts(iv, iv3) #> [[1]] #> iv #>  #> [[2]] #> iv3 #>  d |> expl_fcts(!c(iv, iv3)) #> [[1]] #> iv2 #>  #> [[2]] #> iv4 #>   ## Use {dplyr} selection helpers e.g., last_col(), num_range() and starts_with() d |> expl_fcts(last_col(1L))  ## Offset of 1L used, since last column of d is dv #> [[1]] #> iv4 #>  d |> expl_fcts(!last_col()) #> [[1]] #> iv #>  #> [[2]] #> iv2 #>  #> [[3]] #> iv3 #>  #> [[4]] #> iv4 #>  d |> expl_fcts(num_range(\"iv\", 2:3)) #> [[1]] #> iv2 #>  #> [[2]] #> iv3 #>  d |> expl_fcts(!num_range(\"iv\", 2:3)) #> [[1]] #> iv #>  #> [[2]] #> iv4 #>  d |> expl_fcts(starts_with(\"iv\")) #> [[1]] #> iv #>  #> [[2]] #> iv2 #>  #> [[3]] #> iv3 #>  #> [[4]] #> iv4 #>  ## Negation of selection helper excludes all explanatory factors d |> expl_fcts(!starts_with(\"iv\")) #> list()  ## In following three examples, each triplet should give identical results ## Include all explanatory factors d |> binom_contingency(dv) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 6 × 6 #>   iv    iv2   iv3   iv4      pn    qn #> * <fct> <fct> <fct> <fct> <int> <int> #> 1 a     g     i     k        32    34 #> 2 b     h     i     k        35    31 #> 3 c     g     i     l        27    39 #> 4 d     h     j     l        12    54 #> 5 e     g     j     m        10    56 #> 6 f     h     j     m        10    56 d |> binom_contingency(dv, !!!expl_fcts(d)) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 6 × 6 #>   iv    iv2   iv3   iv4      pn    qn #> * <fct> <fct> <fct> <fct> <int> <int> #> 1 a     g     i     k        32    34 #> 2 b     h     i     k        35    31 #> 3 c     g     i     l        27    39 #> 4 d     h     j     l        12    54 #> 5 e     g     j     m        10    56 #> 6 f     h     j     m        10    56 d |> binom_contingency(dv, all_of(expl_fcts(d, .syms = FALSE))) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 6 × 6 #>   iv    iv2   iv3   iv4      pn    qn #> * <fct> <fct> <fct> <fct> <int> <int> #> 1 a     g     i     k        32    34 #> 2 b     h     i     k        35    31 #> 3 c     g     i     l        27    39 #> 4 d     h     j     l        12    54 #> 5 e     g     j     m        10    56 #> 6 f     h     j     m        10    56  ## Include only iv and iv3 d |> binom_contingency(dv, iv, iv3) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 6 × 4 #>   iv    iv3      pn    qn #> * <fct> <fct> <int> <int> #> 1 a     i        32    34 #> 2 b     i        35    31 #> 3 c     i        27    39 #> 4 d     j        12    54 #> 5 e     j        10    56 #> 6 f     j        10    56 d |> binom_contingency(dv, !!!expl_fcts(d, iv, iv3)) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 6 × 4 #>   iv    iv3      pn    qn #> * <fct> <fct> <int> <int> #> 1 a     i        32    34 #> 2 b     i        35    31 #> 3 c     i        27    39 #> 4 d     j        12    54 #> 5 e     j        10    56 #> 6 f     j        10    56 d |> binom_contingency(dv, all_of(expl_fcts(d, iv, iv3, .syms = FALSE))) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 6 × 4 #>   iv    iv3      pn    qn #> * <fct> <fct> <int> <int> #> 1 a     i        32    34 #> 2 b     i        35    31 #> 3 c     i        27    39 #> 4 d     j        12    54 #> 5 e     j        10    56 #> 6 f     j        10    56  ## Exclude iv and iv3 d |> binom_contingency(dv, !c(iv, iv3)) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 6 × 4 #>   iv2   iv4      pn    qn #> * <fct> <fct> <int> <int> #> 1 g     k        32    34 #> 2 h     k        35    31 #> 3 g     l        27    39 #> 4 h     l        12    54 #> 5 g     m        10    56 #> 6 h     m        10    56 d |> binom_contingency(dv, !!!expl_fcts(d, !c(iv, iv3))) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 6 × 4 #>   iv2   iv4      pn    qn #> * <fct> <fct> <int> <int> #> 1 g     k        32    34 #> 2 h     k        35    31 #> 3 g     l        27    39 #> 4 h     l        12    54 #> 5 g     m        10    56 #> 6 h     m        10    56 d |> binom_contingency(dv, all_of(expl_fcts(d, !c(iv, iv3), .syms = FALSE))) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 6 × 4 #>   iv2   iv4      pn    qn #> * <fct> <fct> <int> <int> #> 1 g     k        32    34 #> 2 h     k        35    31 #> 3 g     l        27    39 #> 4 h     l        12    54 #> 5 g     m        10    56 #> 6 h     m        10    56  ## Use with purr::map(), binom_contingency(), glm() and odds_ratio() expl_fcts(d, .named = TRUE) |>     map(\\(x) binom_contingency(d, dv, !!x)) #> $iv #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 6 × 3 #>   iv       pn    qn #> * <fct> <int> <int> #> 1 a        32    34 #> 2 b        35    31 #> 3 c        27    39 #> 4 d        12    54 #> 5 e        10    56 #> 6 f        10    56 #>  #> $iv2 #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 2 × 3 #>   iv2      pn    qn #> * <fct> <int> <int> #> 1 g        69   129 #> 2 h        57   141 #>  #> $iv3 #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 2 × 3 #>   iv3      pn    qn #> * <fct> <int> <int> #> 1 i        94   104 #> 2 j        32   166 #>  #> $iv4 #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 3 × 3 #>   iv4      pn    qn #> * <fct> <int> <int> #> 1 k        67    65 #> 2 l        39    93 #> 3 m        20   112 #>  expl_fcts(d, .named = TRUE) |>     map(\\(x) binom_contingency(d, dv, !!x) |> glm(cbind(pn, qn) ~ ., binomial, data = _)) #> $iv #>  #> Call:  glm(formula = cbind(pn, qn) ~ ., family = binomial, data = binom_contingency(d,  #>     dv, !!x)) #>  #> Coefficients: #> (Intercept)          ivb          ivc          ivd          ive          ivf   #>    -0.06062      0.18199     -0.30710     -1.44345     -1.66214     -1.66214   #>  #> Degrees of Freedom: 5 Total (i.e. Null);  0 Residual #> Null Deviance:\t    48.53  #> Residual Deviance: -1.399e-14 \tAIC: 38.03 #>  #> $iv2 #>  #> Call:  glm(formula = cbind(pn, qn) ~ ., family = binomial, data = binom_contingency(d,  #>     dv, !!x)) #>  #> Coefficients: #> (Intercept)         iv2h   #>     -0.6257      -0.2800   #>  #> Degrees of Freedom: 1 Total (i.e. Null);  0 Residual #> Null Deviance:\t    1.678  #> Residual Deviance: 7.927e-14 \tAIC: 15.19 #>  #> $iv3 #>  #> Call:  glm(formula = cbind(pn, qn) ~ ., family = binomial, data = binom_contingency(d,  #>     dv, !!x)) #>  #> Coefficients: #> (Intercept)         iv3j   #>     -0.1011      -1.5452   #>  #> Degrees of Freedom: 1 Total (i.e. Null);  0 Residual #> Null Deviance:\t    46.24  #> Residual Deviance: 3.331e-14 \tAIC: 14.87 #>  #> $iv4 #>  #> Call:  glm(formula = cbind(pn, qn) ~ ., family = binomial, data = binom_contingency(d,  #>     dv, !!x)) #>  #> Coefficients: #> (Intercept)         iv4l         iv4m   #>     0.03031     -0.89934     -1.75307   #>  #> Degrees of Freedom: 2 Total (i.e. Null);  0 Residual #> Null Deviance:\t    39.9  #> Residual Deviance: 0 \tAIC: 21.17 #>  expl_fcts(d, .named = TRUE) |>     map(\\(x) binom_contingency(d, dv, !!x, .drop_zero = TRUE) |> odds_ratio(.ind_var = !!x)) #> Waiting for profiling to be done... #> Waiting for profiling to be done... #> Waiting for profiling to be done... #> Waiting for profiling to be done... #> $iv #> ____________________________ #> Estimates and Odds Ratios: - #>  #> # A tibble: 6 × 7 #>   parameter   estimate    se     p_val odds_ratio ci[,\"2.5 %\"] [,\"97.5 %\"] sig   #> * <chr>          <dbl> <dbl>     <dbl>      <dbl>        <dbl>       <dbl> <fct> #> 1 (Intercept)  -0.0606 0.246 0.806          1          NA           NA     NS    #> 2 ivb           0.182  0.349 0.602          1.20        0.606        2.38  NS    #> 3 ivc          -0.307  0.351 0.382          0.736       0.368        1.46  NS    #> 4 ivd          -1.44   0.403 0.000343       0.236       0.104        0.509 ***   #> 5 ive          -1.66   0.423 0.0000836      0.190       0.0796       0.422 ***   #> 6 ivf          -1.66   0.423 0.0000836      0.190       0.0796       0.422 ***   #>  #> $iv2 #> ____________________________ #> Estimates and Odds Ratios: - #>  #> # A tibble: 2 × 7 #>   parameter   estimate    se     p_val odds_ratio ci[,\"2.5 %\"] [,\"97.5 %\"] sig   #> * <chr>          <dbl> <dbl>     <dbl>      <dbl>        <dbl>       <dbl> <fct> #> 1 (Intercept)   -0.626 0.149 0.0000273      1           NA           NA    ***   #> 2 iv2h          -0.280 0.217 0.196          0.756        0.493        1.15 NS    #>  #> $iv3 #> ____________________________ #> Estimates and Odds Ratios: - #>  #> # A tibble: 2 × 7 #>   parameter   estimate    se p_val odds_ratio ci[,\"2.5 %\"] [,\"97.5 %\"] sig   #> * <chr>          <dbl> <dbl> <dbl>      <dbl>        <dbl>       <dbl> <fct> #> 1 (Intercept)   -0.101 0.142 0.477      1           NA          NA     NS    #> 2 iv3j          -1.55  0.240 0          0.213        0.132       0.338 ***   #>  #> $iv4 #> ____________________________ #> Estimates and Odds Ratios: - #>  #> # A tibble: 3 × 7 #>   parameter   estimate    se    p_val odds_ratio ci[,\"2.5 %\"] [,\"97.5 %\"] sig   #> * <chr>          <dbl> <dbl>    <dbl>      <dbl>        <dbl>       <dbl> <fct> #> 1 (Intercept)   0.0303 0.174 0.862         1          NA           NA     NS    #> 2 iv4l         -0.899  0.258 0.000497      0.407       0.244        0.672 ***   #> 3 iv4m         -1.75   0.299 0             0.173       0.0946       0.306 ***   #>   rm(d)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/fct_to_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor as Numeric — fct_to_num","title":"Factor as Numeric — fct_to_num","text":"Transform factor approximately original numeric values.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/fct_to_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor as Numeric — fct_to_num","text":"","code":"fct_to_num(f)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/fct_to_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor as Numeric — fct_to_num","text":"f factor converted numeric values","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/fct_to_num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor as Numeric — fct_to_num","text":"Numeric","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/fct_to_num.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Factor as Numeric — fct_to_num","text":"See ‘Warning’ section factor: “particular, .numeric applied factor meaningless, may happen implicit coercion. transform factor f approximately original numeric values, .numeric(levels(f))[f] recommended slightly efficient .numeric(.character(f)).”","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/fct_to_num.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor as Numeric — fct_to_num","text":"","code":"f <- factor(2001:2020)  f #>  [1] 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 #> [16] 2016 2017 2018 2019 2020 #> 20 Levels: 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 ... 2020  f |> as.numeric()  # Returns codes for factor levels, not what is required #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20  f |> fct_to_num()  # Returns approximate numeric values, as required #>  [1] 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 #> [16] 2016 2017 2018 2019 2020  rm(f)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/get_contr_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and Set Treatment Contrasts for Independent Variables in Data — get_contr_data","title":"Get and Set Treatment Contrasts for Independent Variables in Data — get_contr_data","text":"get_contr_data() shows \"contrasts\" attributes selected factors within data frame. set_contr_treat() sets \"contrasts\" attribute selected factors within data frame treatment contrast matrix individually specified baseline levels. set_contr_treat()<- replacement function form.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/get_contr_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and Set Treatment Contrasts for Independent Variables in Data — get_contr_data","text":"","code":"get_contr_data(data, ...)  set_contr_treat(data, ..., .baseline = NULL, .verbose = TRUE)  set_contr_treat(data, ..., .verbose = FALSE) <- value"},{"path":"https://mark-eis.github.io/ParaAnita/reference/get_contr_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and Set Treatment Contrasts for Independent Variables in Data — get_contr_data","text":"data data frame, data frame extension (e.g. tibble). ... <tidy-select> selection one factors data getting setting contrasts. .baseline numeric vector length equal number contrasts set specifying level considered baseline. .verbose logical, whether print \"\" contrast matrices factors data. value numeric, see .baseline argument.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/get_contr_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and Set Treatment Contrasts for Independent Variables in Data — get_contr_data","text":"original dataframe tibble \"contrasts\" attributes set selected factors.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/get_contr_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get and Set Treatment Contrasts for Independent Variables in Data — get_contr_data","text":"get_contr_data() prints \"contrasts\" attributes selected factors returns data invisibly. \"contrasts\" attribute factors selected ... set using contrast function contr.treatment baseline factor levels specified numerically argument .baseline value argument case replacement function form set_contrasts()<-. .baseline argument supplied, default first factor level used baseline. Factors .data may selected getting setting contrasts using ... argument <tidy-select> syntax package dplyr, including use selection helpers. individual .baseline (.value) argument values capped greater nlevels corresponding factors selected .... Hence, ensure last level reference level, baseline value can specified large integer (e.g., 99L), may convenient using set_contr_treat() programmatically.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/get_contr_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get and Set Treatment Contrasts for Independent Variables in Data — get_contr_data","text":"","code":"# Coming soon!"},{"path":"https://mark-eis.github.io/ParaAnita/reference/get_contrasts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and Set Contrasts Matrix for an Independent Variable in Data — get_contrasts","title":"Get and Set Contrasts Matrix for an Independent Variable in Data — get_contrasts","text":"get_contrasts() returns \"contrasts\" attribute selected factor within data frame. set_contrasts() sets \"contrasts\" attribute selected factor within data frame; set_contrasts()<- replacement function form.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/get_contrasts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and Set Contrasts Matrix for an Independent Variable in Data — get_contrasts","text":"","code":"get_contrasts(data, .f)  set_contrasts(data, .f, how.many = NULL, ..., contr)  set_contrasts(data, .f, how.many = NULL, ...) <- value"},{"path":"https://mark-eis.github.io/ParaAnita/reference/get_contrasts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and Set Contrasts Matrix for an Independent Variable in Data — get_contrasts","text":"data data frame, data frame extension (e.g. tibble). .f <data-masking> quoted name factor data. .many number contrasts set, default one less     nlevels(object). ... additional arguments function contr. contr contrasts use. Can matrix one row     level factor suitable function like     contr.poly character string giving name function value either numeric matrix (sparse dense matrix     class extending dMatrix     package Matrix)  whose columns give coefficients     contrasts levels x, (quoted name )     function computes matrices.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/get_contrasts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and Set Contrasts Matrix for an Independent Variable in Data — get_contrasts","text":"dataframe tibble \"contrasts\" attribute set .f.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/get_contrasts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get and Set Contrasts Matrix for an Independent Variable in Data — get_contrasts","text":"\"contrasts\" attribute .f may set using either numeric matrix (quoted name ) function computes matrices, supplied set_contrasts() using contr argument value argument case replacement function form set_contrasts()<-. suitable contrast matrix may obtained using contrast function contr.helmert, contr.poly, contr.sum, contr.treatment contr.SAS, (quoted) name function may supplied. Additional arguments, base = x, may supplied contrast function using ... argument set_contrasts() set_contrasts()<-. base argument supplied contr = contr.treatment, value capped greater nlevels(.f), hence can specified large integer (e.g., 99L) ensure last level reference level. may convenient using set_contrasts() programmatically. NULL supplied contr value argument, existing \"contrasts\" attribute removed .f.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/get_contrasts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get and Set Contrasts Matrix for an Independent Variable in Data — get_contrasts","text":"","code":"## Create data frame with a factor iv (d <- binom_data()) #> __________________________ #> Simulated Binomial Data: - #>  #> # A tibble: 5 × 3 #>   iv       pn    qn #> * <fct> <int> <int> #> 1 a        38    28 #> 2 b        33    33 #> 3 c        16    50 #> 4 d        15    51 #> 5 e         4    62  ## set_contrasts() d |> set_contrasts(iv, contr = contr.helmert) |> get_contrasts(iv) #>   [,1] [,2] [,3] [,4] #> a   -1   -1   -1   -1 #> b    1   -1   -1   -1 #> c    0    2   -1   -1 #> d    0    0    3   -1 #> e    0    0    0    4 d |> set_contrasts(iv, contr = contr.poly) |> get_contrasts(iv) |> zapsmall() #>           .L         .Q         .C         ^4 #> a -0.6324555  0.5345225 -0.3162278  0.1195229 #> b -0.3162278 -0.2672612  0.6324555 -0.4780914 #> c  0.0000000 -0.5345225  0.0000000  0.7171372 #> d  0.3162278 -0.2672612 -0.6324555 -0.4780914 #> e  0.6324555  0.5345225  0.3162278  0.1195229 d |> set_contrasts(iv, contr = contr.sum) |> get_contrasts(iv) #>   [,1] [,2] [,3] [,4] #> a    1    0    0    0 #> b    0    1    0    0 #> c    0    0    1    0 #> d    0    0    0    1 #> e   -1   -1   -1   -1 d |> set_contrasts(iv, contr = contr.treatment) |> get_contrasts(iv) #>   b c d e #> a 0 0 0 0 #> b 1 0 0 0 #> c 0 1 0 0 #> d 0 0 1 0 #> e 0 0 0 1 d |> set_contrasts(iv, contr = contr.SAS) |> get_contrasts(iv) #>   a b c d #> a 1 0 0 0 #> b 0 1 0 0 #> c 0 0 1 0 #> d 0 0 0 1 #> e 0 0 0 0  ## how.many argument d |> set_contrasts(iv, 4, contr = contr.poly) |> get_contrasts(iv) |> zapsmall() #>           .L         .Q         .C         ^4 #> a -0.6324555  0.5345225 -0.3162278  0.1195229 #> b -0.3162278 -0.2672612  0.6324555 -0.4780914 #> c  0.0000000 -0.5345225  0.0000000  0.7171372 #> d  0.3162278 -0.2672612 -0.6324555 -0.4780914 #> e  0.6324555  0.5345225  0.3162278  0.1195229 d |> set_contrasts(iv, 3, contr = contr.poly) |> get_contrasts(iv) |> zapsmall() #>           .L         .Q         .C #> a -0.6324555  0.5345225 -0.3162278 #> b -0.3162278 -0.2672612  0.6324555 #> c  0.0000000 -0.5345225  0.0000000 #> d  0.3162278 -0.2672612 -0.6324555 #> e  0.6324555  0.5345225  0.3162278 d |> set_contrasts(iv, 2, contr = contr.poly) |> get_contrasts(iv) |> zapsmall() #>           .L         .Q #> a -0.6324555  0.5345225 #> b -0.3162278 -0.2672612 #> c  0.0000000 -0.5345225 #> d  0.3162278 -0.2672612 #> e  0.6324555  0.5345225 d |> set_contrasts(iv, 1, contr = contr.poly) |> get_contrasts(iv) |> zapsmall() #>           .L #> a -0.6324555 #> b -0.3162278 #> c  0.0000000 #> d  0.3162278 #> e  0.6324555  ## base argument of contr.treatment d |> set_contrasts(iv, base = 1, contr = contr.treatment) |> get_contrasts(iv) #>   b c d e #> a 0 0 0 0 #> b 1 0 0 0 #> c 0 1 0 0 #> d 0 0 1 0 #> e 0 0 0 1 d |> set_contrasts(iv, base = 2, contr = contr.treatment) |> get_contrasts(iv) #>   a c d e #> a 1 0 0 0 #> b 0 0 0 0 #> c 0 1 0 0 #> d 0 0 1 0 #> e 0 0 0 1 d |> set_contrasts(iv, base = 3, contr = contr.treatment) |> get_contrasts(iv) #>   a b d e #> a 1 0 0 0 #> b 0 1 0 0 #> c 0 0 0 0 #> d 0 0 1 0 #> e 0 0 0 1 d |> set_contrasts(iv, base = 4, contr = contr.treatment) |> get_contrasts(iv) #>   a b c e #> a 1 0 0 0 #> b 0 1 0 0 #> c 0 0 1 0 #> d 0 0 0 0 #> e 0 0 0 1 d |> set_contrasts(iv, base = 5, contr = contr.treatment) |> get_contrasts(iv) #>   a b c d #> a 1 0 0 0 #> b 0 1 0 0 #> c 0 0 1 0 #> d 0 0 0 1 #> e 0 0 0 0  ## Streamline with purrr::map() d$iv |> levels() |> seq_along() |> set_names(\\(x) paste0(\"base=\", letters[seq_along(x)])) |>   map(\\(x) set_contrasts(d, iv, base = x, contr = contr.treatment) |>   get_contrasts(iv)) #> $`base=a` #>   b c d e #> a 0 0 0 0 #> b 1 0 0 0 #> c 0 1 0 0 #> d 0 0 1 0 #> e 0 0 0 1 #>  #> $`base=b` #>   a c d e #> a 1 0 0 0 #> b 0 0 0 0 #> c 0 1 0 0 #> d 0 0 1 0 #> e 0 0 0 1 #>  #> $`base=c` #>   a b d e #> a 1 0 0 0 #> b 0 1 0 0 #> c 0 0 0 0 #> d 0 0 1 0 #> e 0 0 0 1 #>  #> $`base=d` #>   a b c e #> a 1 0 0 0 #> b 0 1 0 0 #> c 0 0 1 0 #> d 0 0 0 0 #> e 0 0 0 1 #>  #> $`base=e` #>   a b c d #> a 1 0 0 0 #> b 0 1 0 0 #> c 0 0 1 0 #> d 0 0 0 1 #> e 0 0 0 0 #>   ## base argument of contr.treatment limited to nlevels(d$iv)  d |> set_contrasts(iv, base = 99L, contr = contr.treatment) |> get_contrasts(iv) #>   a b c d #> a 1 0 0 0 #> b 0 1 0 0 #> c 0 0 1 0 #> d 0 0 0 1 #> e 0 0 0 0  ## Remove \"contrasts\" attribute using NULL d |> set_contrasts(iv, contr = NULL) |> get_contrasts(iv) #> NULL   ## set_contrasts()<- replacement form set_contrasts(d, iv) <- contr.helmert d |> get_contrasts(iv) #>   [,1] [,2] [,3] [,4] #> a   -1   -1   -1   -1 #> b    1   -1   -1   -1 #> c    0    2   -1   -1 #> d    0    0    3   -1 #> e    0    0    0    4  set_contrasts(d, iv) <- contr.poly d |> get_contrasts(iv) |> zapsmall() #>           .L         .Q         .C         ^4 #> a -0.6324555  0.5345225 -0.3162278  0.1195229 #> b -0.3162278 -0.2672612  0.6324555 -0.4780914 #> c  0.0000000 -0.5345225  0.0000000  0.7171372 #> d  0.3162278 -0.2672612 -0.6324555 -0.4780914 #> e  0.6324555  0.5345225  0.3162278  0.1195229  set_contrasts(d, iv) <- contr.sum d |> get_contrasts(iv) #>   [,1] [,2] [,3] [,4] #> a    1    0    0    0 #> b    0    1    0    0 #> c    0    0    1    0 #> d    0    0    0    1 #> e   -1   -1   -1   -1  set_contrasts(d, iv) <- contr.treatment d |> get_contrasts(iv) #>   b c d e #> a 0 0 0 0 #> b 1 0 0 0 #> c 0 1 0 0 #> d 0 0 1 0 #> e 0 0 0 1  set_contrasts(d, iv) <- contr.SAS d |> get_contrasts(iv) #>   a b c d #> a 1 0 0 0 #> b 0 1 0 0 #> c 0 0 1 0 #> d 0 0 0 1 #> e 0 0 0 0  ## how.many argument set_contrasts(d, iv, 4) <- contr.poly d |> get_contrasts(iv) |> zapsmall() #>           .L         .Q         .C         ^4 #> a -0.6324555  0.5345225 -0.3162278  0.1195229 #> b -0.3162278 -0.2672612  0.6324555 -0.4780914 #> c  0.0000000 -0.5345225  0.0000000  0.7171372 #> d  0.3162278 -0.2672612 -0.6324555 -0.4780914 #> e  0.6324555  0.5345225  0.3162278  0.1195229  set_contrasts(d, iv, 3) <- contr.poly d |> get_contrasts(iv) |> zapsmall() #>           .L         .Q         .C #> a -0.6324555  0.5345225 -0.3162278 #> b -0.3162278 -0.2672612  0.6324555 #> c  0.0000000 -0.5345225  0.0000000 #> d  0.3162278 -0.2672612 -0.6324555 #> e  0.6324555  0.5345225  0.3162278  set_contrasts(d, iv, 2) <- contr.poly d |> get_contrasts(iv) |> zapsmall() #>           .L         .Q #> a -0.6324555  0.5345225 #> b -0.3162278 -0.2672612 #> c  0.0000000 -0.5345225 #> d  0.3162278 -0.2672612 #> e  0.6324555  0.5345225  set_contrasts(d, iv, 1) <- contr.poly d |> get_contrasts(iv) |> zapsmall() #>           .L #> a -0.6324555 #> b -0.3162278 #> c  0.0000000 #> d  0.3162278 #> e  0.6324555  ## base argument of contr.treatment set_contrasts(d, iv, base = 1) <- contr.treatment d |> get_contrasts(iv) #>   b c d e #> a 0 0 0 0 #> b 1 0 0 0 #> c 0 1 0 0 #> d 0 0 1 0 #> e 0 0 0 1  set_contrasts(d, iv, base = 2) <- contr.treatment d |> get_contrasts(iv) #>   a c d e #> a 1 0 0 0 #> b 0 0 0 0 #> c 0 1 0 0 #> d 0 0 1 0 #> e 0 0 0 1  set_contrasts(d, iv, base = 3) <- contr.treatment d |> get_contrasts(iv) #>   a b d e #> a 1 0 0 0 #> b 0 1 0 0 #> c 0 0 0 0 #> d 0 0 1 0 #> e 0 0 0 1  set_contrasts(d, iv, base = 4) <- contr.treatment d |> get_contrasts(iv) #>   a b c e #> a 1 0 0 0 #> b 0 1 0 0 #> c 0 0 1 0 #> d 0 0 0 0 #> e 0 0 0 1  set_contrasts(d, iv, base = 5) <- contr.treatment d |> get_contrasts(iv) #>   a b c d #> a 1 0 0 0 #> b 0 1 0 0 #> c 0 0 1 0 #> d 0 0 0 1 #> e 0 0 0 0  set_contrasts(d, iv, base = 99L) <- contr.treatment d |> get_contrasts(iv) #>   a b c d #> a 1 0 0 0 #> b 0 1 0 0 #> c 0 0 1 0 #> d 0 0 0 1 #> e 0 0 0 0  ## Naming contrasts matrix columns isn't always automatic ## This is one way… ct5 <- contr.SAS(5) dimnames(ct5) #> [[1]] #> [1] \"1\" \"2\" \"3\" \"4\" \"5\" #>  #> [[2]] #> [1] \"1\" \"2\" \"3\" \"4\" #>  dimnames(ct5)[[2]] <- levels(d$iv)[-1] dimnames(ct5) #> [[1]] #> [1] \"1\" \"2\" \"3\" \"4\" \"5\" #>  #> [[2]] #> [1] \"b\" \"c\" \"d\" \"e\" #>   d |> set_contrasts(iv) <- ct5 d |> get_contrasts(iv) #>   b c d e #> a 1 0 0 0 #> b 0 1 0 0 #> c 0 0 1 0 #> d 0 0 0 1 #> e 0 0 0 0  ## Set \"contrasts\" attribute for d$iv to Helmert contrasts matrix set_contrasts(d, iv) <- contr.helmert attr(d$iv, \"contrasts\") #>   [,1] [,2] [,3] [,4] #> a   -1   -1   -1   -1 #> b    1   -1   -1   -1 #> c    0    2   -1   -1 #> d    0    0    3   -1 #> e    0    0    0    4 d |> get_contrasts(iv) #>   [,1] [,2] [,3] [,4] #> a   -1   -1   -1   -1 #> b    1   -1   -1   -1 #> c    0    2   -1   -1 #> d    0    0    3   -1 #> e    0    0    0    4 ## get_contrasts() return value identical to that of contrasts()  identical(contrasts(d$iv), d |> get_contrasts(iv)) #> [1] TRUE  ## Remove \"contrasts\" attribute  set_contrasts(d, iv) <- NULL ## get_contrasts() return value no longer identical to that of contrasts()  identical(contrasts(d$iv), d |> get_contrasts(iv)) #> [1] FALSE ## get_contrasts() shows NULL \"contrasts\" attribute…  d |> get_contrasts(iv) #> NULL attr(d$iv, \"contrasts\") #> NULL ## …whereas contrasts() now shows default (unordered) contrasts from options(\"contrasts\")  contrasts(d$iv) #>   b c d e #> a 0 0 0 0 #> b 1 0 0 0 #> c 0 1 0 0 #> d 0 0 1 0 #> e 0 0 0 1 options(\"contrasts\")  #> $contrasts #>         unordered           ordered  #> \"contr.treatment\"      \"contr.poly\"  #>   rm(d)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/glm_plotdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Collate Data for Plotting Univariable GLM Predictions with Error Bars — glm_plotdata","title":"Collate Data for Plotting Univariable GLM Predictions with Error Bars — glm_plotdata","text":"glm_plotdata() outputs data collated suitably easy creation standardised plots error bars representing confidence intervals standard errors, based predictions univariable general linear models (GLMs).","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/glm_plotdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collate Data for Plotting Univariable GLM Predictions with Error Bars — glm_plotdata","text":"","code":"glm_plotdata(object, ...)  # S3 method for binom_contingency glm_plotdata(   object,   ...,   .ind_var,   .ungroup = NULL,   conf_level = 0.95,   type = c(\"link\", \"response\") )  # S3 method for data.frame glm_plotdata(   object,   ...,   .dep_var,   .ind_var,   .ungroup = NULL,   conf_level = 0.95,   type = c(\"link\", \"response\") )  # S3 method for default glm_plotdata(object, ..., conf_level = 0.95, type = c(\"link\", \"response\"))"},{"path":"https://mark-eis.github.io/ParaAnita/reference/glm_plotdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collate Data for Plotting Univariable GLM Predictions with Error Bars — glm_plotdata","text":"object object data plotting univariable GLM predictions collated; may binomial contingency table, data frame (data frame extension e.g., tibble), glm used default S3 method. ... arguments passed methods. .ind_var <data-masking> quoted name independent variable. .ungroup <data-masking> quoted name column containing ungrouped levels .ind_var, see details; default NULL. conf_level confidence level required error bars; default 0.95. NA, error bars standard error. type type prediction required. default scale linear predictors; alternative \"response\" scale response variable; default \"link\". .dep_var <data-masking> quoted name(s) response variable(s) data representing number successes failures respectively, see glm(); default cbind(pn, qn).","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/glm_plotdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collate Data for Plotting Univariable GLM Predictions with Error Bars — glm_plotdata","text":"object class \"glm_plotdata\", \"announce\", inheriting tibble, values linear predictor response scale (depending type) columns follows: - level Level independent variable. grouped Grouped levels independent variable. n Number observations. obs Observed values. pred Values predicted model. lower Lower extent error bar. upper Upper extent error bar. also attributes \"conf_level\", signifying confidence level, \"subtitle\", default name independant variable, \"type\" (see argument type).","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/glm_plotdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Collate Data for Plotting Univariable GLM Predictions with Error Bars — glm_plotdata","text":"function works univariable GLMs Bernoulli binomial data dependent variable expressed numbers successes failures single independent variable multiple levels output may plotted conveniently using ggplot() S3 method ggplot.glm_plotdata(). glm_plotdata() allows exploration proposed groupings levels independent variable, obtained using add_grps() fct_collapse(), include grouped ungrouped levels output. cases, .ind_var contain groupings .ungroup argument name column object's data containing ungrouped levels, see examples. grouped levels used independent variable GLM shown within output object column grouped ungrouped levels shown column level. .ungroup NULL (default), levels .ind_var appear column level grouped column output contain NA. conf_level value 0.95 (default) similar value, lower upper values output delimit prediction confidence intervals confidence level. conf_level NA, lower upper model predictions ±standard error. type = \"link\", linear predictors confidence intervals ±standard errors obtained. type = \"response\", linear predictors confidence intervals ±standard errors transformed back response scale using link inverse function.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/glm_plotdata.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Collate Data for Plotting Univariable GLM Predictions with Error Bars — glm_plotdata","text":"Confidence intervals calculated standard errors parameter estimates using quantiles t distribution n - 1 degrees freedom, probability given conf_level. confidence intervals generally conservative .e., little wider, obtained \"profiling\" (e.g., using confint.glm). conf_level argument NA, standard error shown rather confidence interval.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/glm_plotdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collate Data for Plotting Univariable GLM Predictions with Error Bars — glm_plotdata","text":"","code":"(d <- binom_data()) #> __________________________ #> Simulated Binomial Data: - #>  #> # A tibble: 5 × 3 #>   iv       pn    qn #> * <fct> <int> <int> #> 1 a        31    35 #> 2 b        22    44 #> 3 c        16    50 #> 4 d        13    53 #> 5 e         3    63  ## Ungrouped data ## 95% Confidence interval by default d |> glm_plotdata(.ind_var = iv)                     ## Linear predictor scale #> ________________ #> GLM Plot Data: - #>  #> # A tibble: 5 × 7 #>   level grouped     n    obs   pred  lower  upper #> * <fct> <fct>   <int>  <dbl>  <dbl>  <dbl>  <dbl> #> 1 a     NA         66 -0.121 -0.121 -0.607  0.364 #> 2 b     NA         66 -0.693 -0.693 -1.21  -0.179 #> 3 c     NA         66 -1.14  -1.14  -1.70  -0.574 #> 4 d     NA         66 -1.41  -1.41  -2.01  -0.796 #> 5 e     NA         66 -3.04  -3.04  -4.21  -1.88  d |> glm_plotdata(.ind_var = iv, type = \"response\")  ## Response scale #> ________________ #> GLM Plot Data: - #>  #> # A tibble: 5 × 7 #>   level grouped     n    obs   pred  lower upper #> * <fct> <fct>   <int>  <dbl>  <dbl>  <dbl> <dbl> #> 1 a     NA         66 0.470  0.470  0.353  0.590 #> 2 b     NA         66 0.333  0.333  0.230  0.455 #> 3 c     NA         66 0.242  0.242  0.154  0.360 #> 4 d     NA         66 0.197  0.197  0.118  0.311 #> 5 e     NA         66 0.0455 0.0455 0.0147 0.132  ## Standard error d |> glm_plotdata(.ind_var = iv, conf_level = NA)                     ## Linear predictor scale #> ________________ #> GLM Plot Data: - #>  #> # A tibble: 5 × 7 #>   level grouped     n    obs   pred  lower  upper #> * <fct> <fct>   <int>  <dbl>  <dbl>  <dbl>  <dbl> #> 1 a     NA         66 -0.121 -0.121 -0.368  0.125 #> 2 b     NA         66 -0.693 -0.693 -0.954 -0.432 #> 3 c     NA         66 -1.14  -1.14  -1.43  -0.852 #> 4 d     NA         66 -1.41  -1.41  -1.71  -1.10  #> 5 e     NA         66 -3.04  -3.04  -3.64  -2.45  d |> glm_plotdata(.ind_var = iv, conf_level = NA, type = \"response\")  ## Response scale #> ________________ #> GLM Plot Data: - #>  #> # A tibble: 5 × 7 #>   level grouped     n    obs   pred  lower  upper #> * <fct> <fct>   <int>  <dbl>  <dbl>  <dbl>  <dbl> #> 1 a     NA         66 0.470  0.470  0.409  0.531  #> 2 b     NA         66 0.333  0.333  0.278  0.394  #> 3 c     NA         66 0.242  0.242  0.194  0.299  #> 4 d     NA         66 0.197  0.197  0.153  0.251  #> 5 e     NA         66 0.0455 0.0455 0.0257 0.0792  ## Grouped data (d <- list(iv2 = list(ab = c(\"a\", \"b\"), cd = c(\"c\", \"d\"))) |>     add_grps(d, iv, .key = _)) #> __________________________ #> Simulated Binomial Data: - #>  #> # A tibble: 5 × 4 #>   iv    iv2      pn    qn #>   <fct> <fct> <int> <int> #> 1 a     ab       31    35 #> 2 b     ab       22    44 #> 3 c     cd       16    50 #> 4 d     cd       13    53 #> 5 e     e         3    63  ## 95% Confidence interval by default d |> glm_plotdata(.ind_var = iv2, .ungroup = iv)                     ## Linear predictor scale #> ________________ #> GLM Plot Data: - #>  #> # A tibble: 5 × 7 #>   level grouped     n    obs   pred  lower   upper #> * <fct> <fct>   <int>  <dbl>  <dbl>  <dbl>   <dbl> #> 1 a     ab         66 -0.121 -0.399 -0.748 -0.0499 #> 2 b     ab         66 -0.693 -0.399 -0.748 -0.0499 #> 3 c     cd         66 -1.14  -1.27  -1.68  -0.854  #> 4 d     cd         66 -1.41  -1.27  -1.68  -0.854  #> 5 e     e          66 -3.04  -3.04  -4.21  -1.88   d |> glm_plotdata(.ind_var = iv2, .ungroup = iv, type = \"response\")  ## Response scale #> ________________ #> GLM Plot Data: - #>  #> # A tibble: 5 × 7 #>   level grouped     n    obs   pred  lower upper #> * <fct> <fct>   <int>  <dbl>  <dbl>  <dbl> <dbl> #> 1 a     ab         66 0.470  0.402  0.321  0.488 #> 2 b     ab         66 0.333  0.402  0.321  0.488 #> 3 c     cd         66 0.242  0.220  0.157  0.299 #> 4 d     cd         66 0.197  0.220  0.157  0.299 #> 5 e     e          66 0.0455 0.0455 0.0147 0.132  ## Standard error on linear predictor scale d |> glm_plotdata(.ind_var = iv2, .ungroup = iv, conf_level = NA) #> ________________ #> GLM Plot Data: - #>  #> # A tibble: 5 × 7 #>   level grouped     n    obs   pred  lower  upper #> * <fct> <fct>   <int>  <dbl>  <dbl>  <dbl>  <dbl> #> 1 a     ab         66 -0.121 -0.399 -0.577 -0.222 #> 2 b     ab         66 -0.693 -0.399 -0.577 -0.222 #> 3 c     cd         66 -1.14  -1.27  -1.48  -1.06  #> 4 d     cd         66 -1.41  -1.27  -1.48  -1.06  #> 5 e     e          66 -3.04  -3.04  -3.64  -2.45   ## Standard error on response scale d |> glm_plotdata(.ind_var = iv2, .ungroup = iv, conf_level = NA, type = \"response\") #> ________________ #> GLM Plot Data: - #>  #> # A tibble: 5 × 7 #>   level grouped     n    obs   pred  lower  upper #> * <fct> <fct>   <int>  <dbl>  <dbl>  <dbl>  <dbl> #> 1 a     ab         66 0.470  0.402  0.360  0.445  #> 2 b     ab         66 0.333  0.402  0.360  0.445  #> 3 c     cd         66 0.242  0.220  0.186  0.258  #> 4 d     cd         66 0.197  0.220  0.186  0.258  #> 5 e     e          66 0.0455 0.0455 0.0257 0.0792  rm(d)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/glm_plotlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Data for Plotting Univariable GLM Predictions and Error Bars for Multiple Independent Variables — glm_plotlist","title":"Data for Plotting Univariable GLM Predictions and Error Bars for Multiple Independent Variables — glm_plotlist","text":"glm_plotlist() formats data plotting univariable GLM predictions error bars number independent variables.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/glm_plotlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data for Plotting Univariable GLM Predictions and Error Bars for Multiple Independent Variables — glm_plotlist","text":"","code":"glm_plotlist(   data,   .dep_var,   ...,   .ungroups = NULL,   .conf_level = 0.95,   .facet_by = NULL )"},{"path":"https://mark-eis.github.io/ParaAnita/reference/glm_plotlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data for Plotting Univariable GLM Predictions and Error Bars for Multiple Independent Variables — glm_plotlist","text":"data data frame, data frame extension (e.g. tibble). .dep_var <data-masking> quoted name(s) response variable(s) data representing number successes failures respectively, see glm(); default cbind(pn, qn). ... <tidy-select> independent variables included plot data. .ungroups named character vector ungrouped levels independent variables specified .ind_var, see details; default NULL. .conf_level confidence level required error bars; default 0.95. NA, error bars standard error. .facet_by NULL, default; , output combined single object used faceted plot, character vector length one used name additional column containing names independant variables.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/glm_plotlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data for Plotting Univariable GLM Predictions and Error Bars for Multiple Independent Variables — glm_plotlist","text":"argument .facet_by NULL, list \"glm_plotdata\" objects suitable producing multiple plots using ggplot(). Otherwise, single \"glm_plotdata\" object additional column taking name .facet_by containing names independent variables.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/glm_plotlist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data for Plotting Univariable GLM Predictions and Error Bars for Multiple Independent Variables — glm_plotlist","text":"glm_plotlist() invokes binom_contingency() glm_plotdata() create list \"glm_plotdata\" objects plotting univariable GLM predictions error bars number independent variables data. Independent variables included selected using ... argument <tidy-select> syntax package dplyr, including use “selection helpers”. Like glm_plotdata(), glm_plotlist() allows exploration proposed groupings levels independent variables (e.g. obtained using add_grps() fct_collapse()) inclusion grouped ungrouped levels \"glm_plotdata\" objects comprising output list. cases, .ungroups argument used provide named character vector names corresponding factors data giving grouped ungrouped levels form ungrouped_name = \"grouped_name\"; levels otherwise mentioned left . grouped levels used independent variable GLM invoked glm_plotdata() output column grouped within corresponding \"glm_plotdata\" object, ungrouped levels shown column level, see glm_plotdata(). glm_plotlist() may used conjunction package purrr map() rapidly obtain multiple plots univariable GLMs number independent variables. Levels independent variables observed values zero one included output, although taken consideration calculating denominators case grouped levels.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/glm_plotlist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data for Plotting Univariable GLM Predictions and Error Bars for Multiple Independent Variables — glm_plotlist","text":"","code":"# Coming soon!"},{"path":"https://mark-eis.github.io/ParaAnita/reference/good_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Levels of Independent Variable where Dependent Variable All Success or All Failure — good_levels","title":"Remove Levels of Independent Variable where Dependent Variable All Success or All Failure — good_levels","text":"good_levels() identifies levels independent variable values Bernoulli dependent variable neither zero one .e., \\(0 < p < 1\\). drop_null() drops data levels independent variable Bernoulli dependent variable values either zero one .e., identified good_levels(). drop_zero() drops data levels independent variable binomial dependent variable either successes failures. levels_data returns levels factors data. nlevels_data returns number levels factors data.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/good_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Levels of Independent Variable where Dependent Variable All Success or All Failure — good_levels","text":"","code":"good_levels(.data, .dep_var, .ind_var)  drop_null(.data, .dep_var, .ind_var)  drop_zero(.data, .ind_var, .dep_var = cbind(.data$pn, .data$qn))"},{"path":"https://mark-eis.github.io/ParaAnita/reference/good_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Levels of Independent Variable where Dependent Variable All Success or All Failure — good_levels","text":".data data frame, data frame extension (e.g. tibble). .dep_var <data-masking> quoted name Bernoulli dependent variable numeric values 0 1; case drop zero(), binomial dependent variable, default cbind(.data$pn, .data$qn), representing number successes failures respectively, see glm(). .ind_var <data-masking> quoted name independent variable, may factor, character vector.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/good_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Levels of Independent Variable where Dependent Variable All Success or All Failure — good_levels","text":"good_levels() returns character vector comprising levels .ind_var corresponding values .dep_var neither zero one. drop_null() drop_zero() return data frame data frame extension e.g., tibble, equivalent data, including rows levels .ind_var .dep_var values neither zero one, neither successes failures respectively.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/good_levels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove Levels of Independent Variable where Dependent Variable All Success or All Failure — good_levels","text":"Bernoulli trial dataset numeric dependent variable coded 0 1, good_levels() identifies  levels independent variable values dependent variable neither zero one .e., \\(0 < p < 1\\). similar dataset, drop_null() drops rows data levels independent variable identified good_levels(). Unused factor levels dropped independent variable. binomial dataset, drop_zero() drops rows data either successes failures, successes failures.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/good_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Levels of Independent Variable where Dependent Variable All Success or All Failure — good_levels","text":"","code":"d <- bernoulli_data(probs = c(0.8, 0.4, 0, 0.3, 0.6 )) d |> binom_contingency(dv) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 5 × 3 #>   iv       pn    qn #> * <fct> <int> <int> #> 1 a        53    13 #> 2 b        21    45 #> 3 c         0    66 #> 4 d        13    53 #> 5 e        34    32 d |> levels_data() #> $iv #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" #>  d |> good_levels(dv, iv) #> [1] \"a\" \"b\" \"d\" \"e\" d |> drop_null(dv, iv) |> levels_data() #> $iv #> [1] \"a\" \"b\" \"d\" \"e\" #>  d |> drop_null(dv, iv) |> binom_contingency(dv) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 4 × 3 #>   iv       pn    qn #> * <fct> <int> <int> #> 1 a        53    13 #> 2 b        21    45 #> 3 d        13    53 #> 4 e        34    32 d |> binom_contingency(dv) |> drop_zero(iv) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 4 × 3 #>   iv       pn    qn #>   <fct> <int> <int> #> 1 a        53    13 #> 2 b        21    45 #> 3 d        13    53 #> 4 e        34    32  identical(   d |> drop_null(dv, iv) |> binom_contingency(dv),   d |> binom_contingency(dv) |> drop_zero(iv) ) #> [1] TRUE  d_ls <- map2(c(0.5, 0.4, 1, 1), c(0.1, 0, 0.6, 0), seq, length.out = 5) |>     map(\\(x) bernoulli_data(probs = x)) |>     (\\(x) setNames(x, paste0(\"data\", seq_along(x))))()  d_ls |> map(\\(d) d |> binom_contingency(dv)) #> $data1 #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 5 × 3 #>   iv       pn    qn #> * <fct> <int> <int> #> 1 a        37    29 #> 2 b        20    46 #> 3 c        13    53 #> 4 d        12    54 #> 5 e         8    58 #>  #> $data2 #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 5 × 3 #>   iv       pn    qn #> * <fct> <int> <int> #> 1 a        18    48 #> 2 b        19    47 #> 3 c        10    56 #> 4 d        10    56 #> 5 e         0    66 #>  #> $data3 #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 5 × 3 #>   iv       pn    qn #> * <fct> <int> <int> #> 1 a        66     0 #> 2 b        60     6 #> 3 c        56    10 #> 4 d        47    19 #> 5 e        48    18 #>  #> $data4 #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 5 × 3 #>   iv       pn    qn #> * <fct> <int> <int> #> 1 a        66     0 #> 2 b        55    11 #> 3 c        31    35 #> 4 d        15    51 #> 5 e         0    66 #>  d_ls |> map(levels_data) #> $data1 #> $data1$iv #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" #>  #>  #> $data2 #> $data2$iv #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" #>  #>  #> $data3 #> $data3$iv #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" #>  #>  #> $data4 #> $data4$iv #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" #>  #>  d_ls |> map(\\(d) d |> good_levels(dv, iv)) #> $data1 #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" #>  #> $data2 #> [1] \"a\" \"b\" \"c\" \"d\" #>  #> $data3 #> [1] \"b\" \"c\" \"d\" \"e\" #>  #> $data4 #> [1] \"b\" \"c\" \"d\" #>  d_ls |> map(\\(d) d |> drop_null(dv, iv) |> binom_contingency(dv)) #> $data1 #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 5 × 3 #>   iv       pn    qn #> * <fct> <int> <int> #> 1 a        37    29 #> 2 b        20    46 #> 3 c        13    53 #> 4 d        12    54 #> 5 e         8    58 #>  #> $data2 #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 4 × 3 #>   iv       pn    qn #> * <fct> <int> <int> #> 1 a        18    48 #> 2 b        19    47 #> 3 c        10    56 #> 4 d        10    56 #>  #> $data3 #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 4 × 3 #>   iv       pn    qn #> * <fct> <int> <int> #> 1 b        60     6 #> 2 c        56    10 #> 3 d        47    19 #> 4 e        48    18 #>  #> $data4 #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 3 × 3 #>   iv       pn    qn #> * <fct> <int> <int> #> 1 b        55    11 #> 2 c        31    35 #> 3 d        15    51 #>  d_ls |> map(\\(d) d |> binom_contingency(dv) |> drop_zero(iv)) #> $data1 #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 5 × 3 #>   iv       pn    qn #>   <fct> <int> <int> #> 1 a        37    29 #> 2 b        20    46 #> 3 c        13    53 #> 4 d        12    54 #> 5 e         8    58 #>  #> $data2 #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 4 × 3 #>   iv       pn    qn #>   <fct> <int> <int> #> 1 a        18    48 #> 2 b        19    47 #> 3 c        10    56 #> 4 d        10    56 #>  #> $data3 #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 4 × 3 #>   iv       pn    qn #>   <fct> <int> <int> #> 1 b        60     6 #> 2 c        56    10 #> 3 d        47    19 #> 4 e        48    18 #>  #> $data4 #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 3 × 3 #>   iv       pn    qn #>   <fct> <int> <int> #> 1 b        55    11 #> 2 c        31    35 #> 3 d        15    51 #>   identical(   d_ls |> map(\\(d) d |> drop_null(dv, iv) |> binom_contingency(dv)),    d_ls |> map(\\(d) d |> binom_contingency(dv) |> drop_zero(iv)) ) #> [1] TRUE  rm(d, d_ls)  ## Using gss_cat dataset from {forcats} package # \\dontshow{    if (!requireNamespace(\"forcats\", quietly = TRUE))         warning(\"package 'forcats' must be installed\")    try(gss_cat <- forcats::gss_cat) # }  gss_cat |> names() #> [1] \"year\"    \"marital\" \"age\"     \"race\"    \"rincome\" \"partyid\" \"relig\"   #> [8] \"denom\"   \"tvhours\" gss_cat |> levels_data() #> $marital #> [1] \"No answer\"     \"Never married\" \"Separated\"     \"Divorced\"      #> [5] \"Widowed\"       \"Married\"       #>  #> $race #> [1] \"Other\"          \"Black\"          \"White\"          \"Not applicable\" #>  #> $rincome #>  [1] \"No answer\"      \"Don't know\"     \"Refused\"        \"$25000 or more\" #>  [5] \"$20000 - 24999\" \"$15000 - 19999\" \"$10000 - 14999\" \"$8000 to 9999\"  #>  [9] \"$7000 to 7999\"  \"$6000 to 6999\"  \"$5000 to 5999\"  \"$4000 to 4999\"  #> [13] \"$3000 to 3999\"  \"$1000 to 2999\"  \"Lt $1000\"       \"Not applicable\" #>  #> $partyid #>  [1] \"No answer\"          \"Don't know\"         \"Other party\"        #>  [4] \"Strong republican\"  \"Not str republican\" \"Ind,near rep\"       #>  [7] \"Independent\"        \"Ind,near dem\"       \"Not str democrat\"   #> [10] \"Strong democrat\"    #>  #> $relig #>  [1] \"No answer\"               \"Don't know\"              #>  [3] \"Inter-nondenominational\" \"Native american\"         #>  [5] \"Christian\"               \"Orthodox-christian\"      #>  [7] \"Moslem/islam\"            \"Other eastern\"           #>  [9] \"Hinduism\"                \"Buddhism\"                #> [11] \"Other\"                   \"None\"                    #> [13] \"Jewish\"                  \"Catholic\"                #> [15] \"Protestant\"              \"Not applicable\"          #>  #> $denom #>  [1] \"No answer\"            \"Don't know\"           \"No denomination\"      #>  [4] \"Other\"                \"Episcopal\"            \"Presbyterian-dk wh\"   #>  [7] \"Presbyterian, merged\" \"Other presbyterian\"   \"United pres ch in us\" #> [10] \"Presbyterian c in us\" \"Lutheran-dk which\"    \"Evangelical luth\"     #> [13] \"Other lutheran\"       \"Wi evan luth synod\"   \"Lutheran-mo synod\"    #> [16] \"Luth ch in america\"   \"Am lutheran\"          \"Methodist-dk which\"   #> [19] \"Other methodist\"      \"United methodist\"     \"Afr meth ep zion\"     #> [22] \"Afr meth episcopal\"   \"Baptist-dk which\"     \"Other baptists\"       #> [25] \"Southern baptist\"     \"Nat bapt conv usa\"    \"Nat bapt conv of am\"  #> [28] \"Am bapt ch in usa\"    \"Am baptist asso\"      \"Not applicable\"       #>  gss_cat |> nlevels_data() #> marital    race rincome partyid   relig   denom  #>       6       4      16      10      16      30   # \\dontshow{     rm(gss_cat) # }"},{"path":"https://mark-eis.github.io/ParaAnita/reference/helm_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Create and Set Names for Helmert Contrasts — helm_names","title":"Create and Set Names for Helmert Contrasts — helm_names","text":"Create set column names Helmert contrasts associated factor.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/helm_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create and Set Names for Helmert Contrasts — helm_names","text":"","code":"helm_names(x)  helm_names(x) <- value"},{"path":"https://mark-eis.github.io/ParaAnita/reference/helm_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create and Set Names for Helmert Contrasts — helm_names","text":"x factor contrast column headings named. value character vector list length two (subsequent elements ignored), separators used creating headings; first \"within\" separator second \"\" separator, see examples.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/helm_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create and Set Names for Helmert Contrasts — helm_names","text":"Helmert contrasts factor contrast second level first, third average first two, . contrasts matrix can set attribute factor using function contrasts<-, using contrasts function contr.helmert argument .e., contrasts(f)<- contr.helmert, create set appropriate Helmert contrasts matrix attribute. However columns resulting Helmert contrasts matrix unnamed. helm_names()<- creates column names based names levels factor x. factor x associated Helmert contrast matrix, helm_names()<- set one, giving message. names levels factor x need fairly short function helpful. function helm_names() alias contr_colnames included simply completeness optimise help searches.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/helm_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create and Set Names for Helmert Contrasts — helm_names","text":"","code":"(f <- gl(5, 5, labels = LETTERS[1:5])) #>  [1] A A A A A B B B B B C C C C C D D D D D E E E E E #> Levels: A B C D E  contrasts(f)<- contr.helmert f #>  [1] A A A A A B B B B B C C C C C D D D D D E E E E E #> attr(,\"contrasts\") #>   [,1] [,2] [,3] [,4] #> A   -1   -1   -1   -1 #> B    1   -1   -1   -1 #> C    0    2   -1   -1 #> D    0    0    3   -1 #> E    0    0    0    4 #> Levels: A B C D E helm_names(f) #> NULL  helm_names(f)<- c(\":\", \"v\") f #>  [1] A A A A A B B B B B C C C C C D D D D D E E E E E #> attr(,\"contrasts\") #>   A v B A:B v C A:C v D A:D v E #> A    -1      -1      -1      -1 #> B     1      -1      -1      -1 #> C     0       2      -1      -1 #> D     0       0       3      -1 #> E     0       0       0       4 #> Levels: A B C D E helm_names(f) #> [1] \"A v B\"   \"A:B v C\" \"A:C v D\" \"A:D v E\"  contrasts(f)<- NULL f #>  [1] A A A A A B B B B B C C C C C D D D D D E E E E E #> Levels: A B C D E  helm_names(f)<- c(\"-\", \"vs.\") #> Setting Helmert contrasts for factor x with `helm_names()<-`. f #>  [1] A A A A A B B B B B C C C C C D D D D D E E E E E #> attr(,\"contrasts\") #>   A vs. B A-B vs. C A-C vs. D A-D vs. E #> A      -1        -1        -1        -1 #> B       1        -1        -1        -1 #> C       0         2        -1        -1 #> D       0         0         3        -1 #> E       0         0         0         4 #> Levels: A B C D E helm_names(f) #> [1] \"A vs. B\"   \"A-B vs. C\" \"A-C vs. D\" \"A-D vs. E\"  rm(f)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/levels_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Levels of all Factors in Data — levels_data","title":"Levels of all Factors in Data — levels_data","text":"levels_data() returns levels factors data. nlevels_data() returns number levels factors data.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/levels_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Levels of all Factors in Data — levels_data","text":"","code":"levels_data(data)  nlevels_data(data)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/levels_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Levels of all Factors in Data — levels_data","text":"data data frame, data frame extension (e.g. tibble).","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/levels_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Levels of all Factors in Data — levels_data","text":"levels_data() returns named list comprising levels factor data. nlevels_data() returns named integer vector comprising number levels factor data.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/levels_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Levels of all Factors in Data — levels_data","text":"says tin.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/levels_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Levels of all Factors in Data — levels_data","text":"","code":"## Using gss_cat dataset from {forcats} package # \\dontshow{    if (!requireNamespace(\"forcats\", quietly = TRUE))         warning(\"package 'forcats' must be installed\")    try(gss_cat <- forcats::gss_cat) # }  gss_cat |> names() #> [1] \"year\"    \"marital\" \"age\"     \"race\"    \"rincome\" \"partyid\" \"relig\"   #> [8] \"denom\"   \"tvhours\" gss_cat |> levels_data() #> $marital #> [1] \"No answer\"     \"Never married\" \"Separated\"     \"Divorced\"      #> [5] \"Widowed\"       \"Married\"       #>  #> $race #> [1] \"Other\"          \"Black\"          \"White\"          \"Not applicable\" #>  #> $rincome #>  [1] \"No answer\"      \"Don't know\"     \"Refused\"        \"$25000 or more\" #>  [5] \"$20000 - 24999\" \"$15000 - 19999\" \"$10000 - 14999\" \"$8000 to 9999\"  #>  [9] \"$7000 to 7999\"  \"$6000 to 6999\"  \"$5000 to 5999\"  \"$4000 to 4999\"  #> [13] \"$3000 to 3999\"  \"$1000 to 2999\"  \"Lt $1000\"       \"Not applicable\" #>  #> $partyid #>  [1] \"No answer\"          \"Don't know\"         \"Other party\"        #>  [4] \"Strong republican\"  \"Not str republican\" \"Ind,near rep\"       #>  [7] \"Independent\"        \"Ind,near dem\"       \"Not str democrat\"   #> [10] \"Strong democrat\"    #>  #> $relig #>  [1] \"No answer\"               \"Don't know\"              #>  [3] \"Inter-nondenominational\" \"Native american\"         #>  [5] \"Christian\"               \"Orthodox-christian\"      #>  [7] \"Moslem/islam\"            \"Other eastern\"           #>  [9] \"Hinduism\"                \"Buddhism\"                #> [11] \"Other\"                   \"None\"                    #> [13] \"Jewish\"                  \"Catholic\"                #> [15] \"Protestant\"              \"Not applicable\"          #>  #> $denom #>  [1] \"No answer\"            \"Don't know\"           \"No denomination\"      #>  [4] \"Other\"                \"Episcopal\"            \"Presbyterian-dk wh\"   #>  [7] \"Presbyterian, merged\" \"Other presbyterian\"   \"United pres ch in us\" #> [10] \"Presbyterian c in us\" \"Lutheran-dk which\"    \"Evangelical luth\"     #> [13] \"Other lutheran\"       \"Wi evan luth synod\"   \"Lutheran-mo synod\"    #> [16] \"Luth ch in america\"   \"Am lutheran\"          \"Methodist-dk which\"   #> [19] \"Other methodist\"      \"United methodist\"     \"Afr meth ep zion\"     #> [22] \"Afr meth episcopal\"   \"Baptist-dk which\"     \"Other baptists\"       #> [25] \"Southern baptist\"     \"Nat bapt conv usa\"    \"Nat bapt conv of am\"  #> [28] \"Am bapt ch in usa\"    \"Am baptist asso\"      \"Not applicable\"       #>  gss_cat |> nlevels_data() #> marital    race rincome partyid   relig   denom  #>       6       4      16      10      16      30   # \\dontshow{     rm(gss_cat) # }"},{"path":"https://mark-eis.github.io/ParaAnita/reference/lf.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe-Friendly Line Feeds and Printing — lf","title":"Pipe-Friendly Line Feeds and Printing — lf","text":"lf() outputs one line feeds piped sequence.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/lf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe-Friendly Line Feeds and Printing — lf","text":"","code":"lf(x, n = 1)  print_lf(x, n = 1)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/lf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe-Friendly Line Feeds and Printing — lf","text":"x Object piped. n Number line feeds; default 1.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/lf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe-Friendly Line Feeds and Printing — lf","text":"Invisibly returns first argument.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/lf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pipe-Friendly Line Feeds and Printing — lf","text":"print_lf() prints object piped sequence outputs one line feeds. object passed argument piped sequence printed /one line feeds output piped sequence using cat(). can useful separate lines printed output, see examples.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/lf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipe-Friendly Line Feeds and Printing — lf","text":"","code":"obj <- \"Lorem ipsum dolor sit amet\" obj |> lf()               # line feed, object returned invisibly #>  obj |> lf(3)              # three line feeds, object returned invisibly #>  #>   #>   (obj |> lf(3))            # three line feeds, returned object rendered visible #>  #>   #>   #> [1] \"Lorem ipsum dolor sit amet\" obj |> lf(3) |> paste(\"consectetur adipiscing elit\", sep = \", \") #>  #>   #>   #> [1] \"Lorem ipsum dolor sit amet, consectetur adipiscing elit\"  obj |> print() |> lf(3)   # line feeds are unexpectedly before printed output. #>  #>   #>   #> [1] \"Lorem ipsum dolor sit amet\"  ## Use print_lf() instead obj |> print_lf()         # object printed with line feed and returned invisibly #> [1] \"Lorem ipsum dolor sit amet\" #>  obj |> print_lf(3)        # object printed with three line feeds and returned invisibly #> [1] \"Lorem ipsum dolor sit amet\" #>  #>   #>   (obj |> print_lf(3))      # Ditto, then rendered visible #> [1] \"Lorem ipsum dolor sit amet\" #>  #>   #>   #> [1] \"Lorem ipsum dolor sit amet\" obj |> print_lf(3) |> paste(\"consectetur adipiscing elit\", sep = \", \") #> [1] \"Lorem ipsum dolor sit amet\" #>  #>   #>   #> [1] \"Lorem ipsum dolor sit amet, consectetur adipiscing elit\"  rm(obj)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/odds_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Odds Ratios, Standard Errors, Confidence Intervals and P-Values for Binomial GLMs — odds_ratio","title":"Odds Ratios, Standard Errors, Confidence Intervals and P-Values for Binomial GLMs — odds_ratio","text":"odds_ratio() calculates odds ratios profiled confidence intervals GLMs outputs together estimates regression coefficients, standard errors probabilities.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/odds_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Odds Ratios, Standard Errors, Confidence Intervals and P-Values for Binomial GLMs — odds_ratio","text":"","code":"odds_ratio(object, ...)  # S3 method for binom_contingency odds_ratio(   object,   ...,   .ind_var,   .level = 0.95,   .printcall = FALSE,   .stat = FALSE,   .print_contr = FALSE )  # S3 method for data.frame odds_ratio(   object,   ...,   .dep_var = cbind(pn, qn),   .ind_var,   .level = 0.95,   .printcall = FALSE,   .stat = FALSE,   .print_contr = FALSE )  # S3 method for default odds_ratio(   object,   ...,   .level = 0.95,   .printcall = TRUE,   .stat = FALSE,   .print_contr = FALSE )"},{"path":"https://mark-eis.github.io/ParaAnita/reference/odds_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Odds Ratios, Standard Errors, Confidence Intervals and P-Values for Binomial GLMs — odds_ratio","text":"object object odds ratios calculated, may binom_contingency table, data frame (data frame extension e.g., tibble), glm. ... arguments passed methods. .ind_var <data-masking> quoted name independent variable, may either character vector factor. .level confidence level required; default 0.95. .printcall logical, whether print call GLM. .stat logical, whether print z t statistic GLM; default FALSE. .print_contr logical. TRUE, .ind_var contrast attribute set, contrast matrix printed; default FALSE. .dep_var <data-masking> quoted name(s) response variable(s) data representing number successes failures respectively, see glm(); default cbind(pn, qn).","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/odds_ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Odds Ratios, Standard Errors, Confidence Intervals and P-Values for Binomial GLMs — odds_ratio","text":"object classes \"odds_ratio\", \"announce\", inheriting tibble, containing following columns: - parameter names model parameters. estimate estimate regression coefficient. se standard error estimate. z (t) value Optionally, value z (t) statistic estimate. p_val p-value estimate. odds_ratio odds ratio. ci lower upper confidence intervals odds ratio, default 2.5% 97.5% levels. sig Stars statistical significance.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/odds_ratio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Odds Ratios, Standard Errors, Confidence Intervals and P-Values for Binomial GLMs — odds_ratio","text":"odds_ratio() generic function used calculate odds ratios profiled confidence intervals univariable GLMs single categorical independent variable, multivariable GLMs, output together estimates regression coefficients, standard errors probabilities. function invokes particular methods depend class first argument. default S3 method objects class \"glm\" returned glm() can used unvariable GLMs, multivariable GLMs calculate \"adjusted\" odds ratios. Optionally, printcall = TRUE original call glm() may retrieved \"glm\" object supplied argument printed. Currently, S3 methods classes \"data.frame\" \"binom_contingency\" can used univariable GLMs. .print_contr = TRUE factor independent variables contrast attribute set, contrast matrix printed. Contrasts may set conveniently factors data using set_contrasts(), see examples. Confidence intervals odds ratios based profile likelihood calculated using confint.glm(). confidence level may adjusted using .level, otherwise default value 0.95 used.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/odds_ratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Odds Ratios, Standard Errors, Confidence Intervals and P-Values for Binomial GLMs — odds_ratio","text":"","code":"## Create simulated Bernoulli data (d <- bernoulli_data()) #> ___________________________ #> Simulated Bernoulli Data: - #>  #> # A tibble: 330 × 2 #>    iv       dv #>  * <fct> <int> #>  1 a         1 #>  2 a         0 #>  3 a         0 #>  4 a         1 #>  5 a         1 #>  6 a         1 #>  7 a         0 #>  8 a         1 #>  9 a         0 #> 10 a         0 #> # ℹ 320 more rows  ## Invoking the S3 method for class \"data.frame\" and using the default ## contrasts from options(\"contrasts\") ## — contrasts not printed  d |> odds_ratio(.dep_var = dv, .ind_var = iv) #> Waiting for profiling to be done... #> ____________________________ #> Estimates and Odds Ratios: - #>  #> # A tibble: 5 × 7 #>   parameter   estimate    se      p_val odds_ratio ci[,\"2.5 %\"] sig   #> * <chr>          <dbl> <dbl>      <dbl>      <dbl>        <dbl> <fct> #> 1 (Intercept)    0.305 0.249 0.220          1           NA      NS    #> 2 ivb           -0.931 0.359 0.00947        0.394        0.193  **    #> 3 ivc           -0.865 0.357 0.0154         0.421        0.207  *     #> 4 ivd           -1.53  0.385 0.0000716      0.217        0.0995 ***   #> 5 ive           -2.44  0.471 0.00000023     0.0874       0.0323 ***   #> # ℹ 1 more variable: ci[2] <dbl>  ## Using the default contrasts from options(\"contrasts\") ## — adjust confidence level, contrasts are printed  d |> odds_ratio(.dep_var = dv, .ind_var = iv, .level = 0.99, .print_contr = TRUE) #> Waiting for profiling to be done... #> ____________________________ #> Estimates and Odds Ratios: - #>  #> # A tibble: 5 × 7 #>   parameter   estimate    se      p_val odds_ratio ci[,\"0.5 %\"] sig   #> * <chr>          <dbl> <dbl>      <dbl>      <dbl>        <dbl> <fct> #> 1 (Intercept)    0.305 0.249 0.220          1           NA      NS    #> 2 ivb           -0.931 0.359 0.00947        0.394        0.153  **    #> 3 ivc           -0.865 0.357 0.0154         0.421        0.165  *     #> 4 ivd           -1.53  0.385 0.0000716      0.217        0.0771 ***   #> 5 ive           -2.44  0.471 0.00000023     0.0874       0.0228 ***   #> # ℹ 1 more variable: ci[2] <dbl> #> ____________ #> Contrasts: - #>  #> $iv #> [1] \"contr.treatment\" #>   ## Specifying treatment contrasts, with last level as base ## — contrasts not printed d |> set_contrasts(iv, base =  99L, contr = contr.treatment) |>     odds_ratio(.dep_var = dv, .ind_var = iv) #> Waiting for profiling to be done... #> ____________________________ #> Estimates and Odds Ratios: - #>  #> # A tibble: 5 × 7 #>   parameter   estimate    se      p_val odds_ratio ci[,\"2.5 %\"] sig   #> * <chr>          <dbl> <dbl>      <dbl>      <dbl>        <dbl> <fct> #> 1 (Intercept)   -2.13  0.400 0.0000001        1          NA     ***   #> 2 iva            2.44  0.471 0.00000023      11.4         4.78  ***   #> 3 ivb            1.51  0.476 0.00156          4.51        1.85  **    #> 4 ivc            1.57  0.475 0.000926         4.82        1.98  ***   #> 5 ivd            0.908 0.496 0.0672           2.48        0.966 .     #> # ℹ 1 more variable: ci[2] <dbl>  ## Specifying treatment contrasts, with last level as base ## — contrasts printed d |> set_contrasts(iv, base =  99L, contr = contr.treatment) |>     odds_ratio(.dep_var = dv, .ind_var = iv, .print_contr = TRUE) #> Waiting for profiling to be done... #> ____________________________ #> Estimates and Odds Ratios: - #>  #> # A tibble: 5 × 7 #>   parameter   estimate    se      p_val odds_ratio ci[,\"2.5 %\"] sig   #> * <chr>          <dbl> <dbl>      <dbl>      <dbl>        <dbl> <fct> #> 1 (Intercept)   -2.13  0.400 0.0000001        1          NA     ***   #> 2 iva            2.44  0.471 0.00000023      11.4         4.78  ***   #> 3 ivb            1.51  0.476 0.00156          4.51        1.85  **    #> 4 ivc            1.57  0.475 0.000926         4.82        1.98  ***   #> 5 ivd            0.908 0.496 0.0672           2.48        0.966 .     #> # ℹ 1 more variable: ci[2] <dbl> #> ____________ #> Contrasts: - #>  #> $iv #>   a b c d #> a 1 0 0 0 #> b 0 1 0 0 #> c 0 0 1 0 #> d 0 0 0 1 #> e 0 0 0 0 #>   ## Helmert contrasts specified ## — contrasts printed d |> set_contrasts(iv, contr = contr.helmert) |>     odds_ratio(.dep_var = dv, .ind_var = iv, .print_contr = TRUE) #> Waiting for profiling to be done... #> ____________________________ #> Estimates and Odds Ratios: - #>  #> # A tibble: 5 × 7 #>   parameter   estimate     se    p_val odds_ratio ci[,\"2.5 %\"] [,\"97.5 %\"] sig   #> * <chr>          <dbl>  <dbl>    <dbl>      <dbl>        <dbl>       <dbl> <fct> #> 1 (Intercept)   -0.847 0.133  0             1           NA          NA     ***   #> 2 iv1           -0.466 0.179  0.00947       0.628        0.439       0.889 **    #> 3 iv2           -0.133 0.104  0.201         0.875        0.712       1.07  NS    #> 4 iv3           -0.233 0.0821 0.00461       0.792        0.670       0.926 **    #> 5 iv4           -0.321 0.0842 0.000137      0.725        0.605       0.845 ***   #> ____________ #> Contrasts: - #>  #> $iv #>   [,1] [,2] [,3] [,4] #> a   -1   -1   -1   -1 #> b    1   -1   -1   -1 #> c    0    2   -1   -1 #> d    0    0    3   -1 #> e    0    0    0    4 #>   # Set default unordered contrasts in options(\"contrasts\") to Helmert options(\"contrasts\" =  c(unordered = \"contr.helmert\", ordered = \"contr.poly\")) getOption(\"contrasts\") #>       unordered         ordered  #> \"contr.helmert\"    \"contr.poly\"   ## Using the default, unordered Helmert contrasts ## — contrasts printed d |> odds_ratio(.dep_var = dv, .ind_var = iv, .print_contr = TRUE) #> Waiting for profiling to be done... #> ____________________________ #> Estimates and Odds Ratios: - #>  #> # A tibble: 5 × 7 #>   parameter   estimate     se    p_val odds_ratio ci[,\"2.5 %\"] [,\"97.5 %\"] sig   #> * <chr>          <dbl>  <dbl>    <dbl>      <dbl>        <dbl>       <dbl> <fct> #> 1 (Intercept)   -0.847 0.133  0             1           NA          NA     ***   #> 2 iv1           -0.466 0.179  0.00947       0.628        0.439       0.889 **    #> 3 iv2           -0.133 0.104  0.201         0.875        0.712       1.07  NS    #> 4 iv3           -0.233 0.0821 0.00461       0.792        0.670       0.926 **    #> 5 iv4           -0.321 0.0842 0.000137      0.725        0.605       0.845 ***   #> ____________ #> Contrasts: - #>  #> $iv #> [1] \"contr.helmert\" #>   ## Specify treatment contrasts ## — contrasts printed d |> set_contrasts(iv, contr = contr.treatment) |>     odds_ratio(.dep_var = dv, .ind_var = iv, .print_contr = TRUE) #> Waiting for profiling to be done... #> ____________________________ #> Estimates and Odds Ratios: - #>  #> # A tibble: 5 × 7 #>   parameter   estimate    se      p_val odds_ratio ci[,\"2.5 %\"] sig   #> * <chr>          <dbl> <dbl>      <dbl>      <dbl>        <dbl> <fct> #> 1 (Intercept)    0.305 0.249 0.220          1           NA      NS    #> 2 ivb           -0.931 0.359 0.00947        0.394        0.193  **    #> 3 ivc           -0.865 0.357 0.0154         0.421        0.207  *     #> 4 ivd           -1.53  0.385 0.0000716      0.217        0.0995 ***   #> 5 ive           -2.44  0.471 0.00000023     0.0874       0.0323 ***   #> # ℹ 1 more variable: ci[2] <dbl> #> ____________ #> Contrasts: - #>  #> $iv #>   b c d e #> a 0 0 0 0 #> b 1 0 0 0 #> c 0 1 0 0 #> d 0 0 1 0 #> e 0 0 0 1 #>   # Restore default contrasts in options(\"contrasts\") options(\"contrasts\" =  c(unordered = \"contr.treatment\", ordered = \"contr.poly\")) options(\"contrasts\") #> $contrasts #>         unordered           ordered  #> \"contr.treatment\"      \"contr.poly\"  #>   ## Invoking the S3 method for class \"binom_contingency\"  d |> binom_contingency(dv, iv) |> odds_ratio(.ind_var = iv) #> Waiting for profiling to be done... #> ____________________________ #> Estimates and Odds Ratios: - #>  #> # A tibble: 5 × 7 #>   parameter   estimate    se      p_val odds_ratio ci[,\"2.5 %\"] sig   #> * <chr>          <dbl> <dbl>      <dbl>      <dbl>        <dbl> <fct> #> 1 (Intercept)    0.305 0.249 0.220          1           NA      NS    #> 2 ivb           -0.931 0.359 0.00947        0.394        0.193  **    #> 3 ivc           -0.865 0.357 0.0154         0.421        0.207  *     #> 4 ivd           -1.53  0.385 0.0000716      0.217        0.0995 ***   #> 5 ive           -2.44  0.471 0.00000023     0.0874       0.0323 ***   #> # ℹ 1 more variable: ci[2] <dbl>  ## Create multivariable glm object and specify treatment contrasts (d <- list(     iv2 = list(g = c(\"a\", \"c\", \"e\"), h = c(\"b\", \"d\", \"f\")),     iv3 = list(i = c(\"a\", \"b\", \"c\"), j = c(\"d\", \"e\", \"f\")) ) |> add_grps(binom_data(levels = 6), iv, .key = _)) #> __________________________ #> Simulated Binomial Data: - #>  #> # A tibble: 6 × 5 #>   iv    iv2   iv3      pn    qn #>   <fct> <fct> <fct> <int> <int> #> 1 a     g     i        36    30 #> 2 b     h     i        22    44 #> 3 c     g     i        25    41 #> 4 d     h     j        16    50 #> 5 e     g     j        10    56 #> 6 f     h     j         8    58  set_contr_treat(d, num_range(\"iv\", 2:3)) <- c(1L, 2L) get_contr_data(d) #> $iv #> NULL #>  #> $iv2 #>   h #> g 0 #> h 1 #>  #> $iv3 #>   i #> i 1 #> j 0 #>   glm1 <- glm(cbind(pn, qn) ~ iv2 + iv3, family = binomial, data = d)  glm1 |> summary() #>  #> Call: #> glm(formula = cbind(pn, qn) ~ iv2 + iv3, family = binomial, data = d) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  -1.4087     0.2425  -5.810 6.26e-09 *** #> iv2h         -0.2544     0.2421  -1.051    0.293     #> iv3i          1.1661     0.2488   4.687 2.77e-06 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 40.1638  on 5  degrees of freedom #> Residual deviance:  9.2422  on 3  degrees of freedom #> AIC: 41.151 #>  #> Number of Fisher Scoring iterations: 4 #>   ## Invoking the S3 method for class \"glm\" glm1 |> odds_ratio() #> glm(formula = cbind(pn, qn) ~ iv2 + iv3, family = binomial, data = d) #> Waiting for profiling to be done... #> ____________________________ #> Estimates and Odds Ratios: - #>  #> # A tibble: 3 × 7 #>   parameter   estimate    se      p_val odds_ratio ci[,\"2.5 %\"] sig   #> * <chr>          <dbl> <dbl>      <dbl>      <dbl>        <dbl> <fct> #> 1 (Intercept)   -1.41  0.242 0.00000001      1           NA     ***   #> 2 iv2h          -0.254 0.242 0.293           0.775        0.482 NS    #> 3 iv3i           1.17  0.249 0.00000277      3.21         1.99  ***   #> # ℹ 1 more variable: ci[2] <dbl>  glm1 |> odds_ratio(.printcall = FALSE, .stat = TRUE, .print_contr = TRUE) #> Waiting for profiling to be done... #> ____________________________ #> Estimates and Odds Ratios: - #>  #> # A tibble: 3 × 8 #>   parameter   estimate    se `z value`      p_val odds_ratio ci[,\"2.5 %\"] sig   #> * <chr>          <dbl> <dbl>     <dbl>      <dbl>      <dbl>        <dbl> <fct> #> 1 (Intercept)   -1.41  0.242     -5.81 0.00000001      1           NA     ***   #> 2 iv2h          -0.254 0.242     -1.05 0.293           0.775        0.482 NS    #> 3 iv3i           1.17  0.249      4.69 0.00000277      3.21         1.99  ***   #> # ℹ 1 more variable: ci[2] <dbl> #> ____________ #> Contrasts: - #>  #> $iv2 #>   h #> g 0 #> h 1 #>  #> $iv3 #>   i #> i 1 #> j 0 #>   ## Compare S3 method for class \"glm\" to that for \"data.frame\" ## — only possible for univariable analyses (d <- binom_data()) #> __________________________ #> Simulated Binomial Data: - #>  #> # A tibble: 5 × 3 #>   iv       pn    qn #> * <fct> <int> <int> #> 1 a        36    30 #> 2 b        23    43 #> 3 c        19    47 #> 4 d        12    54 #> 5 e         7    59  glm(cbind(pn, qn) ~ iv, family = binomial, data = d) |>     odds_ratio() #> glm(formula = cbind(pn, qn) ~ iv, family = binomial, data = d) #> Waiting for profiling to be done... #> ____________________________ #> Estimates and Odds Ratios: - #>  #> # A tibble: 5 × 7 #>   parameter   estimate    se     p_val odds_ratio ci[,\"2.5 %\"] [,\"97.5 %\"] sig   #> * <chr>          <dbl> <dbl>     <dbl>      <dbl>        <dbl>       <dbl> <fct> #> 1 (Intercept)    0.182 0.247 0.461         1           NA           NA     NS    #> 2 ivb           -0.808 0.358 0.0238        0.446        0.219        0.892 *     #> 3 ivc           -1.09  0.367 0.00307       0.337        0.162        0.685 **    #> 4 ivd           -1.69  0.404 0.0000295     0.185        0.0813       0.399 ***   #> 5 ive           -2.31  0.470 0.0000009     0.0989       0.0366       0.236 ***    d |> odds_ratio(.ind_var = iv) #> Waiting for profiling to be done... #> ____________________________ #> Estimates and Odds Ratios: - #>  #> # A tibble: 5 × 7 #>   parameter   estimate    se     p_val odds_ratio ci[,\"2.5 %\"] [,\"97.5 %\"] sig   #> * <chr>          <dbl> <dbl>     <dbl>      <dbl>        <dbl>       <dbl> <fct> #> 1 (Intercept)    0.182 0.247 0.461         1           NA           NA     NS    #> 2 ivb           -0.808 0.358 0.0238        0.446        0.219        0.892 *     #> 3 ivc           -1.09  0.367 0.00307       0.337        0.162        0.685 **    #> 4 ivd           -1.69  0.404 0.0000295     0.185        0.0813       0.399 ***   #> 5 ive           -2.31  0.470 0.0000009     0.0989       0.0366       0.236 ***    ## Helmert contrasts given more easily readable names d |> set_contrasts(iv) <- contr.helmert helm_names(d$iv) <- c(\":\", \"v\") d |> get_contrasts(iv) #>   a v b a:b v c a:c v d a:d v e #> a    -1      -1      -1      -1 #> b     1      -1      -1      -1 #> c     0       2      -1      -1 #> d     0       0       3      -1 #> e     0       0       0       4  ## Add separator as last little tweak ;-) contr_colpfx(d$iv) <- \": \"  glm(cbind(pn, qn) ~ iv, family = binomial, data = d) |>     odds_ratio() #> glm(formula = cbind(pn, qn) ~ iv, family = binomial, data = d) #> Waiting for profiling to be done... #> ____________________________ #> Estimates and Odds Ratios: - #>  #> # A tibble: 5 × 7 #>   parameter   estimate     se    p_val odds_ratio ci[,\"2.5 %\"] [,\"97.5 %\"] sig   #> * <chr>          <dbl>  <dbl>    <dbl>      <dbl>        <dbl>       <dbl> <fct> #> 1 (Intercept)   -0.997 0.136  0             1           NA          NA     ***   #> 2 iv: a v b     -0.404 0.179  0.0238        0.668        0.468       0.945 *     #> 3 iv: a:b v c   -0.228 0.108  0.0355        0.796        0.640       0.981 *     #> 4 iv: a:c v d   -0.264 0.0881 0.00278       0.768        0.640       0.907 **    #> 5 iv: a:d v e   -0.284 0.0846 0.000795      0.753        0.627       0.878 ***    d |> odds_ratio(.ind_var = iv) #> Waiting for profiling to be done... #> ____________________________ #> Estimates and Odds Ratios: - #>  #> # A tibble: 5 × 7 #>   parameter   estimate     se    p_val odds_ratio ci[,\"2.5 %\"] [,\"97.5 %\"] sig   #> * <chr>          <dbl>  <dbl>    <dbl>      <dbl>        <dbl>       <dbl> <fct> #> 1 (Intercept)   -0.997 0.136  0             1           NA          NA     ***   #> 2 iv: a v b     -0.404 0.179  0.0238        0.668        0.468       0.945 *     #> 3 iv: a:b v c   -0.228 0.108  0.0355        0.796        0.640       0.981 *     #> 4 iv: a:c v d   -0.264 0.0881 0.00278       0.768        0.640       0.907 **    #> 5 iv: a:d v e   -0.284 0.0846 0.000795      0.753        0.627       0.878 ***    ## Printing lengthier output with print_all() binom_data(26, 100) |>     odds_ratio(.ind_var = iv, .print_contr = TRUE) |>     print_all() #> Waiting for profiling to be done... #> ____________________________ #> Estimates and Odds Ratios: - #>  #> # A tibble: 26 × 7 #>    parameter   estimate    se     p_val odds_ratio ci[,\"2.5 %\"] sig   #>  * <chr>          <dbl> <dbl>     <dbl>      <dbl>        <dbl> <fct> #>  1 (Intercept)    0.241 0.201 0.231         1           NA      NS    #>  2 ivb           -0.402 0.284 0.158         0.669        0.382  NS    #>  3 ivc           -0.201 0.284 0.479         0.818        0.468  NS    #>  4 ivd           -0.361 0.284 0.204         0.697        0.398  NS    #>  5 ive           -0.605 0.286 0.0345        0.546        0.310  *     #>  6 ivf           -0.321 0.284 0.258         0.725        0.414  NS    #>  7 ivg           -0.773 0.289 0.00744       0.461        0.260  **    #>  8 ivh           -0.904 0.292 0.00194       0.405        0.227  **    #>  9 ivi           -0.482 0.285 0.0905        0.617        0.352  .     #> 10 ivj           -1.04  0.296 0.000426      0.353        0.196  ***   #> 11 ivk           -0.731 0.288 0.0112        0.482        0.272  *     #> 12 ivl           -0.904 0.292 0.00194       0.405        0.227  **    #> 13 ivm           -1.09  0.297 0.000247      0.337        0.186  ***   #> 14 ivn           -1.04  0.296 0.000426      0.353        0.196  ***   #> 15 ivo           -1.24  0.302 0.0000432     0.291        0.159  ***   #> 16 ivp           -1.09  0.297 0.000247      0.337        0.186  ***   #> 17 ivq           -1.34  0.306 0.0000123     0.262        0.142  ***   #> 18 ivr           -1.39  0.309 0.0000064     0.248        0.134  ***   #> 19 ivs           -1.51  0.314 0.0000016     0.222        0.118  ***   #> 20 ivt           -1.98  0.345 0             0.139        0.0686 ***   #> 21 ivu           -1.83  0.334 0             0.161        0.0818 ***   #> 22 ivv           -2.14  0.359 0             0.117        0.0561 ***   #> 23 ivw           -1.90  0.339 0             0.150        0.0751 ***   #> 24 ivx           -1.98  0.345 0             0.139        0.0686 ***   #> 25 ivy           -2.33  0.378 0             0.0971       0.0444 ***   #> 26 ivz           -2.23  0.368 0             0.107        0.0502 ***   #> # ℹ 1 more variable: ci[2] <dbl> #> ____________ #> Contrasts: - #>  #> $iv #> [1] \"contr.treatment\" #>   rm(d, glm1)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/plot_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Model Predictions with Error Bars for Univariable GLM — Plot_Model","title":"Plot Model Predictions with Error Bars for Univariable GLM — Plot_Model","text":"S3 method enable ggplot() package ggplot2 plot \"glm_plotdata\" objects ouptut glm_plotdata().","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/plot_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Model Predictions with Error Bars for Univariable GLM — Plot_Model","text":"","code":"# S3 method for glm_plotdata ggplot(   data = NULL,   mapping = aes(),   as_percent = FALSE,   rev_y = FALSE,   ...,   environment = parent.frame() )"},{"path":"https://mark-eis.github.io/ParaAnita/reference/plot_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Model Predictions with Error Bars for Univariable GLM — Plot_Model","text":"data Default dataset use plot. already data.frame, converted one fortify(). specified, must supplied layer added plot. mapping Default list aesthetic mappings use plot. specified, must supplied layer added plot. as_percent logical. TRUE, y-axis uses percentage scale; default FALSE. rev_y logical. TRUE, direction y-axis reversed, may useful plotting linear predictors; default FALSE. ... arguments passed methods. environment Used prior tidy evaluation.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/plot_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Model Predictions with Error Bars for Univariable GLM — Plot_Model","text":"ggplot object.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/plot_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Model Predictions with Error Bars for Univariable GLM — Plot_Model","text":"S3 method plots model predictions error bars representing confidence intervals standard errors univariable glm categorical independent variable, optionally allowing representation groupings levels independent variable faceting number plots. ggplot.glm_plotdata() recognises factor character column data named grouped plotting grouped levels independent variable grouped within underlying model. levels indeed grouped model, data bars plotted colour-coded borders representing groups, ungrouped observed values contained data column level plotted symbols. ungrouped levels plotted, grouped column contain NA values character column data containing names independent variables used faceting may identified setting attribute \"facet_by\" data. Names variables used faceting may converted informative facet labels using vectorised labeller() function, see labeller facet_wrap().","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/plot_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Model Predictions with Error Bars for Univariable GLM — Plot_Model","text":"","code":"## Example uses randomly generated data; re-running may be worthwhile.    oldtheme <- theme_get()   ## Save ggplot defaults for later restoration  ## Set ggplot defaults for pretty printing theme_update(   plot.title = element_text(color = \"black\", size = 20, hjust = 0.5),   plot.subtitle = element_text(color = \"black\", size = 18, hjust = 0.5),   axis.text.x = element_text(color = \"black\", size = 15),   axis.text.y = element_text(color = \"black\", size = 15),   axis.title.x = element_text(color = \"black\", size = 15),   axis.title.y = element_text(color = \"black\", size = 15),   strip.text.x = element_text(color = \"black\", size = 15),   legend.position = \"none\" )  ## Create binomial data with groupings (d <- list(iv2 = list(ab = c(\"a\", \"b\"), cd = c(\"c\", \"d\"))) |>     add_grps(binom_data(), iv, .key = _)) #> __________________________ #> Simulated Binomial Data: - #>  #> # A tibble: 5 × 4 #>   iv    iv2      pn    qn #>   <fct> <fct> <int> <int> #> 1 a     ab       41    25 #> 2 b     ab       20    46 #> 3 c     cd       19    47 #> 4 d     cd       10    56 #> 5 e     e         5    61  ## Set plot title and axis labels plabs<- labs(   x = \"Level\",   y = \"Linear predictor scale (logit)\",   title = \"Example for ggplot.glm_plotdata()\" )  ## Tweak to improve plot subtitles - see var_labs() var_labs <- as_labeller(toupper)  ## Ungrouped plot data on GLM linear predictor scale (dp <- glm_plotdata(d, .ind_var = iv)) #> ________________ #> GLM Plot Data: - #>  #> # A tibble: 5 × 7 #>   level grouped     n    obs   pred    lower  upper #> * <fct> <fct>   <int>  <dbl>  <dbl>    <dbl>  <dbl> #> 1 a     NA         66  0.495  0.495 -0.00449  0.994 #> 2 b     NA         66 -0.833 -0.833 -1.36    -0.306 #> 3 c     NA         66 -0.906 -0.906 -1.44    -0.371 #> 4 d     NA         66 -1.72  -1.72  -2.40    -1.05  #> 5 e     NA         66 -2.50  -2.50  -3.42    -1.59   ## Plot model predictions and error bars with reversed y-axis dp |> ggplot(rev_y = TRUE) + plabs   ## Grouped plot data on GLM linear predictor scale (dp <- glm_plotdata(d, .ind_var = iv2, .ungroup = iv)) #> ________________ #> GLM Plot Data: - #>  #> # A tibble: 5 × 7 #>   level grouped     n    obs   pred  lower  upper #> * <fct> <fct>   <int>  <dbl>  <dbl>  <dbl>  <dbl> #> 1 a     ab         66  0.495 -0.152 -0.495  0.192 #> 2 b     ab         66 -0.833 -0.152 -0.495  0.192 #> 3 c     cd         66 -0.906 -1.27  -1.68  -0.854 #> 4 d     cd         66 -1.72  -1.27  -1.68  -0.854 #> 5 e     e          66 -2.50  -2.50  -3.42  -1.59   ## Plot model predictions and error bars with reversed y-axis dp |> ggplot(rev_y = TRUE) + plabs   ## Revise y-axis title plabs$y <- \"Proportion Positive (%)\"  ## Ungrouped plot data on GLM reponse scale (dp <- glm_plotdata(d, .ind_var = iv, type = \"response\")) #> ________________ #> GLM Plot Data: - #>  #> # A tibble: 5 × 7 #>   level grouped     n    obs   pred  lower upper #> * <fct> <fct>   <int>  <dbl>  <dbl>  <dbl> <dbl> #> 1 a     NA         66 0.621  0.621  0.499  0.730 #> 2 b     NA         66 0.303  0.303  0.204  0.424 #> 3 c     NA         66 0.288  0.288  0.191  0.408 #> 4 d     NA         66 0.152  0.152  0.0833 0.260 #> 5 e     NA         66 0.0758 0.0758 0.0318 0.170  ## Plot model predictions and error bars dp |> ggplot(as_percent = TRUE) + plabs   ## Grouped plot data on GLM reponse scale (dp <- glm_plotdata(d, .ind_var = iv2, .ungroup = iv, type = \"response\")) #> ________________ #> GLM Plot Data: - #>  #> # A tibble: 5 × 7 #>   level grouped     n    obs   pred  lower upper #> * <fct> <fct>   <int>  <dbl>  <dbl>  <dbl> <dbl> #> 1 a     ab         66 0.621  0.462  0.379  0.548 #> 2 b     ab         66 0.303  0.462  0.379  0.548 #> 3 c     cd         66 0.288  0.220  0.157  0.299 #> 4 d     cd         66 0.152  0.220  0.157  0.299 #> 5 e     e          66 0.0758 0.0758 0.0318 0.170  ## Plot model predictions and error bars dp |> ggplot(as_percent = TRUE) + plabs   ## Override default subtitle plabs$subtitle <- \"Fascinating Results\" dp |> ggplot(as_percent = TRUE) + plabs   theme_set(oldtheme)    ## Restore original ggplot defaults rm(d, dp, oldtheme, plabs)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/print_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Print All (or More) of an Object — print_all","title":"Print All (or More) of an Object — print_all","text":"print_all() generic function extended printing object, instance printing rows tibble, derived class even regular data frame, optionally following printing specified number linefeeds. generic function, new printing methods can easily added new class.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/print_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print All (or More) of an Object — print_all","text":"","code":"print_all(x, ...)  # S3 method for data.frame print_all(   x,   linefeeds = NULL,   ...,   digits = NULL,   quote = FALSE,   right = TRUE,   row.names = TRUE,   max = NULL )  # S3 method for tbl print_all(   x,   linefeeds = NULL,   width = NULL,   ...,   max_extra_cols = NULL,   max_footer_lines = NULL )  # S3 method for tbl_df print_all(   x,   linefeeds = NULL,   width = NULL,   ...,   max_extra_cols = NULL,   max_footer_lines = NULL )  # S3 method for odds_ratio print_all(x, linefeeds = NULL, ...)  # S3 method for htest print_all(x, ...)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/print_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print All (or More) of an Object — print_all","text":"x object tibble data frame. ... arguments passed methods. linefeeds positive integer specifying number linefeeds follow printed output; default NULL. digits minimal number significant digits, see     print.default. quote logical, indicating whether strings     printed surrounding quotes. right logical, indicating whether strings     right aligned. row.names logical (character vector), indicating whether (    ) row names printed. max numeric NULL, specifying maximal number     entries printed.  default, NULL,     getOption(\"max.print\") used. width used max.levels NULL, see . max_extra_cols Number extra columns print abbreviated information , width small entire tibble. NULL, max_extra_cols option used. previously defined n_extra argument soft-deprecated. max_footer_lines Maximum number footer lines. NULL, max_footer_lines option used.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/print_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print All (or More) of an Object — print_all","text":"Invisibly returns argument.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/print_all.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print All (or More) of an Object — print_all","text":"tibble x, print_all(x) equivalent print(x, n = nrow(x)), followed required n linefeeds generated using cat(rep(\"\\n\", n)). linefeeds argument may useful within piped sequence separate output subsequent printing. vector length > 1 entered linefeeds, first element used, negative integers converted zero .e., line feeds.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/print_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print All (or More) of an Object — print_all","text":"","code":"(tib <- tibble(x = 1:26, y = LETTERS[x], z = paste0(x, y))) #> # A tibble: 26 × 3 #>        x y     z     #>    <int> <chr> <chr> #>  1     1 A     1A    #>  2     2 B     2B    #>  3     3 C     3C    #>  4     4 D     4D    #>  5     5 E     5E    #>  6     6 F     6F    #>  7     7 G     7G    #>  8     8 H     8H    #>  9     9 I     9I    #> 10    10 J     10J   #> # ℹ 16 more rows tib |> print_all() #> # A tibble: 26 × 3 #>        x y     z     #>    <int> <chr> <chr> #>  1     1 A     1A    #>  2     2 B     2B    #>  3     3 C     3C    #>  4     4 D     4D    #>  5     5 E     5E    #>  6     6 F     6F    #>  7     7 G     7G    #>  8     8 H     8H    #>  9     9 I     9I    #> 10    10 J     10J   #> 11    11 K     11K   #> 12    12 L     12L   #> 13    13 M     13M   #> 14    14 N     14N   #> 15    15 O     15O   #> 16    16 P     16P   #> 17    17 Q     17Q   #> 18    18 R     18R   #> 19    19 S     19S   #> 20    20 T     20T   #> 21    21 U     21U   #> 22    22 V     22V   #> 23    23 W     23W   #> 24    24 X     24X   #> 25    25 Y     25Y   #> 26    26 Z     26Z   tib |> print_all() |> names() #> # A tibble: 26 × 3 #>        x y     z     #>    <int> <chr> <chr> #>  1     1 A     1A    #>  2     2 B     2B    #>  3     3 C     3C    #>  4     4 D     4D    #>  5     5 E     5E    #>  6     6 F     6F    #>  7     7 G     7G    #>  8     8 H     8H    #>  9     9 I     9I    #> 10    10 J     10J   #> 11    11 K     11K   #> 12    12 L     12L   #> 13    13 M     13M   #> 14    14 N     14N   #> 15    15 O     15O   #> 16    16 P     16P   #> 17    17 Q     17Q   #> 18    18 R     18R   #> 19    19 S     19S   #> 20    20 T     20T   #> 21    21 U     21U   #> 22    22 V     22V   #> 23    23 W     23W   #> 24    24 X     24X   #> 25    25 Y     25Y   #> 26    26 Z     26Z   #> [1] \"x\" \"y\" \"z\" tib |> print_all(linefeeds = 3) |> names() #> # A tibble: 26 × 3 #>        x y     z     #>    <int> <chr> <chr> #>  1     1 A     1A    #>  2     2 B     2B    #>  3     3 C     3C    #>  4     4 D     4D    #>  5     5 E     5E    #>  6     6 F     6F    #>  7     7 G     7G    #>  8     8 H     8H    #>  9     9 I     9I    #> 10    10 J     10J   #> 11    11 K     11K   #> 12    12 L     12L   #> 13    13 M     13M   #> 14    14 N     14N   #> 15    15 O     15O   #> 16    16 P     16P   #> 17    17 Q     17Q   #> 18    18 R     18R   #> 19    19 S     19S   #> 20    20 T     20T   #> 21    21 U     21U   #> 22    22 V     22V   #> 23    23 W     23W   #> 24    24 X     24X   #> 25    25 Y     25Y   #> 26    26 Z     26Z   #>  #>   #>   #> [1] \"x\" \"y\" \"z\"  df <- tib |> as.data.frame() df |> print_all()                         ## Does nothing more than regular print() #>     x y   z #> 1   1 A  1A #> 2   2 B  2B #> 3   3 C  3C #> 4   4 D  4D #> 5   5 E  5E #> 6   6 F  6F #> 7   7 G  7G #> 8   8 H  8H #> 9   9 I  9I #> 10 10 J 10J #> 11 11 K 11K #> 12 12 L 12L #> 13 13 M 13M #> 14 14 N 14N #> 15 15 O 15O #> 16 16 P 16P #> 17 17 Q 17Q #> 18 18 R 18R #> 19 19 S 19S #> 20 20 T 20T #> 21 21 U 21U #> 22 22 V 22V #> 23 23 W 23W #> 24 24 X 24X #> 25 25 Y 25Y #> 26 26 Z 26Z df |> print_all(linefeeds = 2) |> names() ## Regular data frame printing, with line feeds #>     x y   z #> 1   1 A  1A #> 2   2 B  2B #> 3   3 C  3C #> 4   4 D  4D #> 5   5 E  5E #> 6   6 F  6F #> 7   7 G  7G #> 8   8 H  8H #> 9   9 I  9I #> 10 10 J 10J #> 11 11 K 11K #> 12 12 L 12L #> 13 13 M 13M #> 14 14 N 14N #> 15 15 O 15O #> 16 16 P 16P #> 17 17 Q 17Q #> 18 18 R 18R #> 19 19 S 19S #> 20 20 T 20T #> 21 21 U 21U #> 22 22 V 22V #> 23 23 W 23W #> 24 24 X 24X #> 25 25 Y 25Y #> 26 26 Z 26Z #>  #>   #> [1] \"x\" \"y\" \"z\"  binom_data(26, 100) |>     odds_ratio(.ind_var = iv, .print_contr = TRUE) |>     print_all() #> Waiting for profiling to be done... #> ____________________________ #> Estimates and Odds Ratios: - #>  #> # A tibble: 26 × 7 #>    parameter   estimate    se     p_val odds_ratio ci[,\"2.5 %\"] sig   #>  * <chr>          <dbl> <dbl>     <dbl>      <dbl>        <dbl> <fct> #>  1 (Intercept)   0      0.2   1             1           NA      NS    #>  2 ivb           0      0.283 1             1            0.574  NS    #>  3 ivc          -0.405  0.286 0.156         0.667        0.379  NS    #>  4 ivd          -0.405  0.286 0.156         0.667        0.379  NS    #>  5 ive           0.0400 0.283 0.888         1.04         0.597  NS    #>  6 ivf           0.0800 0.283 0.777         1.08         0.622  NS    #>  7 ivg          -0.0800 0.283 0.777         0.923        0.529  NS    #>  8 ivh          -0.619  0.290 0.0326        0.538        0.303  *     #>  9 ivi          -0.323  0.285 0.257         0.724        0.413  NS    #> 10 ivj          -1.15   0.308 0.000182      0.316        0.171  ***   #> 11 ivk          -0.575  0.289 0.0463        0.562        0.318  *     #> 12 ivl          -0.708  0.292 0.0153        0.493        0.276  *     #> 13 ivm          -1.15   0.308 0.000182      0.316        0.171  ***   #> 14 ivn          -1.05   0.303 0.000563      0.351        0.192  ***   #> 15 ivo          -1.45   0.324 0.0000076     0.235        0.122  ***   #> 16 ivp          -0.995  0.301 0.000960      0.370        0.203  ***   #> 17 ivq          -0.800  0.295 0.00660       0.449        0.250  **    #> 18 ivr          -1.66   0.338 0.0000009     0.190        0.0958 ***   #> 19 ivs          -1.21   0.311 0.000100      0.299        0.160  ***   #> 20 ivt          -1.66   0.338 0.0000009     0.190        0.0958 ***   #> 21 ivu          -1.90   0.358 0.0000001     0.149        0.0716 ***   #> 22 ivv          -1.59   0.333 0.0000019     0.205        0.104  ***   #> 23 ivw          -1.90   0.358 0.0000001     0.149        0.0716 ***   #> 24 ivx          -2.59   0.440 0             0.0753       0.0293 ***   #> 25 ivy          -2.09   0.377 0             0.124        0.0566 ***   #> 26 ivz          -2.75   0.466 0             0.0638       0.0232 ***   #> # ℹ 1 more variable: ci[2] <dbl> #> ____________ #> Contrasts: - #>  #> $iv #> [1] \"contr.treatment\" #>   rm(df, tib)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr count, mutate, rename forcats fct_count, fct_recode ggplot2 as_labeller, element_text, ggplot, labs, theme_get, theme_set, theme_update purrr list_rbind, list_transpose, map, map_chr, map_dbl, map_int, map2, map2_chr rlang %@%, %|%, %||%, eval_tidy, quos, set_names stringr str_to_title tibble tibble tidyselect all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, starts_with, ","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/rm_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Sequentially Numbered Objects from Workspace — rm_objects","title":"Remove Sequentially Numbered Objects from Workspace — rm_objects","text":"Remove series sequentially named objects workspace another specified environment. example, conveniently remove series sequentially numbered models.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/rm_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Sequentially Numbered Objects from Workspace — rm_objects","text":"","code":"rm_objects(basename, suffixes, envir = rlang::caller_env())"},{"path":"https://mark-eis.github.io/ParaAnita/reference/rm_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Sequentially Numbered Objects from Workspace — rm_objects","text":"basename Common base name (quoted) series objects. suffixes numeric character vector representing suffixes series objects. envir environment remove objects. Use .GlobalEnv workspace; default caller_env().","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/rm_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Sequentially Numbered Objects from Workspace — rm_objects","text":"character vector matching names remaining workspace another specified environment, returned invisibly.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/rm_objects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove Sequentially Numbered Objects from Workspace — rm_objects","text":"rm_objects() lists objects workspace (another specified environment) whose names start basename, removes basename followed element included suffixes, finally lists remaining objects names matching basename.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/rm_objects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Sequentially Numbered Objects from Workspace — rm_objects","text":"","code":"## Create some sequentially numbered objects  model1 <- model2 <- model3 <- model4 <- lm(1~1)  ls(pattern = \"model\") #> [1] \"model1\" \"model2\" \"model3\" \"model4\"   ## Remove three of them  rm_objects(model, 1:3) #> Objects matching \"model…\" in this environment: #> \t model1 model2 model3 model4  #> Objects matching \"model…\" remaining in this environment: #> \t model4    ## Create some sequentially named objects  model_a <- model_b <- model_c <- model_d <- lm(1~1)  ls(pattern = \"model_\") #> [1] \"model_a\" \"model_b\" \"model_c\" \"model_d\"   ## Remove three of them  rm_objects(model_, letters[1:3]) #> Objects matching \"model_…\" in this environment: #> \t model_a model_b model_c model_d  #> Objects matching \"model_…\" remaining in this environment: #> \t model_d    ## Use within a function  (\\() {                  ## Anonymous function, but doesn't have to be    model1 <- model2 <- model3 <- model4 <- model5 <- lm(1~1)    rm_objects(model, 1:5)  })() #> Objects matching \"model…\" in this environment: #> \t model1 model2 model3 model4 model5  #> Objects matching \"model…\" remaining in this environment: #> \t     ls(pattern = \"model\") #> [1] \"model4\"  \"model_d\"   rm_objects(model, c(4, \"_d\")) #> Objects matching \"model…\" in this environment: #> \t model4 model_d  #> Objects matching \"model…\" remaining in this environment: #>"},{"path":"https://mark-eis.github.io/ParaAnita/reference/starsig.html","id":null,"dir":"Reference","previous_headings":"","what":"Stars for Statistical Significance — starsig","title":"Stars for Statistical Significance — starsig","text":"Stars statistical significance levels usual R. vectorised function.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/starsig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stars for Statistical Significance — starsig","text":"","code":"starsig(p)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/starsig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stars for Statistical Significance — starsig","text":"p numeric vector probabilities.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/starsig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stars for Statistical Significance — starsig","text":"character vector, length p.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/starsig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stars for Statistical Significance — starsig","text":"","code":"(test_seq <- c(0.0003, 0.0010, 0.0032, 0.0100, 0.0316, 0.0500, 0.0631, 0.1000, 0.3162)) #> [1] 0.0003 0.0010 0.0032 0.0100 0.0316 0.0500 0.0631 0.1000 0.3162 starsig(test_seq) #> [1] *** **  **  *   *   .   .   NS  NS  #> Levels: *** ** * . NS rbind(test_seq, as.character(starsig(test_seq))) #>          [,1]    [,2]    [,3]     [,4]   [,5]     [,6]   [,7]     [,8]  #> test_seq \"3e-04\" \"0.001\" \"0.0032\" \"0.01\" \"0.0316\" \"0.05\" \"0.0631\" \"0.1\" #>          \"***\"   \"**\"    \"**\"     \"*\"    \"*\"      \".\"    \".\"      \"NS\"  #>          [,9]     #> test_seq \"0.3162\" #>          \"NS\"     data.frame(val = test_seq, sig = starsig(test_seq)) #>      val sig #> 1 0.0003 *** #> 2 0.0010  ** #> 3 0.0032  ** #> 4 0.0100   * #> 5 0.0316   * #> 6 0.0500   . #> 7 0.0631   . #> 8 0.1000  NS #> 9 0.3162  NS  rm(test_seq)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/summanov.html","id":null,"dir":"Reference","previous_headings":"","what":"List of Summary and Analysis of Deviance Objects for Related Univariable GLMs — summanov","title":"List of Summary and Analysis of Deviance Objects for Related Univariable GLMs — summanov","text":"summanov() provides list summary analysis deviance objects series related univariable GLMs data binary dependent variable (two-column) dependent variable binomial proportions.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/summanov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of Summary and Analysis of Deviance Objects for Related Univariable GLMs — summanov","text":"","code":"summanov(data, .dep_var, ..., .family = binomial, .test = \"Chisq\")"},{"path":"https://mark-eis.github.io/ParaAnita/reference/summanov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List of Summary and Analysis of Deviance Objects for Related Univariable GLMs — summanov","text":"data data frame, data frame extension (e.g. tibble). .dep_var <data-masking> quoted name binary dependent variable used LHS model formula; numeric values 0 1, two-column matrix columns giving numbers successes failures e.g., cbind(pn, qn). ... <tidy-select> quoted name(s) one factors character vectors .data, included (excluded)  independent variables list GLM analyses. .family description error distribution link function used model. Can character string naming family function, family function result call family function; default binomial. .test character string, (partially) matching one \"Chisq\", \"LRT\", \"Rao\", \"F\" \"Cp\"; default \"Chisq\".","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/summanov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of Summary and Analysis of Deviance Objects for Related Univariable GLMs — summanov","text":"list summ_anov objects length equal number factors character vectors selected using ... arguments. summ_anov object simply list class \"summ_anov\", comprising following two elements: - summary Summary generalised linear model fit given summary.glm. anova Analysis deviance generalised linear model fit given anova.glm.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/summanov.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List of Summary and Analysis of Deviance Objects for Related Univariable GLMs — summanov","text":"Variables .data included (excluded)  independent variables list GLM analyses may selected using ... argument <tidy-select> syntax package dplyr, including use selection helpers. structure output list may changed list pairs pair lists conveniently using list_transpose. univariable GLMs may easily compared likewise univariable GLM anovas (analysis deviance). univ_anova provides succinct summmary univariable analyses deviance potential categorical independent variables data. anova_tbl also provides succinct summmary list anovas.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/summanov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of Summary and Analysis of Deviance Objects for Related Univariable GLMs — summanov","text":"","code":"## Simulate Bernoulli data (d <- list(     iv2 = list(g = c(\"a\", \"c\", \"e\"), h = c(\"b\", \"d\", \"f\")),     iv3 = list(i = c(\"a\", \"b\", \"c\"), j = c(\"d\", \"e\", \"f\")),     iv4 = list(k = c(\"a\", \"b\"), l = c(\"c\", \"d\"), m = c(\"e\", \"f\")) ) |> add_grps(bernoulli_data(levels = 6), iv, .key = _)) #> ___________________________ #> Simulated Bernoulli Data: - #>  #> # A tibble: 396 × 5 #>    iv    iv2   iv3   iv4      dv #>    <fct> <fct> <fct> <fct> <int> #>  1 a     g     i     k         0 #>  2 a     g     i     k         0 #>  3 a     g     i     k         0 #>  4 a     g     i     k         1 #>  5 a     g     i     k         1 #>  6 a     g     i     k         1 #>  7 a     g     i     k         0 #>  8 a     g     i     k         0 #>  9 a     g     i     k         1 #> 10 a     g     i     k         1 #> # ℹ 386 more rows  ## Binary dependent variable d |> summanov(dv, starts_with(\"iv\")) #> _______________________________________ #> GLM Summary and Analysis of Deviance: - #>  #> $iv #> ______________ #> GLM Summary: - #>  #>  #> Call: #> glm(formula = new_formula(get_expr(.dep_var), sym(x)), family = .family,  #>     data = data) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)   0.1214     0.2466   0.492 0.622674     #> ivb          -0.1214     0.3485  -0.348 0.727644     #> ivc          -0.6161     0.3539  -1.741 0.081694 .   #> ivd          -1.5267     0.3958  -3.858 0.000114 *** #> ive          -1.3451     0.3835  -3.507 0.000453 *** #> ivf          -2.6228     0.5265  -4.981 6.31e-07 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 495.39  on 395  degrees of freedom #> Residual deviance: 441.98  on 390  degrees of freedom #> AIC: 453.98 #>  #> Number of Fisher Scoring iterations: 5 #>  #> ____________ #> GLM Anova: - #>  #> Analysis of Deviance Table #>  #> Model: binomial, link: logit #>  #> Response: dv #>  #> Terms added sequentially (first to last) #>  #>  #>      Df Deviance Resid. Df Resid. Dev  Pr(>Chi)     #> NULL                   395     495.39               #> iv    5   53.408       390     441.98 2.773e-10 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> $iv2 #> ______________ #> GLM Summary: - #>  #>  #> Call: #> glm(formula = new_formula(get_expr(.dep_var), sym(x)), family = .family,  #>     data = data) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  -0.4947     0.1465  -3.377 0.000734 *** #> iv2h         -0.5639     0.2188  -2.577 0.009958 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 495.39  on 395  degrees of freedom #> Residual deviance: 488.65  on 394  degrees of freedom #> AIC: 492.65 #>  #> Number of Fisher Scoring iterations: 4 #>  #> ____________ #> GLM Anova: - #>  #> Analysis of Deviance Table #>  #> Model: binomial, link: logit #>  #> Response: dv #>  #> Terms added sequentially (first to last) #>  #>  #>      Df Deviance Resid. Df Resid. Dev Pr(>Chi)    #> NULL                   395     495.39             #> iv2   1   6.7356       394     488.65 0.009451 ** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> $iv3 #> ______________ #> GLM Summary: - #>  #>  #> Call: #> glm(formula = new_formula(get_expr(.dep_var), sym(x)), family = .family,  #>     data = data) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  -0.1214     0.1424  -0.852    0.394     #> iv3j         -1.4881     0.2380  -6.253 4.03e-10 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 495.39  on 395  degrees of freedom #> Residual deviance: 452.18  on 394  degrees of freedom #> AIC: 456.18 #>  #> Number of Fisher Scoring iterations: 3 #>  #> ____________ #> GLM Anova: - #>  #> Analysis of Deviance Table #>  #> Model: binomial, link: logit #>  #> Response: dv #>  #> Terms added sequentially (first to last) #>  #>  #>      Df Deviance Resid. Df Resid. Dev  Pr(>Chi)     #> NULL                   395     495.39               #> iv3   1   43.208       394     452.18 4.921e-11 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> $iv4 #> ______________ #> GLM Summary: - #>  #>  #> Call: #> glm(formula = new_formula(get_expr(.dep_var), sym(x)), family = .family,  #>     data = data) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  0.06062    0.17416   0.348 0.727764     #> iv4l        -0.96633    0.25939  -3.725 0.000195 *** #> iv4m        -1.78339    0.29876  -5.969 2.38e-09 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 495.39  on 395  degrees of freedom #> Residual deviance: 453.62  on 393  degrees of freedom #> AIC: 459.62 #>  #> Number of Fisher Scoring iterations: 4 #>  #> ____________ #> GLM Anova: - #>  #> Analysis of Deviance Table #>  #> Model: binomial, link: logit #>  #> Response: dv #>  #> Terms added sequentially (first to last) #>  #>  #>      Df Deviance Resid. Df Resid. Dev Pr(>Chi)     #> NULL                   395     495.39              #> iv4   2   41.769       393     453.62 8.51e-10 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  d |> summanov(dv, starts_with(\"iv\") & !iv2) #> _______________________________________ #> GLM Summary and Analysis of Deviance: - #>  #> $iv #> ______________ #> GLM Summary: - #>  #>  #> Call: #> glm(formula = new_formula(get_expr(.dep_var), sym(x)), family = .family,  #>     data = data) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)   0.1214     0.2466   0.492 0.622674     #> ivb          -0.1214     0.3485  -0.348 0.727644     #> ivc          -0.6161     0.3539  -1.741 0.081694 .   #> ivd          -1.5267     0.3958  -3.858 0.000114 *** #> ive          -1.3451     0.3835  -3.507 0.000453 *** #> ivf          -2.6228     0.5265  -4.981 6.31e-07 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 495.39  on 395  degrees of freedom #> Residual deviance: 441.98  on 390  degrees of freedom #> AIC: 453.98 #>  #> Number of Fisher Scoring iterations: 5 #>  #> ____________ #> GLM Anova: - #>  #> Analysis of Deviance Table #>  #> Model: binomial, link: logit #>  #> Response: dv #>  #> Terms added sequentially (first to last) #>  #>  #>      Df Deviance Resid. Df Resid. Dev  Pr(>Chi)     #> NULL                   395     495.39               #> iv    5   53.408       390     441.98 2.773e-10 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> $iv3 #> ______________ #> GLM Summary: - #>  #>  #> Call: #> glm(formula = new_formula(get_expr(.dep_var), sym(x)), family = .family,  #>     data = data) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  -0.1214     0.1424  -0.852    0.394     #> iv3j         -1.4881     0.2380  -6.253 4.03e-10 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 495.39  on 395  degrees of freedom #> Residual deviance: 452.18  on 394  degrees of freedom #> AIC: 456.18 #>  #> Number of Fisher Scoring iterations: 3 #>  #> ____________ #> GLM Anova: - #>  #> Analysis of Deviance Table #>  #> Model: binomial, link: logit #>  #> Response: dv #>  #> Terms added sequentially (first to last) #>  #>  #>      Df Deviance Resid. Df Resid. Dev  Pr(>Chi)     #> NULL                   395     495.39               #> iv3   1   43.208       394     452.18 4.921e-11 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> $iv4 #> ______________ #> GLM Summary: - #>  #>  #> Call: #> glm(formula = new_formula(get_expr(.dep_var), sym(x)), family = .family,  #>     data = data) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  0.06062    0.17416   0.348 0.727764     #> iv4l        -0.96633    0.25939  -3.725 0.000195 *** #> iv4m        -1.78339    0.29876  -5.969 2.38e-09 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 495.39  on 395  degrees of freedom #> Residual deviance: 453.62  on 393  degrees of freedom #> AIC: 459.62 #>  #> Number of Fisher Scoring iterations: 4 #>  #> ____________ #> GLM Anova: - #>  #> Analysis of Deviance Table #>  #> Model: binomial, link: logit #>  #> Response: dv #>  #> Terms added sequentially (first to last) #>  #>  #>      Df Deviance Resid. Df Resid. Dev Pr(>Chi)     #> NULL                   395     495.39              #> iv4   2   41.769       393     453.62 8.51e-10 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>   ## Binomial proportions (d <- d |> binom_contingency(dv, starts_with(\"iv\"))) #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 6 × 6 #>   iv    iv2   iv3   iv4      pn    qn #> * <fct> <fct> <fct> <fct> <int> <int> #> 1 a     g     i     k        35    31 #> 2 b     h     i     k        33    33 #> 3 c     g     i     l        25    41 #> 4 d     h     j     l        13    53 #> 5 e     g     j     m        15    51 #> 6 f     h     j     m         5    61  (uva <- d |> summanov(cbind(pn, qn), num_range(\"iv\", 2:4))) #> _______________________________________ #> GLM Summary and Analysis of Deviance: - #>  #> $iv2 #> ______________ #> GLM Summary: - #>  #>  #> Call: #> glm(formula = new_formula(get_expr(.dep_var), sym(x)), family = .family,  #>     data = data) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  -0.4947     0.1465  -3.377 0.000734 *** #> iv2h         -0.5639     0.2188  -2.577 0.009958 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 53.408  on 5  degrees of freedom #> Residual deviance: 46.673  on 4  degrees of freedom #> AIC: 76.454 #>  #> Number of Fisher Scoring iterations: 4 #>  #> ____________ #> GLM Anova: - #>  #> Analysis of Deviance Table #>  #> Model: binomial, link: logit #>  #> Response: cbind(pn, qn) #>  #> Terms added sequentially (first to last) #>  #>  #>      Df Deviance Resid. Df Resid. Dev Pr(>Chi)    #> NULL                     5     53.408             #> iv2   1   6.7356         4     46.673 0.009451 ** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> $iv3 #> ______________ #> GLM Summary: - #>  #>  #> Call: #> glm(formula = new_formula(get_expr(.dep_var), sym(x)), family = .family,  #>     data = data) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  -0.1214     0.1424  -0.852    0.394     #> iv3j         -1.4881     0.2380  -6.253 4.04e-10 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 53.408  on 5  degrees of freedom #> Residual deviance: 10.200  on 4  degrees of freedom #> AIC: 39.982 #>  #> Number of Fisher Scoring iterations: 4 #>  #> ____________ #> GLM Anova: - #>  #> Analysis of Deviance Table #>  #> Model: binomial, link: logit #>  #> Response: cbind(pn, qn) #>  #> Terms added sequentially (first to last) #>  #>  #>      Df Deviance Resid. Df Resid. Dev  Pr(>Chi)     #> NULL                     5     53.408               #> iv3   1   43.208         4     10.200 4.921e-11 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> $iv4 #> ______________ #> GLM Summary: - #>  #>  #> Call: #> glm(formula = new_formula(get_expr(.dep_var), sym(x)), family = .family,  #>     data = data) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  0.06062    0.17416   0.348 0.727764     #> iv4l        -0.96633    0.25939  -3.725 0.000195 *** #> iv4m        -1.78339    0.29876  -5.969 2.38e-09 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 53.408  on 5  degrees of freedom #> Residual deviance: 11.639  on 3  degrees of freedom #> AIC: 43.421 #>  #> Number of Fisher Scoring iterations: 4 #>  #> ____________ #> GLM Anova: - #>  #> Analysis of Deviance Table #>  #> Model: binomial, link: logit #>  #> Response: cbind(pn, qn) #>  #> Terms added sequentially (first to last) #>  #>  #>      Df Deviance Resid. Df Resid. Dev Pr(>Chi)     #> NULL                     5     53.408              #> iv4   2   41.769         3     11.639 8.51e-10 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>   ## Change list of pairs into a pair of lists using {purrr} list_transpose() list_transpose(uva)$summary #> $iv2 #> ______________ #> GLM Summary: - #>  #>  #> Call: #> glm(formula = new_formula(get_expr(.dep_var), sym(x)), family = .family,  #>     data = data) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  -0.4947     0.1465  -3.377 0.000734 *** #> iv2h         -0.5639     0.2188  -2.577 0.009958 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 53.408  on 5  degrees of freedom #> Residual deviance: 46.673  on 4  degrees of freedom #> AIC: 76.454 #>  #> Number of Fisher Scoring iterations: 4 #>  #>  #> $iv3 #> ______________ #> GLM Summary: - #>  #>  #> Call: #> glm(formula = new_formula(get_expr(.dep_var), sym(x)), family = .family,  #>     data = data) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  -0.1214     0.1424  -0.852    0.394     #> iv3j         -1.4881     0.2380  -6.253 4.04e-10 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 53.408  on 5  degrees of freedom #> Residual deviance: 10.200  on 4  degrees of freedom #> AIC: 39.982 #>  #> Number of Fisher Scoring iterations: 4 #>  #>  #> $iv4 #> ______________ #> GLM Summary: - #>  #>  #> Call: #> glm(formula = new_formula(get_expr(.dep_var), sym(x)), family = .family,  #>     data = data) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  0.06062    0.17416   0.348 0.727764     #> iv4l        -0.96633    0.25939  -3.725 0.000195 *** #> iv4m        -1.78339    0.29876  -5.969 2.38e-09 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 53.408  on 5  degrees of freedom #> Residual deviance: 11.639  on 3  degrees of freedom #> AIC: 43.421 #>  #> Number of Fisher Scoring iterations: 4 #>  #>   list_transpose(uva)$anova #> $iv2 #> ____________ #> GLM Anova: - #>  #> Analysis of Deviance Table #>  #> Model: binomial, link: logit #>  #> Response: cbind(pn, qn) #>  #> Terms added sequentially (first to last) #>  #>  #>      Df Deviance Resid. Df Resid. Dev Pr(>Chi)    #> NULL                     5     53.408             #> iv2   1   6.7356         4     46.673 0.009451 ** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> $iv3 #> ____________ #> GLM Anova: - #>  #> Analysis of Deviance Table #>  #> Model: binomial, link: logit #>  #> Response: cbind(pn, qn) #>  #> Terms added sequentially (first to last) #>  #>  #>      Df Deviance Resid. Df Resid. Dev  Pr(>Chi)     #> NULL                     5     53.408               #> iv3   1   43.208         4     10.200 4.921e-11 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> $iv4 #> ____________ #> GLM Anova: - #>  #> Analysis of Deviance Table #>  #> Model: binomial, link: logit #>  #> Response: cbind(pn, qn) #>  #> Terms added sequentially (first to last) #>  #>  #>      Df Deviance Resid. Df Resid. Dev Pr(>Chi)     #> NULL                     5     53.408              #> iv4   2   41.769         3     11.639 8.51e-10 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>   rm(d, uva)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. tidy eval operators {{, !!, !!! syntactic constructs specially interpreted tidy eval functions. mostly need {{, !! !!! advanced operators use simple cases. curly-curly operator {{ allows tunnel data-variables passed function arguments inside tidy eval functions. {{ designed individual arguments. pass multiple arguments contained dots, use ... normal way.   enquo() enquos() delay execution one several function arguments. former returns single expression, latter returns list expressions. defused, expressions longer evaluate . must injected back evaluation context !! (single expression) !!! (list expressions).   simple case, code equivalent usage {{ ... . Defusing enquo() enquos() needed complex cases, instance need inspect modify expressions way. .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[.   Another tidy eval operator :=. makes possible use glue curly-curly syntax LHS =. technical reasons, R language support complex expressions left =, use := workaround.   Many tidy eval functions like dplyr::mutate() dplyr::summarise() give automatic name unnamed inputs. need create sort automatic names , use as_label(). instance, glue-tunnelling syntax can reproduced manually :   Expressions defused enquo() (tunnelled {{) need simple column names, can arbitrarily complex. as_label() handles cases gracefully. code assumes simple column name, use as_name() instead. safer throws error input name expected.","code":"my_function <- function(data, var, ...) {   data %>%     group_by(...) %>%     summarise(mean = mean({{ var }})) } my_function <- function(data, var, ...) {   # Defuse   var <- enquo(var)   dots <- enquos(...)    # Inject   data %>%     group_by(!!!dots) %>%     summarise(mean = mean(!!var)) } my_var <- \"disp\" mtcars %>% summarise(mean = mean(.data[[my_var]])) my_function <- function(data, var, suffix = \"foo\") {   # Use `{{` to tunnel function arguments and the usual glue   # operator `{` to interpolate plain strings.   data %>%     summarise(\"{{ var }}_mean_{suffix}\" := mean({{ var }})) } my_function <- function(data, var, suffix = \"foo\") {   var <- enquo(var)   prefix <- as_label(var)   data %>%     summarise(\"{prefix}_mean_{suffix}\" := mean(!!var)) }"},{"path":"https://mark-eis.github.io/ParaAnita/reference/univ_anova.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyses of Deviance Summarising Fits of Univariable GLMs — univ_anova","title":"Analyses of Deviance Summarising Fits of Univariable GLMs — univ_anova","text":"univ_anova() provides succinct summary analyses deviance univariable GLMs based possible categorical independent variable Bernoulli binomial data set.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/univ_anova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyses of Deviance Summarising Fits of Univariable GLMs — univ_anova","text":"","code":"univ_anova(   data,   .dep_var,   .family = binomial,   .test = c(\"none\", \"Rao\", \"LRT\", \"Chisq\", \"F\") )"},{"path":"https://mark-eis.github.io/ParaAnita/reference/univ_anova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyses of Deviance Summarising Fits of Univariable GLMs — univ_anova","text":"data data frame, data frame extension (e.g. tibble). .dep_var <data-masking> quoted name binary dependent variable, numeric values 0 1, two-column matrix columns giving numbers successes failures e.g., cbind(pn, qn). .family family function; default \"binomial\". (See family details family functions.) .test character string, (partially) matching one \"none\", \"Chisq\", \"LRT\", \"Rao\", \"F\" \"Cp\"; default \"none\".","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/univ_anova.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyses of Deviance Summarising Fits of Univariable GLMs — univ_anova","text":"object class c(\"univ_anova\" \"announce\"), inheriting \"anova\" \"data.frame\" add1(), summarising differences fitted univariable GLMs null model.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/univ_anova.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyses of Deviance Summarising Fits of Univariable GLMs — univ_anova","text":"univ_anova() uses add1() stats package compare univariable GLMs possible categorical independent variable (.e., \"factor\" columns) .data null model. data types e.g. \"character\" vectors ignored converted \"factor\" included analysis.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/univ_anova.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyses of Deviance Summarising Fits of Univariable GLMs — univ_anova","text":"","code":"d <- list(     iv2 = list(g = c(\"a\", \"c\", \"e\"), h = c(\"b\", \"d\", \"f\")),     iv3 = list(i = c(\"a\", \"b\", \"c\"), j = c(\"d\", \"e\", \"f\")),     iv4 = list(k = c(\"a\", \"b\"), l = c(\"c\", \"d\"), m = c(\"e\", \"f\")) ) |> add_grps(bernoulli_data(levels = 6), iv, .key = _) |> print() #> ___________________________ #> Simulated Bernoulli Data: - #>  #> # A tibble: 396 × 5 #>    iv    iv2   iv3   iv4      dv #>    <fct> <fct> <fct> <fct> <int> #>  1 a     g     i     k         0 #>  2 a     g     i     k         1 #>  3 a     g     i     k         0 #>  4 a     g     i     k         0 #>  5 a     g     i     k         1 #>  6 a     g     i     k         1 #>  7 a     g     i     k         0 #>  8 a     g     i     k         0 #>  9 a     g     i     k         0 #> 10 a     g     i     k         1 #> # ℹ 386 more rows  d |> univ_anova(dv, .test = \"LRT\") #> ___________________________________ #> Univariable Analysis of Deviance: - #>  #> Single term additions #>  #> Model: #> dv ~ 1 #>        Df Deviance    AIC    LRT  Pr(>Chi)     #> <none>      475.39 477.39                      #> iv      5   435.47 447.47 39.919 1.550e-07 *** #> iv2     1   470.44 474.44  4.947   0.02614 *   #> iv3     1   455.36 459.36 20.031 7.619e-06 *** #> iv4     2   443.43 449.43 31.961 1.147e-07 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1  d |> binom_contingency(dv, starts_with(\"iv\")) |> print() |>      univ_anova(cbind(pn, qn), .test = \"LRT\") #> _____________________________ #> Binomial Contingency Table: - #>  #> # A tibble: 6 × 6 #>   iv    iv2   iv3   iv4      pn    qn #> * <fct> <fct> <fct> <fct> <int> <int> #> 1 a     g     i     k        34    32 #> 2 b     h     i     k        21    45 #> 3 c     g     i     l        22    44 #> 4 d     h     j     l        21    45 #> 5 e     g     j     m        11    55 #> 6 f     h     j     m         5    61 #> ___________________________________ #> Univariable Analysis of Deviance: - #>  #> Single term additions #>  #> Model: #> cbind(pn, qn) ~ 1 #>        Df Deviance    AIC    LRT  Pr(>Chi)     #> <none>      39.919 67.588                      #> iv      5    0.000 37.668 39.919 1.550e-07 *** #> iv2     1   34.973 64.641  4.947   0.02614 *   #> iv3     1   19.888 49.556 20.031 7.619e-06 *** #> iv4     2    7.958 39.627 31.961 1.147e-07 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1  rm(d)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/var_labs.html","id":null,"dir":"Reference","previous_headings":"","what":"Format or Lookup Variable Names for Plot Titles — var_labs","title":"Format or Lookup Variable Names for Plot Titles — var_labs","text":"Vectorised labeller function used plot_model revising variable names use subtitles individual plots facet labels faceted plots.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/var_labs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format or Lookup Variable Names for Plot Titles — var_labs","text":"","code":"var_labs(labels)"},{"path":"https://mark-eis.github.io/ParaAnita/reference/var_labs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format or Lookup Variable Names for Plot Titles — var_labs","text":"labels character vector containing names variables revised.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/var_labs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format or Lookup Variable Names for Plot Titles — var_labs","text":"character vector containing revised names.","code":""},{"path":"https://mark-eis.github.io/ParaAnita/reference/var_labs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format or Lookup Variable Names for Plot Titles — var_labs","text":"var_labs package ParaAnita simply applies str_to_title argument. user may override providing vectorised labeller function, see labeller facet_wrap example.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/ParaAnita/reference/var_labs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format or Lookup Variable Names for Plot Titles — var_labs","text":"","code":"## Default labeller c(\"matthew\", \"mark\", \"luke\", \"john\") |> var_labs() #> [[1]] #> [1] \"Matthew\" #>  #> [[2]] #> [1] \"Mark\" #>  #> [[3]] #> [1] \"Luke\" #>  #> [[4]] #> [1] \"John\" #>   ygps <- c(\"year\", \"ygroup1\", \"ygroup2\", \"ygroup3\", \"ygroup4\", \"ygroup5\", \"ygroup6\", \"ygroup7\") mgps <- c(\"month\", \"season\", \"mgroup2\", \"mgroup3\", \"mgroup4\", \"mgroup5\", \"mgroup6\") demog <- c(\"gender\", \"age_group\", \"location\", \"breed\")  # Vectorised function to replace terse variable names with names suitable for labelling plots var_labs <- as_labeller(     c(         c(\"Year\", paste(\"Year Group\", seq_along(ygps[-1]))) |> set_names(ygps),         c(\"Month\", \"Season\", paste(\"Month Group\", seq_along(mgps[-1])[-1])) |> set_names(mgps),         c(\"Animal Gender\", \"Age Group\", \"Geographic Location\", \"Cattle Breed\") |> set_names(demog)     ) )  ygps |> var_labs() #> [[1]] #> [1] \"Year\" #>  #> [[2]] #> [1] \"Year Group 1\" #>  #> [[3]] #> [1] \"Year Group 2\" #>  #> [[4]] #> [1] \"Year Group 3\" #>  #> [[5]] #> [1] \"Year Group 4\" #>  #> [[6]] #> [1] \"Year Group 5\" #>  #> [[7]] #> [1] \"Year Group 6\" #>  #> [[8]] #> [1] \"Year Group 7\" #>  mgps |> var_labs() #> [[1]] #> [1] \"Month\" #>  #> [[2]] #> [1] \"Season\" #>  #> [[3]] #> [1] \"Month Group 2\" #>  #> [[4]] #> [1] \"Month Group 3\" #>  #> [[5]] #> [1] \"Month Group 4\" #>  #> [[6]] #> [1] \"Month Group 5\" #>  #> [[7]] #> [1] \"Month Group 6\" #>  demog |> var_labs() #> [[1]] #> [1] \"Animal Gender\" #>  #> [[2]] #> [1] \"Age Group\" #>  #> [[3]] #> [1] \"Geographic Location\" #>  #> [[4]] #> [1] \"Cattle Breed\" #>   rm(demog, mgps, var_labs, ygps)"}]
