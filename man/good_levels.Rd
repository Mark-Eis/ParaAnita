% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/good-levels.R
\name{good_levels}
\alias{good_levels}
\alias{drop_null}
\alias{drop_zero}
\alias{drop_zero.binom_contingency}
\title{Remove Levels of Independent Variable where Dependent Variable All Success or All Failure}
\usage{
good_levels(.data, .dep_var, .ind_var)

drop_null(.data, .dep_var, .ind_var)

drop_zero(object, ...)

drop_zero(object, ...)

\method{drop_zero}{binom_contingency}(object, ...)
}
\arguments{
\item{.data}{a data frame, or a data frame extension (e.g. a \code{\link[tibble:tibble-package]{tibble}}).}

\item{.dep_var}{<\code{\link[rlang:args_data_masking]{data-masking}}> quoted name of a Bernoulli dependent variable that
should be \code{numeric} with values of \var{0} and \var{1}; or in the case of \verb{drop zero()}, a binomial dependent
variable, default \code{cbind(.data$pn, .data$qn)}, representing the number of successes and failures respectively,
see \code{\link[stats:glm]{glm()}}.}

\item{.ind_var}{<\code{\link[rlang:args_data_masking]{data-masking}}> quoted name of the independent variable, which may be
a \code{factor}, or a \verb{character vector}.}

\item{object}{a data frame, or a data frame extension (e.g. a \code{\link[tibble:tibble-package]{tibble}}), to be coerced to
a \code{"binom_contingency"} object.}

\item{...}{for \code{binomial_contingency()}:  <\code{\link[dplyr:dplyr_tidy_select]{tidy-select}}> quoted name(s) of one or more
\code{factor} or \verb{character vector} columns in \code{.data}, to be included in (or excluded from) the output.

for \code{as_binomial_contingency()}: further arguments passed to or from other methods.}
}
\value{
\code{good_levels()} returns a character vector comprising the \code{levels} of \code{.ind_var} for which the
corresponding values of \code{.dep_var} are neither all zero nor all one. Both \code{drop_null()} and
\code{drop_zero()} return a data frame or a data frame extension e.g., a \code{\link[tibble:tibble-package]{tibble}},
equivalent to data, including only rows with levels of \code{.ind_var} for which \code{.dep_var} values are neither
all zero nor all one, or neither having all successes nor all failures respectively.
}
\description{
\code{good_levels()} identifies \code{levels} of an independent variable for which values of a Bernoulli dependent
variable are neither all zero nor all one i.e., those for which \eqn{0 < p < 1}{0 < p < 1}.

\code{drop_null()} drops all data with \code{levels} of an independent variable for which a Bernoulli dependent
variable has values either all zero or all one i.e., those identified by \code{good_levels()}.

\code{drop_zero()} drops all data with \code{levels} of an independent variable for which a binomial dependent variable
has either all successes or failures.

\code{levels_data} returns the levels for all factors in data.

\code{nlevels_data} returns the number of levels for all factors in data.
}
\details{
For a Bernoulli trial dataset with a numeric dependent variable coded as \var{0} or \var{1}, \code{good_levels()}
identifies  \code{\link[base:levels]{levels}} of an independent variable for which values of the dependent variable are
neither all zero nor all one i.e., \eqn{0 < p < 1}{0 < p < 1}.

For a similar dataset, \code{drop_null()} drops all rows of data other than those with \code{levels} of the
independent variable identified by \code{good_levels()}. Unused factor levels are dropped from the independent
variable.

For a binomial dataset, \code{drop_zero()} drops rows of data having either all successes and no failures, or no
successes and all failures.
}
\examples{
d <- bernoulli_data(probs = c(0.8, 0.4, 0, 0.3, 0.6 ))
d |> binom_contingency(dv)
d |> levels_data()
d |> good_levels(dv, iv)
d |> drop_null(dv, iv) |> levels_data()
d |> drop_null(dv, iv) |> binom_contingency(dv)
d |> binom_contingency(dv) |> drop_zero(iv)

identical(
  d |> drop_null(dv, iv) |> binom_contingency(dv),
  d |> binom_contingency(dv) |> drop_zero(iv)
)

d_ls <- map2(c(0.5, 0.4, 1, 1), c(0.1, 0, 0.6, 0), seq, length.out = 5) |>
    lapply(\(x) bernoulli_data(probs = x)) |>
    (\(x) setNames(x, paste0("data", seq_along(x))))()

d_ls |> lapply(\(d) d |> binom_contingency(dv))
d_ls |> lapply(levels_data)
d_ls |> lapply(\(d) d |> good_levels(dv, iv))
d_ls |> lapply(\(d) d |> drop_null(dv, iv) |> binom_contingency(dv))
d_ls |> lapply(\(d) d |> binom_contingency(dv) |> drop_zero(iv))

identical(
  d_ls |> lapply(\(d) d |> drop_null(dv, iv) |> binom_contingency(dv)), 
  d_ls |> lapply(\(d) d |> binom_contingency(dv) |> drop_zero(iv))
)

rm(d, d_ls)

## Using gss_cat dataset from {forcats} package
\dontshow{
   if (!requireNamespace("forcats", quietly = TRUE)) 
       warning("package 'forcats' must be installed")
   try(gss_cat <- forcats::gss_cat)
}

gss_cat |> names()
gss_cat |> levels_data()
gss_cat |> nlevels_data()

\dontshow{
    rm(gss_cat)
}
}
\seealso{
\code{\link{binom_contingency}} and \code{\link[base:levels]{levels}}.

Other levels_data: 
\code{\link{levels_data}()}
}
\concept{levels_data}
