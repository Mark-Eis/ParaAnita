% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/good-levels.R
\name{good_levels}
\alias{good_levels}
\alias{good_levels.data.frame}
\alias{good_levels.binom_contingency}
\alias{drop_zero}
\alias{drop_zero.data.frame}
\alias{drop_zero.binom_contingency}
\alias{drop_null}
\title{Levels of Independent Variable where Dependent Variable Neither All Success Nor All Failure}
\usage{
good_levels(object, ...)

\method{good_levels}{data.frame}(object, .dep_var, .ind_var, ...)

\method{good_levels}{binom_contingency}(object, .ind_var, ...)

drop_zero(object, ...)

\method{drop_zero}{data.frame}(object, .dep_var, .ind_var, ...)

\method{drop_zero}{binom_contingency}(object, ...)

drop_null(.data, .dep_var, .ind_var)
}
\arguments{
\item{object}{a data frame, or a data frame extension (e.g. a \code{\link[tibble:tibble-package]{tibble}}), or an object
of class \code{"binom_contingency"}.}

\item{\dots}{further arguments passed to or from other methods.}

\item{.dep_var}{<\code{\link[rlang:args_data_masking]{data-masking}}> quoted name of a Bernoulli dependent variable that
should be \code{numeric} with values of \var{0} and \var{1}.}

\item{.ind_var}{<\code{\link[rlang:args_data_masking]{data-masking}}> quoted name of the independent variable, which may be
a \code{factor}, or a \verb{character vector}.}

\item{.data}{a data frame, or a data frame extension (e.g. a \code{\link[tibble:tibble-package]{tibble}}).}
}
\value{
\item{\code{good_levels()}}{returns a \verb{character vector} comprising \code{levels} of \code{.ind_var} for which the corresponding
values of \code{.dep_var} are neither all one (success) nor all zero (failure)}

\item{\code{drop_zero()}}{returns an object of the same class as that provided by argument \code{object}: either
a data frame (or a data frame extension e.g., a \code{\link[tibble:tibble-package]{tibble}}) comprising only rows with levels
of the independent variable for which values of the Bernoulli dependent variable are neither all zero nor all one;
or a \code{\link[=binom_contingency]{"binom_contingency"}} object excluding any rows for which values of the Bernoulli dependent
variable are either all one (success) or all zero (failure).}
}
\description{
\code{good_levels()} identifies \code{levels} of an independent variable for which values of a Bernoulli dependent
variable are neither all one (success) nor all zero (failure).

\code{drop_zero()} drops data with \code{levels} of an independent variable for which values of a Bernoulli dependent
variable are either all one (success) or all zero (failure).
}
\details{
For a Bernoulli trial dataset with a numeric dependent variable coded as \var{0} or \var{1}, the generic function
\code{good_levels()} identifies \code{\link[base:levels]{levels}} of an independent variable for which values of the dependent
variable are neither all zero nor all one i.e., \eqn{0 < p < 1}{0 < p < 1}.

For a similar Bernoulli trial dataset, the generic function \code{drop_zero()} drops all rows of data other than those
with \code{levels} of the independent variable identified by \code{good_levels()}. Unused factor levels are dropped from the
independent variable.

The \code{drop_zero()} S3 method for objects of class \code{"binom_contingency"} returns a binomial contingency table equivalent
to the original having been created using \code{\link[=binom_contingency]{binom_contingency()}} with argument \code{.drop_zero = TRUE}.

\code{drop_null()} is deprecated, please use the \code{drop_zero()} S3 method for class \code{"data.frame"}.
}
\examples{
(d_bern <- bernoulli_data(probs = c(0.8, 0.4, 0, 0.3, 0.6 )))
d_bern |> levels_data()

## S3 methods for class 'data.frame' 
d_bern |> good_levels(dv, iv)
d_bern |> drop_zero(dv, iv)
d_bern |> drop_zero(dv, iv) |> levels_data()

(d_bin <- d_bern |> binom_contingency(dv, iv))
## S3 method for class 'binom_contingency' 
d_bin |> good_levels(iv)
d_bin |> drop_zero()

identical(
  d_bern |> drop_zero(dv, iv) |> binom_contingency(dv, iv),
  d_bin |> drop_zero()
)

d_ls <- map2(c(0.5, 0.4, 1, 1), c(0.1, 0, 0.6, 0), seq, length.out = 5) |>
    lapply(\(x) bernoulli_data(probs = x)) |>
    (\(x) setNames(x, paste0("data", seq_along(x))))()

d_ls |> lapply(\(d) d |> binom_contingency(dv))
d_ls |> lapply(levels_data)
d_ls |> lapply(\(d) d |> good_levels(dv, iv))
d_ls |> lapply(\(d) d |> drop_null(dv, iv) |> binom_contingency(dv))
d_ls |> lapply(\(d) d |> binom_contingency(dv) |> drop_zero())

identical(
  d_ls |> lapply(\(d) d |> drop_null(dv, iv) |> binom_contingency(dv)), 
  d_ls |> lapply(\(d) d |> binom_contingency(dv) |> drop_zero())
)

rm(d_bern, d_bin, d_ls)
}
\seealso{
\code{\link{binom_contingency}} and \code{\link[base:levels]{levels}}.

Other levels_data: 
\code{\link{levels_data}()}
}
\concept{levels_data}
